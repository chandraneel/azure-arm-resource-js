{"version":3,"sources":["webpack:///webpack/bootstrap b5f010ec06d1f980c42d","webpack:///external \"msRest\"","webpack:///./lib/resource/models/mappers.ts","webpack:///external \"msRestAzure\"","webpack:///./lib/subscription/models/mappers.ts","webpack:///./lib/resource.ts","webpack:///./lib/subscription/subscriptionClient.ts","webpack:///./lib/subscription/models/index.ts","webpack:///./lib/subscription/operations/index.ts","webpack:///./lib/subscription/operations/subscriptions.ts","webpack:///./lib/subscription/operations/tenants.ts","webpack:///./lib/resource/resourceManagementClient.ts","webpack:///./lib/resource/models/index.ts","webpack:///./lib/resource/operations/index.ts","webpack:///./lib/resource/operations/deployments.ts","webpack:///./lib/resource/operations/providers.ts","webpack:///./lib/resource/operations/resources.ts","webpack:///./lib/resource/operations/resourceGroups.ts","webpack:///./lib/resource/operations/tags.ts","webpack:///./lib/resource/operations/deploymentOperations.ts"],"names":[],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;AC7DA,wB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AAAA;AAAA;;;;GAIG;AAEoE;AAEhE,IAAM,UAAU,GAAG,kEAAgB,CAAC;AACpC,IAAM,YAAY,GAAG,oEAAkB,CAAC;AAExC,IAAM,wBAAwB,GAAG;IACtC,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,0BAA0B;IAC1C,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,0BAA0B;QACrC,eAAe,EAAE;YACf,iBAAiB,EAAE;gBACjB,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,mBAAmB;gBACnC,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,qBAAqB,GAAG;IACnC,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,uBAAuB;IACvC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,uBAAuB;QAClC,eAAe,EAAE;YACf,YAAY,EAAE;gBACZ,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,cAAc;gBAC9B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,OAAO,EAAE;gBACP,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,SAAS;gBACzB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,QAAQ,EAAE;gBACR,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,UAAU;gBAC1B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,mBAAmB,GAAG;IACjC,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,qBAAqB;IACrC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,qBAAqB;QAChC,eAAe,EAAE;YACf,OAAO,EAAE;gBACP,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,SAAS;gBACzB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,QAAQ,EAAE;gBACR,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,UAAU;gBAC1B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,YAAY,GAAG;IAC1B,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,cAAc;IAC9B,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,cAAc;QACzB,eAAe,EAAE;YACf,GAAG,EAAE;gBACH,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,KAAK;gBACrB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,cAAc,EAAE;gBACd,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,gBAAgB;gBAChC,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,cAAc,GAAG;IAC5B,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,gBAAgB;IAChC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,gBAAgB;QAC3B,eAAe,EAAE;YACf,GAAG,EAAE;gBACH,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,KAAK;gBACrB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,cAAc,EAAE;gBACd,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,gBAAgB;gBAChC,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,YAAY,GAAG;IAC1B,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,cAAc;IAC9B,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,cAAc;QACzB,eAAe,EAAE;YACf,WAAW,EAAE;gBACX,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,aAAa;gBAC7B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,oBAAoB,GAAG;IAClC,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,sBAAsB;IACtC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,sBAAsB;QACjC,eAAe,EAAE;YACf,QAAQ,EAAE;gBACR,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,UAAU;gBAC1B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,YAAY,EAAE;gBACZ,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,cAAc;gBAC9B,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,cAAc;iBAC1B;aACF;YACD,UAAU,EAAE;gBACV,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,cAAc,EAAE;gBACd,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,gBAAgB;gBAChC,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,gBAAgB;iBAC5B;aACF;YACD,IAAI,EAAE;gBACJ,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,MAAM;oBACZ,aAAa,EAAE,CAAE,aAAa,EAAE,UAAU,CAAE;iBAC7C;aACF;YACD,YAAY,EAAE;gBACZ,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,cAAc;gBAC9B,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,cAAc;iBAC1B;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,UAAU,GAAG;IACxB,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,YAAY;IAC5B,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,YAAY;QACvB,eAAe,EAAE;YACf,UAAU,EAAE;gBACV,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,sBAAsB;iBAClC;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,sBAAsB,GAAG;IACpC,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,wBAAwB;IACxC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,wBAAwB;QACnC,eAAe,EAAE;YACf,QAAQ,EAAE;gBACR,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,UAAU;gBAC1B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,kCAAkC,GAAG;IAChD,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,oCAAoC;IACpD,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,oCAAoC;QAC/C,eAAe,EAAE;YACf,IAAI,EAAE;gBACJ,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,OAAO,EAAE;gBACP,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,SAAS;gBACzB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,MAAM,EAAE;gBACN,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,QAAQ;gBACxB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,OAAO,EAAE;gBACP,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,SAAS;gBACzB,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACL,QAAQ,EAAE,KAAK;wBACf,cAAc,EAAE,+CAA+C;wBAC/D,IAAI,EAAE;4BACJ,IAAI,EAAE,WAAW;4BACjB,SAAS,EAAE,oCAAoC;yBAChD;qBACJ;iBACF;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,aAAa,GAAG;IAC3B,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,eAAe;IAC/B,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,eAAe;QAC1B,eAAe,EAAE;YACf,IAAI,EAAE;gBACJ,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,WAAW,EAAE;gBACX,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,aAAa;gBAC7B,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACL,QAAQ,EAAE,KAAK;wBACf,cAAc,EAAE,mBAAmB;wBACnC,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;yBACf;qBACJ;iBACF;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,SAAS,GAAG;IACvB,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,WAAW;IAC3B,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,WAAW;QACtB,eAAe,EAAE;YACf,IAAI,EAAE;gBACJ,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,KAAK,EAAE;gBACL,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,OAAO;gBACvB,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACL,QAAQ,EAAE,KAAK;wBACf,cAAc,EAAE,0BAA0B;wBAC1C,IAAI,EAAE;4BACJ,IAAI,EAAE,WAAW;4BACjB,SAAS,EAAE,eAAe;yBAC3B;qBACJ;iBACF;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,oBAAoB,GAAG;IAClC,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,sBAAsB;IACtC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,sBAAsB;QACjC,eAAe,EAAE;YACf,YAAY,EAAE;gBACZ,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,cAAc;gBAC9B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,SAAS,EAAE;gBACT,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,WAAW;gBAC3B,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACL,QAAQ,EAAE,KAAK;wBACf,cAAc,EAAE,mBAAmB;wBACnC,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;yBACf;qBACJ;iBACF;aACF;YACD,OAAO,EAAE;gBACP,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,SAAS;gBACzB,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACL,QAAQ,EAAE,KAAK;wBACf,cAAc,EAAE,sBAAsB;wBACtC,IAAI,EAAE;4BACJ,IAAI,EAAE,WAAW;4BACjB,SAAS,EAAE,WAAW;yBACvB;qBACJ;iBACF;aACF;YACD,WAAW,EAAE;gBACX,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,aAAa;gBAC7B,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACL,QAAQ,EAAE,KAAK;wBACf,cAAc,EAAE,mBAAmB;wBACnC,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;yBACf;qBACJ;iBACF;aACF;YACD,UAAU,EAAE;gBACV,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE;wBACH,QAAQ,EAAE,KAAK;wBACf,cAAc,EAAE,mBAAmB;wBACnC,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;yBACf;qBACJ;iBACF;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,QAAQ,GAAG;IACtB,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,UAAU;IAC1B,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,UAAU;QACrB,eAAe,EAAE;YACf,EAAE,EAAE;gBACF,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,IAAI;gBACpB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,SAAS,EAAE;gBACT,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,WAAW;gBAC3B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,iBAAiB,EAAE;gBACjB,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,mBAAmB;gBACnC,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,aAAa,EAAE;gBACb,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,eAAe;gBAC/B,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACL,QAAQ,EAAE,KAAK;wBACf,cAAc,EAAE,iCAAiC;wBACjD,IAAI,EAAE;4BACJ,IAAI,EAAE,WAAW;4BACjB,SAAS,EAAE,sBAAsB;yBAClC;qBACJ;iBACF;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,eAAe,GAAG;IAC7B,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,iBAAiB;IACjC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,iBAAiB;QAC5B,eAAe,EAAE;YACf,EAAE,EAAE;gBACF,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,IAAI;gBACpB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,YAAY,EAAE;gBACZ,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,cAAc;gBAC9B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,YAAY,EAAE;gBACZ,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,cAAc;gBAC9B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,UAAU,GAAG;IACxB,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,YAAY;IAC5B,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,YAAY;QACvB,eAAe,EAAE;YACf,SAAS,EAAE;gBACT,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,WAAW;gBAC3B,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACL,QAAQ,EAAE,KAAK;wBACf,cAAc,EAAE,4BAA4B;wBAC5C,IAAI,EAAE;4BACJ,IAAI,EAAE,WAAW;4BACjB,SAAS,EAAE,iBAAiB;yBAC7B;qBACJ;iBACF;aACF;YACD,EAAE,EAAE;gBACF,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,IAAI;gBACpB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,YAAY,EAAE;gBACZ,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,cAAc;gBAC9B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,YAAY,EAAE;gBACZ,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,cAAc;gBAC9B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,4BAA4B,GAAG;IAC1C,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,8BAA8B;IAC9C,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,8BAA8B;QACzC,eAAe,EAAE;YACf,iBAAiB,EAAE;gBACjB,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,mBAAmB;gBACnC,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,aAAa,EAAE;gBACb,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,eAAe;gBAC/B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,SAAS,EAAE;gBACT,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,WAAW;gBAC3B,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;iBACjB;aACF;YACD,OAAO,EAAE;gBACP,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,SAAS;gBACzB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,SAAS,EAAE;gBACT,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,WAAW;gBAC3B,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACL,QAAQ,EAAE,KAAK;wBACf,cAAc,EAAE,qBAAqB;wBACrC,IAAI,EAAE;4BACJ,IAAI,EAAE,WAAW;4BACjB,SAAS,EAAE,UAAU;yBACtB;qBACJ;iBACF;aACF;YACD,YAAY,EAAE;gBACZ,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,cAAc;gBAC9B,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACL,QAAQ,EAAE,KAAK;wBACf,cAAc,EAAE,uBAAuB;wBACvC,IAAI,EAAE;4BACJ,IAAI,EAAE,WAAW;4BACjB,SAAS,EAAE,YAAY;yBACxB;qBACJ;iBACF;aACF;YACD,QAAQ,EAAE;gBACR,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,UAAU;gBAC1B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,YAAY,EAAE;gBACZ,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,cAAc;gBAC9B,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,cAAc;iBAC1B;aACF;YACD,UAAU,EAAE;gBACV,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,cAAc,EAAE;gBACd,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,gBAAgB;gBAChC,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,gBAAgB;iBAC5B;aACF;YACD,IAAI,EAAE;gBACJ,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,MAAM;oBACZ,aAAa,EAAE,CAAE,aAAa,EAAE,UAAU,CAAE;iBAC7C;aACF;YACD,YAAY,EAAE;gBACZ,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,cAAc;gBAC9B,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,cAAc;iBAC1B;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,wBAAwB,GAAG;IACtC,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,0BAA0B;IAC1C,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,0BAA0B;QACrC,eAAe,EAAE;YACf,KAAK,EAAE;gBACL,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,OAAO;gBACvB,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,oCAAoC;iBAChD;aACF;YACD,UAAU,EAAE;gBACV,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,8BAA8B;iBAC1C;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,kBAAkB,GAAG;IAChC,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,oBAAoB;IACpC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,oBAAoB;QAC/B,eAAe,EAAE;YACf,EAAE,EAAE;gBACF,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,IAAI;gBACpB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,IAAI,EAAE;gBACJ,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,UAAU,EAAE;gBACV,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,8BAA8B;iBAC1C;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,IAAI,GAAG;IAClB,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,MAAM;IACtB,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,MAAM;QACjB,eAAe,EAAE;YACf,IAAI,EAAE;gBACJ,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,SAAS,EAAE;gBACT,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,WAAW;gBAC3B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,OAAO,EAAE;gBACP,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,SAAS;gBACzB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,aAAa,EAAE;gBACb,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,eAAe;gBAC/B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,OAAO,EAAE;gBACP,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,SAAS;gBACzB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,GAAG,GAAG;IACjB,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,KAAK;IACrB,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,KAAK;QAChB,eAAe,EAAE;YACf,IAAI,EAAE;gBACJ,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,IAAI,EAAE;gBACJ,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,IAAI,EAAE;gBACJ,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,MAAM,EAAE;gBACN,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,QAAQ;gBACxB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,KAAK,EAAE;gBACL,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,OAAO;gBACvB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,QAAQ,EAAE;gBACR,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,UAAU;gBAC1B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,QAAQ,GAAG;IACtB,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,UAAU;IAC1B,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,UAAU;QACrB,eAAe,EAAE;YACf,WAAW,EAAE;gBACX,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,aAAa;gBAC7B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,QAAQ,EAAE;gBACR,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,UAAU;gBAC1B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,IAAI,EAAE;gBACJ,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,MAAM;oBACZ,aAAa,EAAE,CAAE,gBAAgB,CAAE;iBACpC;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,QAAQ,GAAG;IACtB,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,UAAU;IAC1B,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,UAAU;QACrB,eAAe,EAAE;YACf,EAAE,EAAE;gBACF,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,IAAI;gBACpB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,IAAI,EAAE;gBACJ,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,IAAI,EAAE;gBACJ,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,QAAQ,EAAE;gBACR,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,UAAU;gBAC1B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,IAAI,EAAE;gBACJ,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE;wBACH,QAAQ,EAAE,KAAK;wBACf,cAAc,EAAE,mBAAmB;wBACnC,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;yBACf;qBACJ;iBACF;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,eAAe,GAAG;IAC7B,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,iBAAiB;IACjC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,iBAAiB;QAC5B,eAAe,EAAE;YACf,EAAE,EAAE;gBACF,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,IAAI;gBACpB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,IAAI,EAAE;gBACJ,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,IAAI,EAAE;gBACJ,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,QAAQ,EAAE;gBACR,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,UAAU;gBAC1B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,IAAI,EAAE;gBACJ,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE;wBACH,QAAQ,EAAE,KAAK;wBACf,cAAc,EAAE,mBAAmB;wBACnC,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;yBACf;qBACJ;iBACF;aACF;YACD,IAAI,EAAE;gBACJ,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,MAAM;iBAClB;aACF;YACD,UAAU,EAAE;gBACV,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,IAAI,EAAE;gBACJ,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,MAAM;gBACtB,WAAW,EAAE;oBACX,OAAO,EAAE,kBAAkB;iBAC5B;gBACD,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,SAAS,EAAE;gBACT,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,WAAW;gBAC3B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,GAAG,EAAE;gBACH,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,KAAK;gBACrB,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,KAAK;iBACjB;aACF;YACD,QAAQ,EAAE;gBACR,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,UAAU;gBAC1B,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,UAAU;iBACtB;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,uBAAuB,GAAG;IACrC,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,yBAAyB;IACzC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,yBAAyB;QACpC,eAAe,EAAE;YACf,iBAAiB,EAAE;gBACjB,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,mBAAmB;gBACnC,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,aAAa,GAAG;IAC3B,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,eAAe;IAC/B,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,eAAe;QAC1B,eAAe,EAAE;YACf,EAAE,EAAE;gBACF,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,IAAI;gBACpB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,IAAI,EAAE;gBACJ,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,UAAU,EAAE;gBACV,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,yBAAyB;iBACrC;aACF;YACD,QAAQ,EAAE;gBACR,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,UAAU;gBAC1B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,SAAS,EAAE;gBACT,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,WAAW;gBAC3B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,IAAI,EAAE;gBACJ,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE;wBACH,QAAQ,EAAE,KAAK;wBACf,cAAc,EAAE,mBAAmB;wBACnC,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;yBACf;qBACJ;iBACF;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,sBAAsB,GAAG;IACpC,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,wBAAwB;IACxC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,wBAAwB;QACnC,eAAe,EAAE;YACf,IAAI,EAAE;gBACJ,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,UAAU,EAAE;gBACV,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,yBAAyB;iBACrC;aACF;YACD,SAAS,EAAE;gBACT,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,WAAW;gBAC3B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,IAAI,EAAE;gBACJ,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE;wBACH,QAAQ,EAAE,KAAK;wBACf,cAAc,EAAE,mBAAmB;wBACnC,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;yBACf;qBACJ;iBACF;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,iBAAiB,GAAG;IAC/B,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,mBAAmB;IACnC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,mBAAmB;QAC9B,eAAe,EAAE;YACf,SAAS,EAAE;gBACT,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,WAAW;gBAC3B,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACL,QAAQ,EAAE,KAAK;wBACf,cAAc,EAAE,mBAAmB;wBACnC,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;yBACf;qBACJ;iBACF;aACF;YACD,mBAAmB,EAAE;gBACnB,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,qBAAqB;gBACrC,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,qBAAqB,GAAG;IACnC,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,uBAAuB;IACvC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,uBAAuB;QAClC,eAAe,EAAE;YACf,SAAS,EAAE;gBACT,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,WAAW;gBAC3B,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACL,QAAQ,EAAE,KAAK;wBACf,cAAc,EAAE,mBAAmB;wBACnC,IAAI,EAAE;4BACJ,IAAI,EAAE,QAAQ;yBACf;qBACJ;iBACF;aACF;YACD,OAAO,EAAE;gBACP,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,SAAS;gBACzB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,QAAQ,GAAG;IACtB,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,UAAU;IAC1B,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,UAAU;QACrB,eAAe,EAAE;YACf,IAAI,EAAE;gBACJ,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,KAAK,EAAE;gBACL,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,OAAO;gBACvB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,QAAQ,GAAG;IACtB,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,UAAU;IAC1B,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,UAAU;QACrB,eAAe,EAAE;YACf,EAAE,EAAE;gBACF,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,IAAI;gBACpB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,QAAQ,EAAE;gBACR,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,UAAU;gBAC1B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,KAAK,EAAE;gBACL,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,OAAO;gBACvB,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,UAAU;iBACtB;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,UAAU,GAAG;IACxB,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,YAAY;IAC5B,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,YAAY;QACvB,eAAe,EAAE;YACf,EAAE,EAAE;gBACF,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,IAAI;gBACpB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,OAAO,EAAE;gBACP,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,SAAS;gBACzB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,KAAK,EAAE;gBACL,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,OAAO;gBACvB,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,UAAU;iBACtB;aACF;YACD,MAAM,EAAE;gBACN,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,QAAQ;gBACxB,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACL,QAAQ,EAAE,KAAK;wBACf,cAAc,EAAE,qBAAqB;wBACrC,IAAI,EAAE;4BACJ,IAAI,EAAE,WAAW;4BACjB,SAAS,EAAE,UAAU;yBACtB;qBACJ;iBACF;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,cAAc,GAAG;IAC5B,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,gBAAgB;IAChC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,gBAAgB;QAC3B,eAAe,EAAE;YACf,EAAE,EAAE;gBACF,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,IAAI;gBACpB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,YAAY,EAAE;gBACZ,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,cAAc;gBAC9B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,YAAY,EAAE;gBACZ,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,cAAc;gBAC9B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,WAAW,GAAG;IACzB,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,aAAa;IAC7B,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,aAAa;QACxB,eAAe,EAAE;YACf,OAAO,EAAE;gBACP,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,SAAS;gBACzB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,6BAA6B,GAAG;IAC3C,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,+BAA+B;IAC/C,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,+BAA+B;QAC1C,eAAe,EAAE;YACf,iBAAiB,EAAE;gBACjB,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,mBAAmB;gBACnC,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,SAAS,EAAE;gBACT,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,WAAW;gBAC3B,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;iBACjB;aACF;YACD,gBAAgB,EAAE;gBAChB,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,kBAAkB;gBAClC,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,UAAU,EAAE;gBACV,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,aAAa,EAAE;gBACb,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,eAAe;gBAC/B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,cAAc,EAAE;gBACd,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,gBAAgB;gBAChC,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,gBAAgB;iBAC5B;aACF;YACD,OAAO,EAAE;gBACP,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,SAAS;gBACzB,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,aAAa;iBACzB;aACF;YACD,QAAQ,EAAE;gBACR,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,UAAU;gBAC1B,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,aAAa;iBACzB;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,mBAAmB,GAAG;IACjC,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,qBAAqB;IACrC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,qBAAqB;QAChC,eAAe,EAAE;YACf,EAAE,EAAE;gBACF,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,IAAI;gBACpB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,WAAW,EAAE;gBACX,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,aAAa;gBAC7B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,UAAU,EAAE;gBACV,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,YAAY;gBAC5B,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,+BAA+B;iBAC3C;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,0CAA0C,GAAG;IACxD,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,4CAA4C;IAC5D,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,4CAA4C;QACvD,eAAe,EAAE;YACf,SAAS,EAAE;gBACT,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,WAAW;gBAC3B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,QAAQ,EAAE;gBACR,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,UAAU;gBAC1B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,QAAQ,EAAE;gBACR,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,UAAU;gBAC1B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,SAAS,EAAE;gBACT,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,WAAW;gBAC3B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,WAAW,EAAE;gBACX,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,aAAa;gBAC7B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,WAAW,GAAG;IACzB,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,aAAa;IAC7B,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,aAAa;QACxB,eAAe,EAAE;YACf,EAAE,EAAE;gBACF,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,IAAI;gBACpB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,yBAAyB,GAAG;IACvC,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,2BAA2B;IAC3C,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,2BAA2B;QACtC,eAAe,EAAE;YACf,QAAQ,EAAE;gBACR,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,UAAU;gBAC1B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,KAAK,EAAE;gBACL,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,OAAO;gBACvB,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,oCAAoC;iBAChD;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,4CAA4C,GAAG;IAC1D,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,4BAA4B;IAC5C,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,8CAA8C;QACzD,eAAe,EAAE;YACf,MAAM,EAAE;gBACN,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,SAAS;gBACzB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,GAAG,EAAE;gBACH,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,2BAA2B,GAAG;IACzC,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,aAAa;IAC7B,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,6BAA6B;QACxC,eAAe,EAAE;YACf,GAAG,EAAE;gBACH,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,MAAM,EAAE;gBACN,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,SAAS;gBACzB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,0BAA0B,GAAG;IACxC,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,YAAY;IAC5B,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,4BAA4B;QACvC,eAAe,EAAE;YACf,MAAM,EAAE;gBACN,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,SAAS;gBACzB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,0CAA0C,GAAG;IACxD,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,4BAA4B;IAC5C,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,4CAA4C;QACvD,eAAe,EAAE;YACf,MAAM,EAAE;gBACN,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,SAAS;gBACzB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,MAAM,EAAE;gBACN,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,SAAS;gBACzB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,GAAG,EAAE;gBACH,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,2BAA2B,GAAG;IACzC,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,aAAa;IAC7B,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,6BAA6B;QACxC,eAAe,EAAE;YACf,MAAM,EAAE;gBACN,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,SAAS;gBACzB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,MAAM,EAAE;gBACN,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,SAAS;gBACzB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,GAAG,EAAE;gBACH,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,gCAAgC,GAAG;IAC9C,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,aAAa;IAC7B,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,kCAAkC;QAC7C,eAAe,EAAE;YACf,MAAM,EAAE;gBACN,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,SAAS;gBACzB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,GAAG,EAAE;gBACH,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,sCAAsC,GAAG;IACpD,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,aAAa;IAC7B,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,wCAAwC;QACnD,eAAe,EAAE;YACf,GAAG,EAAE;gBACH,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,oBAAoB,GAAG;IAClC,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,sBAAsB;IACtC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,sBAAsB;QACjC,eAAe,EAAE;YACf,KAAK,EAAE;gBACL,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,EAAE;gBAClB,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACL,QAAQ,EAAE,KAAK;wBACf,cAAc,EAAE,+BAA+B;wBAC/C,IAAI,EAAE;4BACJ,IAAI,EAAE,WAAW;4BACjB,SAAS,EAAE,oBAAoB;yBAChC;qBACJ;iBACF;aACF;YACD,QAAQ,EAAE;gBACR,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,UAAU;gBAC1B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,kBAAkB,GAAG;IAChC,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,oBAAoB;IACpC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,oBAAoB;QAC/B,eAAe,EAAE;YACf,KAAK,EAAE;gBACL,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,EAAE;gBAClB,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACL,QAAQ,EAAE,KAAK;wBACf,cAAc,EAAE,qBAAqB;wBACrC,IAAI,EAAE;4BACJ,IAAI,EAAE,WAAW;4BACjB,SAAS,EAAE,UAAU;yBACtB;qBACJ;iBACF;aACF;YACD,QAAQ,EAAE;gBACR,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,UAAU;gBAC1B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,kBAAkB,GAAG;IAChC,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,oBAAoB;IACpC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,oBAAoB;QAC/B,eAAe,EAAE;YACf,KAAK,EAAE;gBACL,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,EAAE;gBAClB,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACL,QAAQ,EAAE,KAAK;wBACf,cAAc,EAAE,4BAA4B;wBAC5C,IAAI,EAAE;4BACJ,IAAI,EAAE,WAAW;4BACjB,SAAS,EAAE,iBAAiB;yBAC7B;qBACJ;iBACF;aACF;YACD,QAAQ,EAAE;gBACR,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,UAAU;gBAC1B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,uBAAuB,GAAG;IACrC,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,yBAAyB;IACzC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,yBAAyB;QACpC,eAAe,EAAE;YACf,KAAK,EAAE;gBACL,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,EAAE;gBAClB,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACL,QAAQ,EAAE,KAAK;wBACf,cAAc,EAAE,0BAA0B;wBAC1C,IAAI,EAAE;4BACJ,IAAI,EAAE,WAAW;4BACjB,SAAS,EAAE,eAAe;yBAC3B;qBACJ;iBACF;aACF;YACD,QAAQ,EAAE;gBACR,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,UAAU;gBAC1B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,cAAc,GAAG;IAC5B,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,gBAAgB;IAChC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,gBAAgB;QAC3B,eAAe,EAAE;YACf,KAAK,EAAE;gBACL,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,EAAE;gBAClB,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACL,QAAQ,EAAE,KAAK;wBACf,cAAc,EAAE,uBAAuB;wBACvC,IAAI,EAAE;4BACJ,IAAI,EAAE,WAAW;4BACjB,SAAS,EAAE,YAAY;yBACxB;qBACJ;iBACF;aACF;YACD,QAAQ,EAAE;gBACR,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,UAAU;gBAC1B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,8BAA8B,GAAG;IAC5C,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,gCAAgC;IAChD,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,gCAAgC;QAC3C,eAAe,EAAE;YACf,KAAK,EAAE;gBACL,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,EAAE;gBAClB,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACL,QAAQ,EAAE,KAAK;wBACf,cAAc,EAAE,gCAAgC;wBAChD,IAAI,EAAE;4BACJ,IAAI,EAAE,WAAW;4BACjB,SAAS,EAAE,qBAAqB;yBACjC;qBACJ;iBACF;aACF;YACD,QAAQ,EAAE;gBACR,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,UAAU;gBAC1B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;;;;;;;ACh7DF,6B;;;;;;;;;;;;;;;;;ACAA;AAAA;AAAA;;;;GAIG;AAEoE;AAEhE,IAAM,UAAU,GAAG,kEAAgB,CAAC;AACpC,IAAM,YAAY,GAAG,oEAAkB,CAAC;AAExC,IAAM,QAAQ,GAAG;IACtB,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,UAAU;IAC1B,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,UAAU;QACrB,eAAe,EAAE;YACf,EAAE,EAAE;gBACF,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,IAAI;gBACpB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,cAAc,EAAE;gBACd,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,gBAAgB;gBAChC,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,IAAI,EAAE;gBACJ,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,MAAM;gBACtB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,WAAW,EAAE;gBACX,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,aAAa;gBAC7B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,QAAQ,EAAE;gBACR,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,UAAU;gBAC1B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,SAAS,EAAE;gBACT,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,WAAW;gBAC3B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,oBAAoB,GAAG;IAClC,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,sBAAsB;IACtC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,sBAAsB;QACjC,eAAe,EAAE;YACf,mBAAmB,EAAE;gBACnB,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,qBAAqB;gBACrC,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,OAAO,EAAE;gBACP,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,SAAS;gBACzB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,aAAa,EAAE;gBACb,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,eAAe;gBAC/B,IAAI,EAAE;oBACJ,IAAI,EAAE,MAAM;oBACZ,aAAa,EAAE,CAAE,IAAI,EAAE,KAAK,EAAE,kBAAkB,CAAE;iBACnD;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,YAAY,GAAG;IAC1B,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,cAAc;IAC9B,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,cAAc;QACzB,eAAe,EAAE;YACf,EAAE,EAAE;gBACF,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,IAAI;gBACpB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,cAAc,EAAE;gBACd,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,gBAAgB;gBAChC,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,WAAW,EAAE;gBACX,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,aAAa;gBAC7B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,KAAK,EAAE;gBACL,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,OAAO;gBACvB,IAAI,EAAE;oBACJ,IAAI,EAAE,MAAM;oBACZ,aAAa,EAAE,CAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,UAAU,EAAE,SAAS,CAAE;iBACzE;aACF;YACD,oBAAoB,EAAE;gBACpB,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,sBAAsB;gBACtC,IAAI,EAAE;oBACJ,IAAI,EAAE,WAAW;oBACjB,SAAS,EAAE,sBAAsB;iBAClC;aACF;YACD,mBAAmB,EAAE;gBACnB,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,qBAAqB;gBACrC,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,mBAAmB,GAAG;IACjC,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,qBAAqB;IACrC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,qBAAqB;QAChC,eAAe,EAAE;YACf,EAAE,EAAE;gBACF,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,IAAI;gBACpB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;YACD,QAAQ,EAAE;gBACR,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,UAAU;gBAC1B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,kBAAkB,GAAG;IAChC,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,oBAAoB;IACpC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,oBAAoB;QAC/B,eAAe,EAAE;YACf,KAAK,EAAE;gBACL,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,EAAE;gBAClB,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACL,QAAQ,EAAE,KAAK;wBACf,cAAc,EAAE,qBAAqB;wBACrC,IAAI,EAAE;4BACJ,IAAI,EAAE,WAAW;4BACjB,SAAS,EAAE,UAAU;yBACtB;qBACJ;iBACF;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,sBAAsB,GAAG;IACpC,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,wBAAwB;IACxC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,wBAAwB;QACnC,eAAe,EAAE;YACf,KAAK,EAAE;gBACL,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,EAAE;gBAClB,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACL,QAAQ,EAAE,KAAK;wBACf,cAAc,EAAE,yBAAyB;wBACzC,IAAI,EAAE;4BACJ,IAAI,EAAE,WAAW;4BACjB,SAAS,EAAE,cAAc;yBAC1B;qBACJ;iBACF;aACF;YACD,QAAQ,EAAE;gBACR,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,UAAU;gBAC1B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;AAEK,IAAM,gBAAgB,GAAG;IAC9B,QAAQ,EAAE,KAAK;IACf,cAAc,EAAE,kBAAkB;IAClC,IAAI,EAAE;QACJ,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,kBAAkB;QAC7B,eAAe,EAAE;YACf,KAAK,EAAE;gBACL,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,EAAE;gBAClB,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACL,QAAQ,EAAE,KAAK;wBACf,cAAc,EAAE,gCAAgC;wBAChD,IAAI,EAAE;4BACJ,IAAI,EAAE,WAAW;4BACjB,SAAS,EAAE,qBAAqB;yBACjC;qBACJ;iBACF;aACF;YACD,QAAQ,EAAE;gBACR,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,UAAU;gBAC1B,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;CACF,CAAC;;;;;;;;AC1RF,EAAE;AACF,kEAAkE;AAClE,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,+CAA+C;AAC/C,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,EAAE;AACF,sEAAsE;AACtE,iCAAiC;AACjC,EAAE;AACW;AAEb,yEAAyE;AACzE,8DAA8D;AAC9D,OAAO,CAAC,kBAAkB,GAAG,mBAAO,CAAC,CAAmC,CAAC,CAAC;AAC1E,OAAO,CAAC,wBAAwB,GAAG,mBAAO,CAAC,EAAqC,CAAC,CAAC;AAClF,2DAA2D;AAC3D,yEAAyE;AACzE,mFAAmF;AACnF,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;;;;;;;;;;;;;;;;;;ACxBzB;AAAA;;;;GAIG;;;;;;;;;;;AAEgC;AACS;AACP;AACW;AACL;AAE3C,IAAM,WAAW,GAAG,EAAE,CAAC;AACvB,IAAM,cAAc,GAAG,EAAE,CAAC;AAE1B;IAAiC,sCAA8B;IAkB7D;;;;;;;;;;;;;;;;;;;;;;;;OAwBG;IACH,4BAAY,WAA4C,EAAE,OAAgB,EAAE,OAA+C;QAA3H,iBAgCC;QA/BC,EAAE,CAAC,CAAC,WAAW,KAAK,IAAI,IAAI,WAAW,KAAK,SAAS,CAAC,CAAC,CAAC;YACtD,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;QACrD,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC;YAAC,OAAO,GAAG,EAAE,CAAC;QAE3B,0BAAM,WAAW,EAAE,OAAO,CAAC,SAAC;QAE5B,KAAI,CAAC,UAAU,GAAG,YAAY,CAAC;QAC/B,KAAI,CAAC,cAAc,GAAG,OAAO,CAAC;QAC9B,KAAI,CAAC,gCAAgC,GAAG,EAAE,CAAC;QAC3C,KAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC;QACpC,KAAI,CAAC,OAAO,GAAG,OAAiB,CAAC;QACjC,EAAE,CAAC,CAAC,CAAC,KAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YAClB,KAAI,CAAC,OAAO,GAAG,8BAA8B,CAAC;QAChD,CAAC;QACD,KAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAE/B,KAAI,CAAC,gBAAgB,CAAI,WAAW,SAAI,cAAgB,CAAC,CAAC;QAC1D,EAAE,EAAC,OAAO,CAAC,cAAc,KAAK,IAAI,IAAI,OAAO,CAAC,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;YAC3E,KAAI,CAAC,cAAc,GAAG,OAAO,CAAC,cAAc,CAAC;QAC/C,CAAC;QACD,EAAE,EAAC,OAAO,CAAC,gCAAgC,KAAK,IAAI,IAAI,OAAO,CAAC,gCAAgC,KAAK,SAAS,CAAC,CAAC,CAAC;YAC/G,KAAI,CAAC,gCAAgC,GAAG,OAAO,CAAC,gCAAgC,CAAC;QACnF,CAAC;QACD,EAAE,EAAC,OAAO,CAAC,uBAAuB,KAAK,IAAI,IAAI,OAAO,CAAC,uBAAuB,KAAK,SAAS,CAAC,CAAC,CAAC;YAC7F,KAAI,CAAC,uBAAuB,GAAG,OAAO,CAAC,uBAAuB,CAAC;QACjE,CAAC;QACD,KAAI,CAAC,aAAa,GAAG,IAAI,kEAAwB,CAAC,KAAI,CAAC,CAAC;QACxD,KAAI,CAAC,OAAO,GAAG,IAAI,4DAAkB,CAAC,KAAI,CAAC,CAAC;QAC5C,KAAI,CAAC,UAAU,GAAG,IAAI,sDAAiB,CAAC,6CAAO,CAAC,CAAC;;IACnD,CAAC;IACH,yBAAC;AAAD,CAAC,CA5EgC,oEAA8B,GA4E9D;AAE2F;;;;;;;;;;AC7F5F;AAAA;;;;GAIG;AAoKH;;;;;;GAMG;AACH,IAAY,iBAMX;AAND,WAAY,iBAAiB;IAC3B,wCAAmB;IACnB,sCAAiB;IACjB,wCAAmB;IACnB,0CAAqB;IACrB,wCAAmB;AACrB,CAAC,EANW,iBAAiB,KAAjB,iBAAiB,QAM5B;AAED;;;;;GAKG;AACH,IAAY,aAIX;AAJD,WAAY,aAAa;IACvB,0BAAS;IACT,4BAAW;IACX,sDAAqC;AACvC,CAAC,EAJW,aAAa,KAAb,aAAa,QAIxB;;;;;;;;;;;ACjMD;AAAA;;;;GAIG;AAE6C;AACZ;AAEF;;;;;;;;;;;ACTlC;AAAA;;;;GAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEkC;AAEQ;AAG7C,IAAM,WAAW,GAAG,uDAAkB,CAAC;AAEvC,0CAA0C;AAC1C;IAEE;;;OAGG;IACH,uBAAY,MAA0B;QACpC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED;;;;;;;;;;;;;;;;OAgBG;IACG,8DAAsC,GAA5C,UAA6C,cAAsB,EAAE,OAAmC;;;;;;wBAClG,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACzB,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,IAAI,OAAO,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAC5G,MAAM,IAAI,KAAK,CAAC,2EAA2E,CAAC,CAAC;4BAC/F,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACpI,MAAM,IAAI,KAAK,CAAC,mFAAmF,CAAC,CAAC;4BACvG,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;wBAC9B,UAAU,GAAG,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,0CAA0C,CAAC;wBAC3G,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,cAAc,CAAC,CAAC,CAAC;wBACpF,gBAAgB,GAAe,EAAE,CAAC;wBACtC,gBAAgB,CAAC,IAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;wBACnF,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAChC,UAAU,IAAI,GAAG,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACjD,CAAC;wBAGG,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,KAAK,CAAC;wBAC3B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;;;;wBAIgB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBACD,uBAAuB;wBACvB,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;4BACvE,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;oCACxD,YAAY,GAAG,mEAA0B,CAAC;oCAC9C,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;gCACnH,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACX,oBAAoB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;gCAC1I,oBAAoB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;gCAChE,oBAAoB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;gCAC/D,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAC;4BAC9C,CAAC;wBACH,CAAC;;;;wBAGD,sBAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAED;;;;;;;;;;;;OAYG;IACG,oDAA4B,GAAlC,UAAmC,cAAsB,EAAE,OAAmC;;;;;;wBACxF,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACzB,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,IAAI,OAAO,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAC5G,MAAM,IAAI,KAAK,CAAC,2EAA2E,CAAC,CAAC;4BAC/F,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACpI,MAAM,IAAI,KAAK,CAAC,mFAAmF,CAAC,CAAC;4BACvG,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;wBAC9B,UAAU,GAAG,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,gCAAgC,CAAC;wBACjG,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,cAAc,CAAC,CAAC,CAAC;wBACpF,gBAAgB,GAAe,EAAE,CAAC;wBACtC,gBAAgB,CAAC,IAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;wBACnF,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAChC,UAAU,IAAI,GAAG,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACjD,CAAC;wBAGG,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,KAAK,CAAC;wBAC3B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;;;;wBAIgB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBACD,uBAAuB;wBACvB,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;4BACvE,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;oCACxD,YAAY,GAAG,6DAAoB,CAAC;oCACxC,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;gCACnH,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACX,oBAAoB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;gCAC1I,oBAAoB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;gCAChE,oBAAoB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;gCAC/D,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAC;4BAC9C,CAAC;wBACH,CAAC;;;;wBAGD,sBAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAED;;;;;;;;;;OAUG;IACG,qDAA6B,GAAnC,UAAoC,OAAmC;;;;;;wBACjE,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACzB,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACpI,MAAM,IAAI,KAAK,CAAC,mFAAmF,CAAC,CAAC;4BACvG,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;wBAC9B,UAAU,GAAG,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,eAAe,CAAC;wBAC5E,gBAAgB,GAAe,EAAE,CAAC;wBACtC,gBAAgB,CAAC,IAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;wBACnF,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAChC,UAAU,IAAI,GAAG,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACjD,CAAC;wBAGG,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,KAAK,CAAC;wBAC3B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;;;;wBAIgB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBACD,uBAAuB;wBACvB,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;4BACvE,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;oCACxD,YAAY,GAAG,uEAA8B,CAAC;oCAClD,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;gCACnH,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACX,oBAAoB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;gCAC1I,oBAAoB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;gCAChE,oBAAoB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;gCAC/D,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAC;4BAC9C,CAAC;wBACH,CAAC;;;;wBAGD,sBAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAED;;;;;;;;;;;;;OAaG;IACG,yDAAiC,GAAvC,UAAwC,YAAoB,EAAE,OAAmC;;;;;;wBAC3F,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACzB,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,YAAY,KAAK,IAAI,IAAI,YAAY,KAAK,SAAS,IAAI,OAAO,YAAY,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACtG,MAAM,IAAI,KAAK,CAAC,yEAAyE,CAAC,CAAC;4BAC7F,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,UAAU,GAAG,YAAY,CAAC;wBAC9B,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;wBAGxD,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,KAAK,CAAC;wBAC3B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;;;;wBAIgB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBACD,uBAAuB;wBACvB,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;4BACvE,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;oCACxD,YAAY,GAAG,uEAA8B,CAAC;oCAClD,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;gCACnH,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACX,oBAAoB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;gCAC1I,oBAAoB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;gCAChE,oBAAoB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;gCAC/D,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAC;4BAC9C,CAAC;wBACH,CAAC;;;;wBAGD,sBAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IA+BD,qCAAa,GAAb,UAAc,cAAsB,EAAE,OAAmC,EAAE,QAA4D;QACrI,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAA6D,CAAC;QACvE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,sCAAsC,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBAC1H,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAuC,CAAC,CAAC;YAC/E,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,sCAAsC,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBAC5I,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAuC,CAAC;gBAC1D,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IA0BD,2BAAG,GAAH,UAAI,cAAsB,EAAE,OAAmC,EAAE,QAAsD;QACrH,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAAuD,CAAC;QACjE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,4BAA4B,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBAChH,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAiC,CAAC,CAAC;YACzE,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,4BAA4B,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBAClI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAiC,CAAC;gBACpD,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAyBD,4BAAI,GAAJ,UAAK,OAAmC,EAAE,QAAgE;QACxG,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAAiE,CAAC;QAC3E,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,6BAA6B,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBACjG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAA2C,CAAC,CAAC;YACnF,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,6BAA6B,CAAC,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBACnH,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAA2C,CAAC;gBAC9D,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IA4BD,gCAAQ,GAAR,UAAS,YAAoB,EAAE,OAAmC,EAAE,QAAgE;QAClI,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAAiE,CAAC;QAC3E,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,iCAAiC,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBACnH,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAA2C,CAAC,CAAC;YACnF,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,iCAAiC,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBACrI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAA2C,CAAC;gBAC9D,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAEH,oBAAC;AAAD,CAAC;;;;;;;;;;;;AChpBD;AAAA;;;;GAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEkC;AAEQ;AAG7C,IAAM,WAAW,GAAG,uDAAkB,CAAC;AAEvC,oCAAoC;AACpC;IAEE;;;OAGG;IACH,iBAAY,MAA0B;QACpC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED;;;;;;;;;;OAUG;IACG,+CAA6B,GAAnC,UAAoC,OAAmC;;;;;;wBACjE,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACzB,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACpI,MAAM,IAAI,KAAK,CAAC,mFAAmF,CAAC,CAAC;4BACvG,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;wBAC9B,UAAU,GAAG,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC;wBACtE,gBAAgB,GAAe,EAAE,CAAC;wBACtC,gBAAgB,CAAC,IAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;wBACnF,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAChC,UAAU,IAAI,GAAG,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACjD,CAAC;wBAGG,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,KAAK,CAAC;wBAC3B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;;;;wBAIgB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBACD,uBAAuB;wBACvB,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;4BACvE,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;oCACxD,YAAY,GAAG,iEAAwB,CAAC;oCAC5C,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;gCACnH,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACX,oBAAoB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;gCAC1I,oBAAoB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;gCAChE,oBAAoB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;gCAC/D,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAC;4BAC9C,CAAC;wBACH,CAAC;;;;wBAGD,sBAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAED;;;;;;;;;;;;;OAaG;IACG,mDAAiC,GAAvC,UAAwC,YAAoB,EAAE,OAAmC;;;;;;wBAC3F,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACzB,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,YAAY,KAAK,IAAI,IAAI,YAAY,KAAK,SAAS,IAAI,OAAO,YAAY,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACtG,MAAM,IAAI,KAAK,CAAC,yEAAyE,CAAC,CAAC;4BAC7F,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,UAAU,GAAG,YAAY,CAAC;wBAC9B,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;wBAGxD,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,KAAK,CAAC;wBAC3B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;;;;wBAIgB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBACD,uBAAuB;wBACvB,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;4BACvE,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;oCACxD,YAAY,GAAG,iEAAwB,CAAC;oCAC5C,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;gCACnH,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACX,oBAAoB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;gCAC1I,oBAAoB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;gCAChE,oBAAoB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;gCAC/D,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAC;4BAC9C,CAAC;wBACH,CAAC;;;;wBAGD,sBAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAyBD,sBAAI,GAAJ,UAAK,OAAmC,EAAE,QAA0D;QAClG,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAA2D,CAAC;QACrE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,6BAA6B,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBACjG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAqC,CAAC,CAAC;YAC7E,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,6BAA6B,CAAC,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBACnH,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAqC,CAAC;gBACxD,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IA4BD,0BAAQ,GAAR,UAAS,YAAoB,EAAE,OAAmC,EAAE,QAA0D;QAC5H,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAA2D,CAAC;QACrE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,iCAAiC,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBACnH,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAqC,CAAC,CAAC;YAC7E,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,iCAAiC,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBACrI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAqC,CAAC;gBACxD,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAEH,cAAC;AAAD,CAAC;;;;;;;;;;;;;;;;;;;ACzUD;AAAA;;;;GAIG;;;;;;;;;;;AAEgC;AACS;AACP;AACW;AACL;AAE3C,IAAM,WAAW,GAAG,EAAE,CAAC;AACvB,IAAM,cAAc,GAAG,EAAE,CAAC;AAE1B;IAAuC,4CAA8B;IAwBnE;;;;;;;;;;;;;;;;;;;;;;;;;;OA0BG;IACH,kCAAY,WAA4C,EAAE,cAAsB,EAAE,OAAgB,EAAE,OAA+C;QAAnJ,iBA0CC;QAzCC,OAAO,CAAC,GAAG,CAAC,wCAAM,CAAC,CAAC;QACpB,OAAO,CAAC,GAAG,CAAC,8CAAW,CAAC,CAAC;QACzB,EAAE,CAAC,CAAC,WAAW,KAAK,IAAI,IAAI,WAAW,KAAK,SAAS,CAAC,CAAC,CAAC;YACtD,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;QACrD,CAAC;QACD,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;YAC5D,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;QACxD,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC;YAAC,OAAO,GAAG,EAAE,CAAC;QAE3B,0BAAM,WAAW,EAAE,OAAO,CAAC,SAAC;QAE5B,KAAI,CAAC,UAAU,GAAG,YAAY,CAAC;QAC/B,KAAI,CAAC,cAAc,GAAG,OAAO,CAAC;QAC9B,KAAI,CAAC,gCAAgC,GAAG,EAAE,CAAC;QAC3C,KAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC;QACpC,KAAI,CAAC,OAAO,GAAG,OAAiB,CAAC;QACjC,EAAE,CAAC,CAAC,CAAC,KAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YAClB,KAAI,CAAC,OAAO,GAAG,8BAA8B,CAAC;QAChD,CAAC;QACD,KAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,KAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QAErC,KAAI,CAAC,gBAAgB,CAAI,WAAW,SAAI,cAAgB,CAAC,CAAC;QAC1D,EAAE,EAAC,OAAO,CAAC,cAAc,KAAK,IAAI,IAAI,OAAO,CAAC,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;YAC3E,KAAI,CAAC,cAAc,GAAG,OAAO,CAAC,cAAc,CAAC;QAC/C,CAAC;QACD,EAAE,EAAC,OAAO,CAAC,gCAAgC,KAAK,IAAI,IAAI,OAAO,CAAC,gCAAgC,KAAK,SAAS,CAAC,CAAC,CAAC;YAC/G,KAAI,CAAC,gCAAgC,GAAG,OAAO,CAAC,gCAAgC,CAAC;QACnF,CAAC;QACD,EAAE,EAAC,OAAO,CAAC,uBAAuB,KAAK,IAAI,IAAI,OAAO,CAAC,uBAAuB,KAAK,SAAS,CAAC,CAAC,CAAC;YAC7F,KAAI,CAAC,uBAAuB,GAAG,OAAO,CAAC,uBAAuB,CAAC;QACjE,CAAC;QACD,KAAI,CAAC,WAAW,GAAG,IAAI,gEAAsB,CAAC,KAAI,CAAC,CAAC;QACpD,KAAI,CAAC,SAAS,GAAG,IAAI,8DAAoB,CAAC,KAAI,CAAC,CAAC;QAChD,KAAI,CAAC,SAAS,GAAG,IAAI,8DAAoB,CAAC,KAAI,CAAC,CAAC;QAChD,KAAI,CAAC,cAAc,GAAG,IAAI,mEAAyB,CAAC,KAAI,CAAC,CAAC;QAC1D,KAAI,CAAC,IAAI,GAAG,IAAI,yDAAe,CAAC,KAAI,CAAC,CAAC;QACtC,KAAI,CAAC,oBAAoB,GAAG,IAAI,yEAA+B,CAAC,KAAI,CAAC,CAAC;QACtE,KAAI,CAAC,UAAU,GAAG,IAAI,sDAAiB,CAAC,6CAAO,CAAC,CAAC;;IACnD,CAAC;IACH,+BAAC;AAAD,CAAC,CA9FsC,oEAA8B,GA8FpE;AAE6G;;;;;;;;;;AC/G9G;AAAA;;;;GAIG;AAmpCH;;;;;GAKG;AACH,IAAY,cAGX;AAHD,WAAY,cAAc;IACxB,6CAA2B;IAC3B,uCAAqB;AACvB,CAAC,EAHW,cAAc,KAAd,cAAc,QAGzB;AAED;;;;;GAKG;AACH,IAAY,oBAEX;AAFD,WAAY,oBAAoB;IAC9B,yDAAiC;AACnC,CAAC,EAFW,oBAAoB,KAApB,oBAAoB,QAE/B;;;;;;;;;;;;;;;;;;;AC1qCD;AAAA;;;;GAIG;AAEyC;AACJ;AACA;AACU;AACpB;AACgC;AAE2B;;;;;;;;;;;ACbzF;AAAA;;;;GAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEkC;AAEQ;AAG7C,IAAM,WAAW,GAAG,uDAAkB,CAAC;AAEvC,wCAAwC;AACxC;IAEE;;;OAGG;IACH,qBAAY,MAAgC;QAC1C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAGD;;;;;;;;;;;;;;;;;;;;;;;;;;OA0BG;IACG,2DAAqC,GAA3C,UAA4C,iBAAyB,EAAE,cAAsB,EAAE,OAAmC;;;;;;wBAC5H,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;;;;wBAIP,qBAAM,IAAI,CAAC,0CAA0C,CAAC,iBAAiB,EAAE,cAAc,EAAE,OAAO,CAAC;;wBAAjH,aAAa,GAAG,SAAiG,CAAC;;;;wBAElH,sBAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;;;wBAIZ,qBAAM,MAAM,CAAC,6BAA6B,CAAC,aAAa,EAAE,OAAO,CAAC;;wBAAjF,YAAY,GAAG,SAAkE,CAAC;;;;wBAIlF,sBAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;4BAE7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAED;;;;;;;;;;;;;;;OAeG;IACG,6DAAuC,GAA7C,UAA8C,iBAAyB,EAAE,cAAsB,EAAE,OAAmC;;;;;;wBAC9H,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACzB,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,iBAAiB,KAAK,IAAI,IAAI,iBAAiB,KAAK,SAAS,IAAI,OAAO,iBAAiB,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACrH,MAAM,IAAI,KAAK,CAAC,8EAA8E,CAAC,CAAC;4BAClG,CAAC;4BACD,EAAE,CAAC,CAAC,iBAAiB,KAAK,IAAI,IAAI,iBAAiB,KAAK,SAAS,CAAC,CAAC,CAAC;gCAClE,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,EAAE,CAAC,CAClC,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,qEAAqE,CAAC,CAAC;gCACzF,CAAC;gCACD,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC,CACjC,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,oEAAoE,CAAC,CAAC;gCACxF,CAAC;gCACD,EAAE,CAAC,CAAC,iBAAiB,CAAC,KAAK,CAAC,iBAAiB,CAAC,KAAK,IAAI,CAAC,CACxD,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,kFAAkF,CAAC,CAAC;gCACtG,CAAC;4BACH,CAAC;4BACD,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,IAAI,OAAO,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAC5G,MAAM,IAAI,KAAK,CAAC,2EAA2E,CAAC,CAAC;4BAC/F,CAAC;4BACD,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;gCAC5D,EAAE,CAAC,CAAC,cAAc,CAAC,MAAM,GAAG,EAAE,CAAC,CAC/B,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,kEAAkE,CAAC,CAAC;gCACtF,CAAC;gCACD,EAAE,CAAC,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC,CAC9B,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,iEAAiE,CAAC,CAAC;gCACrF,CAAC;gCACD,EAAE,CAAC,CAAC,cAAc,CAAC,KAAK,CAAC,iBAAiB,CAAC,KAAK,IAAI,CAAC,CACrD,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,+EAA+E,CAAC,CAAC;gCACnG,CAAC;4BACH,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACpI,MAAM,IAAI,KAAK,CAAC,mFAAmF,CAAC,CAAC;4BACvG,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,uFAAuF,CAAC,CAAC;4BAC3G,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;wBAC9B,UAAU,GAAG,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,8HAA8H,CAAC;wBAC/L,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,qBAAqB,EAAE,kBAAkB,CAAC,iBAAiB,CAAC,CAAC,CAAC;wBAC9F,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,cAAc,CAAC,CAAC,CAAC;wBACxF,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;wBAChG,gBAAgB,GAAe,EAAE,CAAC;wBACtC,gBAAgB,CAAC,IAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;wBACnF,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAChC,UAAU,IAAI,GAAG,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACjD,CAAC;wBAGG,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,MAAM,CAAC;wBAC5B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;;;;wBAIgB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,IAAI,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACzC,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBACD,YAAY,CAAC,UAAU,GAAG,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC;;;;wBAG/C,sBAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAGD;;;;;;;;;;;;;;;;;;;;;;OAsBG;IACG,6DAAuC,GAA7C,UAA8C,iBAAyB,EAAE,cAAsB,EAAE,UAA6B,EAAE,OAAmC;;;;;;wBAC7J,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;;;;wBAIP,qBAAM,IAAI,CAAC,4CAA4C,CAAC,iBAAiB,EAAE,cAAc,EAAE,UAAU,EAAE,OAAO,CAAC;;wBAA/H,aAAa,GAAG,SAA+G,CAAC;;;;wBAEhI,sBAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;;;wBAIZ,qBAAM,MAAM,CAAC,6BAA6B,CAAC,aAAa,EAAE,OAAO,CAAC;;wBAAjF,YAAY,GAAG,SAAkE,CAAC;wBAC9E,WAAW,GAAG,YAAY,CAAC,OAAO,CAAC;wBACnC,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBAGjC,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;wBACvE,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;gCACxD,YAAY,GAAG,mEAA0B,CAAC;gCAC9C,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;4BACnH,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACX,oBAAoB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;4BAC1I,oBAAoB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BAChE,oBAAoB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC/D,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAC;wBAC9C,CAAC;;;;wBAED,sBAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;4BAE7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAED;;;;;;;;;;;;;;;OAeG;IACG,kDAA4B,GAAlC,UAAmC,iBAAyB,EAAE,cAAsB,EAAE,OAAmC;;;;;;wBACnH,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACzB,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,iBAAiB,KAAK,IAAI,IAAI,iBAAiB,KAAK,SAAS,IAAI,OAAO,iBAAiB,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACrH,MAAM,IAAI,KAAK,CAAC,8EAA8E,CAAC,CAAC;4BAClG,CAAC;4BACD,EAAE,CAAC,CAAC,iBAAiB,KAAK,IAAI,IAAI,iBAAiB,KAAK,SAAS,CAAC,CAAC,CAAC;gCAClE,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,EAAE,CAAC,CAClC,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,qEAAqE,CAAC,CAAC;gCACzF,CAAC;gCACD,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC,CACjC,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,oEAAoE,CAAC,CAAC;gCACxF,CAAC;gCACD,EAAE,CAAC,CAAC,iBAAiB,CAAC,KAAK,CAAC,iBAAiB,CAAC,KAAK,IAAI,CAAC,CACxD,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,kFAAkF,CAAC,CAAC;gCACtG,CAAC;4BACH,CAAC;4BACD,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,IAAI,OAAO,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAC5G,MAAM,IAAI,KAAK,CAAC,2EAA2E,CAAC,CAAC;4BAC/F,CAAC;4BACD,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;gCAC5D,EAAE,CAAC,CAAC,cAAc,CAAC,MAAM,GAAG,EAAE,CAAC,CAC/B,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,kEAAkE,CAAC,CAAC;gCACtF,CAAC;gCACD,EAAE,CAAC,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC,CAC9B,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,iEAAiE,CAAC,CAAC;gCACrF,CAAC;gCACD,EAAE,CAAC,CAAC,cAAc,CAAC,KAAK,CAAC,iBAAiB,CAAC,KAAK,IAAI,CAAC,CACrD,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,+EAA+E,CAAC,CAAC;gCACnG,CAAC;4BACH,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACpI,MAAM,IAAI,KAAK,CAAC,mFAAmF,CAAC,CAAC;4BACvG,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,uFAAuF,CAAC,CAAC;4BAC3G,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;wBAC9B,UAAU,GAAG,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,8HAA8H,CAAC;wBAC/L,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,qBAAqB,EAAE,kBAAkB,CAAC,iBAAiB,CAAC,CAAC,CAAC;wBAC9F,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,cAAc,CAAC,CAAC,CAAC;wBACxF,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;wBAChG,gBAAgB,GAAe,EAAE,CAAC;wBACtC,gBAAgB,CAAC,IAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;wBACnF,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAChC,UAAU,IAAI,GAAG,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACjD,CAAC;wBAGG,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,KAAK,CAAC;wBAC3B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;;;;wBAIgB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBACD,uBAAuB;wBACvB,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;4BACvE,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;oCACxD,YAAY,GAAG,mEAA0B,CAAC;oCAC9C,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;gCACnH,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACX,oBAAoB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;gCAC1I,oBAAoB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;gCAChE,oBAAoB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;gCAC/D,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAC;4BAC9C,CAAC;wBACH,CAAC;;;;wBAGD,sBAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAED;;;;;;;;;;;;;;;;;;;;OAoBG;IACG,qDAA+B,GAArC,UAAsC,iBAAyB,EAAE,cAAsB,EAAE,OAAmC;;;;;;wBACtH,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACzB,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,iBAAiB,KAAK,IAAI,IAAI,iBAAiB,KAAK,SAAS,IAAI,OAAO,iBAAiB,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACrH,MAAM,IAAI,KAAK,CAAC,8EAA8E,CAAC,CAAC;4BAClG,CAAC;4BACD,EAAE,CAAC,CAAC,iBAAiB,KAAK,IAAI,IAAI,iBAAiB,KAAK,SAAS,CAAC,CAAC,CAAC;gCAClE,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,EAAE,CAAC,CAClC,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,qEAAqE,CAAC,CAAC;gCACzF,CAAC;gCACD,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC,CACjC,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,oEAAoE,CAAC,CAAC;gCACxF,CAAC;gCACD,EAAE,CAAC,CAAC,iBAAiB,CAAC,KAAK,CAAC,iBAAiB,CAAC,KAAK,IAAI,CAAC,CACxD,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,kFAAkF,CAAC,CAAC;gCACtG,CAAC;4BACH,CAAC;4BACD,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,IAAI,OAAO,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAC5G,MAAM,IAAI,KAAK,CAAC,2EAA2E,CAAC,CAAC;4BAC/F,CAAC;4BACD,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;gCAC5D,EAAE,CAAC,CAAC,cAAc,CAAC,MAAM,GAAG,EAAE,CAAC,CAC/B,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,kEAAkE,CAAC,CAAC;gCACtF,CAAC;gCACD,EAAE,CAAC,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC,CAC9B,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,iEAAiE,CAAC,CAAC;gCACrF,CAAC;gCACD,EAAE,CAAC,CAAC,cAAc,CAAC,KAAK,CAAC,iBAAiB,CAAC,KAAK,IAAI,CAAC,CACrD,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,+EAA+E,CAAC,CAAC;gCACnG,CAAC;4BACH,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACpI,MAAM,IAAI,KAAK,CAAC,mFAAmF,CAAC,CAAC;4BACvG,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,uFAAuF,CAAC,CAAC;4BAC3G,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;wBAC9B,UAAU,GAAG,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,qIAAqI,CAAC;wBACtM,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,qBAAqB,EAAE,kBAAkB,CAAC,iBAAiB,CAAC,CAAC,CAAC;wBAC9F,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,cAAc,CAAC,CAAC,CAAC;wBACxF,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;wBAChG,gBAAgB,GAAe,EAAE,CAAC;wBACtC,gBAAgB,CAAC,IAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;wBACnF,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAChC,UAAU,IAAI,GAAG,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACjD,CAAC;wBAGG,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,MAAM,CAAC;wBAC5B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;;;;wBAIgB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;;;;wBAGD,sBAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAED;;;;;;;;;;;;;;;;;;OAkBG;IACG,uDAAiC,GAAvC,UAAwC,iBAAyB,EAAE,cAAsB,EAAE,UAA6B,EAAE,OAAmC;;;;;;wBACvJ,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACzB,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,iBAAiB,KAAK,IAAI,IAAI,iBAAiB,KAAK,SAAS,IAAI,OAAO,iBAAiB,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACrH,MAAM,IAAI,KAAK,CAAC,8EAA8E,CAAC,CAAC;4BAClG,CAAC;4BACD,EAAE,CAAC,CAAC,iBAAiB,KAAK,IAAI,IAAI,iBAAiB,KAAK,SAAS,CAAC,CAAC,CAAC;gCAClE,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,EAAE,CAAC,CAClC,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,qEAAqE,CAAC,CAAC;gCACzF,CAAC;gCACD,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC,CACjC,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,oEAAoE,CAAC,CAAC;gCACxF,CAAC;gCACD,EAAE,CAAC,CAAC,iBAAiB,CAAC,KAAK,CAAC,iBAAiB,CAAC,KAAK,IAAI,CAAC,CACxD,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,kFAAkF,CAAC,CAAC;gCACtG,CAAC;4BACH,CAAC;4BACD,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,IAAI,OAAO,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAC5G,MAAM,IAAI,KAAK,CAAC,2EAA2E,CAAC,CAAC;4BAC/F,CAAC;4BACD,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;gCAC5D,EAAE,CAAC,CAAC,cAAc,CAAC,MAAM,GAAG,EAAE,CAAC,CAC/B,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,kEAAkE,CAAC,CAAC;gCACtF,CAAC;gCACD,EAAE,CAAC,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC,CAC9B,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,iEAAiE,CAAC,CAAC;gCACrF,CAAC;gCACD,EAAE,CAAC,CAAC,cAAc,CAAC,KAAK,CAAC,iBAAiB,CAAC,KAAK,IAAI,CAAC,CACrD,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,+EAA+E,CAAC,CAAC;gCACnG,CAAC;4BACH,CAAC;4BACD,EAAE,CAAC,CAAC,UAAU,KAAK,IAAI,IAAI,UAAU,KAAK,SAAS,CAAC,CAAC,CAAC;gCACpD,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;4BAC7D,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACpI,MAAM,IAAI,KAAK,CAAC,mFAAmF,CAAC,CAAC;4BACvG,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,uFAAuF,CAAC,CAAC;4BAC3G,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;wBAC9B,UAAU,GAAG,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,uIAAuI,CAAC;wBACxM,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,qBAAqB,EAAE,kBAAkB,CAAC,iBAAiB,CAAC,CAAC,CAAC;wBAC9F,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,cAAc,CAAC,CAAC,CAAC;wBACxF,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;wBAChG,gBAAgB,GAAe,EAAE,CAAC;wBACtC,gBAAgB,CAAC,IAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;wBACnF,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAChC,UAAU,IAAI,GAAG,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACjD,CAAC;wBAGG,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,MAAM,CAAC;wBAC5B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;wBAEG,cAAc,GAAG,IAAI,CAAC;wBACtB,YAAY,GAAG,IAAI,CAAC;wBACxB,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,UAAU,KAAK,IAAI,IAAI,UAAU,KAAK,SAAS,CAAC,CAAC,CAAC;gCAChD,kBAAkB,GAAG,2DAAkB,CAAC;gCAC5C,YAAY,GAAG,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,kBAAkB,EAAE,UAAU,EAAE,YAAY,CAAC,CAAC;gCACzF,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;4BAChD,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACX,kBAAkB,GAAG,IAAI,KAAK,CAAC,aAAU,KAAK,CAAC,OAAO,oCAAgC;iCACtF,eAAa,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC,MAAG,EAAC,CAAC;4BACzD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,kBAAkB,CAAC,EAAC;wBAC5C,CAAC;wBACD,WAAW,CAAC,IAAI,GAAG,cAAc,CAAC;;;;wBAIjB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,IAAI,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACzC,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBACD,uBAAuB;wBACvB,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;4BACvE,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;oCACxD,YAAY,GAAG,yEAAgC,CAAC;oCACpD,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;gCACnH,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACX,oBAAoB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;gCAC1I,oBAAoB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;gCAChE,oBAAoB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;gCAC/D,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAC;4BAC9C,CAAC;wBACH,CAAC;wBACD,uBAAuB;wBACvB,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;4BACvE,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;oCACxD,YAAY,GAAG,yEAAgC,CAAC;oCACpD,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;gCACnH,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACX,qBAAqB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;gCAC3I,qBAAqB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;gCACjE,qBAAqB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;gCAChE,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,qBAAqB,CAAC,EAAC;4BAC/C,CAAC;wBACH,CAAC;;;;wBAGD,sBAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAED;;;;;;;;;;;;;;;;OAgBG;IACG,6DAAuC,GAA7C,UAA8C,iBAAyB,EAAE,cAAsB,EAAE,OAAmC;;;;;;wBAC9H,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACzB,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,iBAAiB,KAAK,IAAI,IAAI,iBAAiB,KAAK,SAAS,IAAI,OAAO,iBAAiB,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACrH,MAAM,IAAI,KAAK,CAAC,8EAA8E,CAAC,CAAC;4BAClG,CAAC;4BACD,EAAE,CAAC,CAAC,iBAAiB,KAAK,IAAI,IAAI,iBAAiB,KAAK,SAAS,CAAC,CAAC,CAAC;gCAClE,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,EAAE,CAAC,CAClC,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,qEAAqE,CAAC,CAAC;gCACzF,CAAC;gCACD,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC,CACjC,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,oEAAoE,CAAC,CAAC;gCACxF,CAAC;gCACD,EAAE,CAAC,CAAC,iBAAiB,CAAC,KAAK,CAAC,iBAAiB,CAAC,KAAK,IAAI,CAAC,CACxD,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,kFAAkF,CAAC,CAAC;gCACtG,CAAC;4BACH,CAAC;4BACD,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,IAAI,OAAO,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAC5G,MAAM,IAAI,KAAK,CAAC,2EAA2E,CAAC,CAAC;4BAC/F,CAAC;4BACD,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;gCAC5D,EAAE,CAAC,CAAC,cAAc,CAAC,MAAM,GAAG,EAAE,CAAC,CAC/B,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,kEAAkE,CAAC,CAAC;gCACtF,CAAC;gCACD,EAAE,CAAC,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC,CAC9B,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,iEAAiE,CAAC,CAAC;gCACrF,CAAC;gCACD,EAAE,CAAC,CAAC,cAAc,CAAC,KAAK,CAAC,iBAAiB,CAAC,KAAK,IAAI,CAAC,CACrD,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,+EAA+E,CAAC,CAAC;gCACnG,CAAC;4BACH,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACpI,MAAM,IAAI,KAAK,CAAC,mFAAmF,CAAC,CAAC;4BACvG,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,uFAAuF,CAAC,CAAC;4BAC3G,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;wBAC9B,UAAU,GAAG,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,6IAA6I,CAAC;wBAC9M,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,qBAAqB,EAAE,kBAAkB,CAAC,iBAAiB,CAAC,CAAC,CAAC;wBAC9F,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,cAAc,CAAC,CAAC,CAAC;wBACxF,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;wBAChG,gBAAgB,GAAe,EAAE,CAAC;wBACtC,gBAAgB,CAAC,IAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;wBACnF,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAChC,UAAU,IAAI,GAAG,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACjD,CAAC;wBAGG,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,MAAM,CAAC;wBAC5B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;;;;wBAIgB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBACD,uBAAuB;wBACvB,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;4BACvE,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;oCACxD,YAAY,GAAG,uEAA8B,CAAC;oCAClD,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;gCACnH,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACX,oBAAoB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;gCAC1I,oBAAoB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;gCAChE,oBAAoB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;gCAC/D,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAC;4BAC9C,CAAC;wBACH,CAAC;;;;wBAGD,sBAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAED;;;;;;;;;;;;;;OAcG;IACG,kEAA4C,GAAlD,UAAmD,iBAAyB,EAAE,OAA6D;;;;;;wBACrI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACrB,MAAM,GAAG,CAAC,OAAO,IAAI,OAAO,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC;wBAChF,GAAG,GAAG,CAAC,OAAO,IAAI,OAAO,CAAC,GAAG,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC;wBAC3E,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,iBAAiB,KAAK,IAAI,IAAI,iBAAiB,KAAK,SAAS,IAAI,OAAO,iBAAiB,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACrH,MAAM,IAAI,KAAK,CAAC,8EAA8E,CAAC,CAAC;4BAClG,CAAC;4BACD,EAAE,CAAC,CAAC,iBAAiB,KAAK,IAAI,IAAI,iBAAiB,KAAK,SAAS,CAAC,CAAC,CAAC;gCAClE,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,EAAE,CAAC,CAClC,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,qEAAqE,CAAC,CAAC;gCACzF,CAAC;gCACD,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC,CACjC,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,oEAAoE,CAAC,CAAC;gCACxF,CAAC;gCACD,EAAE,CAAC,CAAC,iBAAiB,CAAC,KAAK,CAAC,iBAAiB,CAAC,KAAK,IAAI,CAAC,CACxD,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,kFAAkF,CAAC,CAAC;gCACtG,CAAC;4BACH,CAAC;4BACD,EAAE,CAAC,CAAC,MAAM,KAAK,IAAI,IAAI,MAAM,KAAK,SAAS,IAAI,OAAO,MAAM,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACpF,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;4BACpD,CAAC;4BACD,EAAE,CAAC,CAAC,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,SAAS,IAAI,OAAO,GAAG,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACjE,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;4BACjD,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACpI,MAAM,IAAI,KAAK,CAAC,mFAAmF,CAAC,CAAC;4BACvG,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,uFAAuF,CAAC,CAAC;4BAC3G,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;wBAC9B,UAAU,GAAG,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,8GAA8G,CAAC;wBAC/K,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,qBAAqB,EAAE,kBAAkB,CAAC,iBAAiB,CAAC,CAAC,CAAC;wBAC9F,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;wBAChG,gBAAgB,GAAe,EAAE,CAAC;wBACtC,EAAE,CAAC,CAAC,MAAM,KAAK,IAAI,IAAI,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC;4BAC5C,gBAAgB,CAAC,IAAI,CAAC,UAAU,GAAG,kBAAkB,CAAC,MAAM,CAAC,CAAC,CAAC;wBACjE,CAAC;wBACD,EAAE,CAAC,CAAC,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,SAAS,CAAC,CAAC,CAAC;4BACtC,gBAAgB,CAAC,IAAI,CAAC,OAAO,GAAG,kBAAkB,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;wBACtE,CAAC;wBACD,gBAAgB,CAAC,IAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;wBACnF,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAChC,UAAU,IAAI,GAAG,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACjD,CAAC;wBAGG,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,KAAK,CAAC;wBAC3B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;;;;wBAIgB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBACD,uBAAuB;wBACvB,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;4BACvE,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;oCACxD,YAAY,GAAG,qEAA4B,CAAC;oCAChD,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;gCACnH,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACX,oBAAoB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;gCAC1I,oBAAoB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;gCAChE,oBAAoB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;gCAC/D,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAC;4BAC9C,CAAC;wBACH,CAAC;;;;wBAGD,sBAAO,OAAO,CAAC,MAAM,CAAC,MAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;OA0BG;IACG,gEAA0C,GAAhD,UAAiD,iBAAyB,EAAE,cAAsB,EAAE,OAAmC;;;;;;wBACjI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACzB,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,iBAAiB,KAAK,IAAI,IAAI,iBAAiB,KAAK,SAAS,IAAI,OAAO,iBAAiB,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACrH,MAAM,IAAI,KAAK,CAAC,8EAA8E,CAAC,CAAC;4BAClG,CAAC;4BACD,EAAE,CAAC,CAAC,iBAAiB,KAAK,IAAI,IAAI,iBAAiB,KAAK,SAAS,CAAC,CAAC,CAAC;gCAClE,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,EAAE,CAAC,CAClC,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,qEAAqE,CAAC,CAAC;gCACzF,CAAC;gCACD,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC,CACjC,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,oEAAoE,CAAC,CAAC;gCACxF,CAAC;gCACD,EAAE,CAAC,CAAC,iBAAiB,CAAC,KAAK,CAAC,iBAAiB,CAAC,KAAK,IAAI,CAAC,CACxD,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,kFAAkF,CAAC,CAAC;gCACtG,CAAC;4BACH,CAAC;4BACD,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,IAAI,OAAO,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAC5G,MAAM,IAAI,KAAK,CAAC,2EAA2E,CAAC,CAAC;4BAC/F,CAAC;4BACD,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;gCAC5D,EAAE,CAAC,CAAC,cAAc,CAAC,MAAM,GAAG,EAAE,CAAC,CAC/B,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,kEAAkE,CAAC,CAAC;gCACtF,CAAC;gCACD,EAAE,CAAC,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC,CAC9B,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,iEAAiE,CAAC,CAAC;gCACrF,CAAC;gCACD,EAAE,CAAC,CAAC,cAAc,CAAC,KAAK,CAAC,iBAAiB,CAAC,KAAK,IAAI,CAAC,CACrD,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,+EAA+E,CAAC,CAAC;gCACnG,CAAC;4BACH,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACpI,MAAM,IAAI,KAAK,CAAC,mFAAmF,CAAC,CAAC;4BACvG,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,uFAAuF,CAAC,CAAC;4BAC3G,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;wBAC9B,UAAU,GAAG,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,8HAA8H,CAAC;wBAC/L,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,qBAAqB,EAAE,kBAAkB,CAAC,iBAAiB,CAAC,CAAC,CAAC;wBAC9F,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,cAAc,CAAC,CAAC,CAAC;wBACxF,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;wBAChG,gBAAgB,GAAe,EAAE,CAAC;wBACtC,gBAAgB,CAAC,IAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;wBACnF,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAChC,UAAU,IAAI,GAAG,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACjD,CAAC;wBAGG,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,QAAQ,CAAC;wBAC9B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;;;;wBAIgB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,IAAI,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACzC,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;;;;wBAGD,sBAAO,OAAO,CAAC,MAAM,CAAC,MAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAED;;;;;;;;;;;;;;;;;;;;;;OAsBG;IACG,kEAA4C,GAAlD,UAAmD,iBAAyB,EAAE,cAAsB,EAAE,UAA6B,EAAE,OAAmC;;;;;;wBAClK,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACzB,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,iBAAiB,KAAK,IAAI,IAAI,iBAAiB,KAAK,SAAS,IAAI,OAAO,iBAAiB,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACrH,MAAM,IAAI,KAAK,CAAC,8EAA8E,CAAC,CAAC;4BAClG,CAAC;4BACD,EAAE,CAAC,CAAC,iBAAiB,KAAK,IAAI,IAAI,iBAAiB,KAAK,SAAS,CAAC,CAAC,CAAC;gCAClE,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,EAAE,CAAC,CAClC,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,qEAAqE,CAAC,CAAC;gCACzF,CAAC;gCACD,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC,CACjC,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,oEAAoE,CAAC,CAAC;gCACxF,CAAC;gCACD,EAAE,CAAC,CAAC,iBAAiB,CAAC,KAAK,CAAC,iBAAiB,CAAC,KAAK,IAAI,CAAC,CACxD,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,kFAAkF,CAAC,CAAC;gCACtG,CAAC;4BACH,CAAC;4BACD,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,IAAI,OAAO,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAC5G,MAAM,IAAI,KAAK,CAAC,2EAA2E,CAAC,CAAC;4BAC/F,CAAC;4BACD,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;gCAC5D,EAAE,CAAC,CAAC,cAAc,CAAC,MAAM,GAAG,EAAE,CAAC,CAC/B,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,kEAAkE,CAAC,CAAC;gCACtF,CAAC;gCACD,EAAE,CAAC,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC,CAC9B,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,iEAAiE,CAAC,CAAC;gCACrF,CAAC;gCACD,EAAE,CAAC,CAAC,cAAc,CAAC,KAAK,CAAC,iBAAiB,CAAC,KAAK,IAAI,CAAC,CACrD,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,+EAA+E,CAAC,CAAC;gCACnG,CAAC;4BACH,CAAC;4BACD,EAAE,CAAC,CAAC,UAAU,KAAK,IAAI,IAAI,UAAU,KAAK,SAAS,CAAC,CAAC,CAAC;gCACpD,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;4BAC7D,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACpI,MAAM,IAAI,KAAK,CAAC,mFAAmF,CAAC,CAAC;4BACvG,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,uFAAuF,CAAC,CAAC;4BAC3G,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;wBAC9B,UAAU,GAAG,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,8HAA8H,CAAC;wBAC/L,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,qBAAqB,EAAE,kBAAkB,CAAC,iBAAiB,CAAC,CAAC,CAAC;wBAC9F,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,cAAc,CAAC,CAAC,CAAC;wBACxF,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;wBAChG,gBAAgB,GAAe,EAAE,CAAC;wBACtC,gBAAgB,CAAC,IAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;wBACnF,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAChC,UAAU,IAAI,GAAG,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACjD,CAAC;wBAGG,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,KAAK,CAAC;wBAC3B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;wBAEG,cAAc,GAAG,IAAI,CAAC;wBACtB,YAAY,GAAG,IAAI,CAAC;wBACxB,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,UAAU,KAAK,IAAI,IAAI,UAAU,KAAK,SAAS,CAAC,CAAC,CAAC;gCAChD,kBAAkB,GAAG,2DAAkB,CAAC;gCAC5C,YAAY,GAAG,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,kBAAkB,EAAE,UAAU,EAAE,YAAY,CAAC,CAAC;gCACzF,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;4BAChD,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACX,kBAAkB,GAAG,IAAI,KAAK,CAAC,aAAU,KAAK,CAAC,OAAO,oCAAgC;iCACtF,eAAa,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC,MAAG,EAAC,CAAC;4BACzD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,kBAAkB,CAAC,EAAC;wBAC5C,CAAC;wBACD,WAAW,CAAC,IAAI,GAAG,cAAc,CAAC;;;;wBAIjB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,IAAI,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACzC,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBACD,uBAAuB;wBACvB,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;4BACvE,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;oCACxD,YAAY,GAAG,mEAA0B,CAAC;oCAC9C,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;gCACnH,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACX,oBAAoB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;gCAC1I,oBAAoB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;gCAChE,oBAAoB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;gCAC/D,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAC;4BAC9C,CAAC;wBACH,CAAC;wBACD,uBAAuB;wBACvB,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;4BACvE,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;oCACxD,YAAY,GAAG,mEAA0B,CAAC;oCAC9C,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;gCACnH,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACX,qBAAqB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;gCAC3I,qBAAqB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;gCACjE,qBAAqB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;gCAChE,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,qBAAqB,CAAC,EAAC;4BAC/C,CAAC;wBACH,CAAC;;;;wBAGD,sBAAO,OAAO,CAAC,MAAM,CAAC,MAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAED;;;;;;;;;;;;;OAaG;IACG,sEAAgD,GAAtD,UAAuD,YAAoB,EAAE,OAAmC;;;;;;wBAC1G,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACzB,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,YAAY,KAAK,IAAI,IAAI,YAAY,KAAK,SAAS,IAAI,OAAO,YAAY,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACtG,MAAM,IAAI,KAAK,CAAC,yEAAyE,CAAC,CAAC;4BAC7F,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,UAAU,GAAG,YAAY,CAAC;wBAC9B,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;wBAGxD,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,KAAK,CAAC;wBAC3B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;;;;wBAIgB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBACD,uBAAuB;wBACvB,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;4BACvE,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;oCACxD,YAAY,GAAG,qEAA4B,CAAC;oCAChD,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;gCACnH,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACX,oBAAoB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;gCAC1I,oBAAoB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;gCAChE,oBAAoB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;gCAC/D,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAC;4BAC9C,CAAC;wBACH,CAAC;;;;wBAGD,sBAAO,OAAO,CAAC,MAAM,CAAC,MAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAuCD,kCAAY,GAAZ,UAAa,iBAAyB,EAAE,cAAsB,EAAE,OAAmC,EAAE,QAAuC;QAC1I,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAAwC,CAAC;QAClD,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,qCAAqC,CAAC,iBAAiB,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBAC5I,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAkB,CAAC,CAAC;YAC1D,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,qCAAqC,CAAC,iBAAiB,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBAC9J,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAkB,CAAC;gBACrC,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IA4BD,oCAAc,GAAd,UAAe,iBAAyB,EAAE,cAAsB,EAAE,OAAmC,EAAE,QAA0C;QAC/I,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAA2C,CAAC;QACrD,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,uCAAuC,CAAC,iBAAiB,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBAC9I,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAqB,CAAC,CAAC;YAC7D,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,uCAAuC,CAAC,iBAAiB,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBAChK,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAqB,CAAC;gBACxC,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAqCD,oCAAc,GAAd,UAAe,iBAAyB,EAAE,cAAsB,EAAE,UAA6B,EAAE,OAAmC,EAAE,QAA4D;QAChM,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAA6D,CAAC;QACvE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,uCAAuC,CAAC,iBAAiB,EAAE,cAAc,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBAC1J,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAuC,CAAC,CAAC;YAC/E,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,uCAAuC,CAAC,iBAAiB,EAAE,cAAc,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBAC5K,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAuC,CAAC;gBAC1D,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IA8BD,yBAAG,GAAH,UAAI,iBAAyB,EAAE,cAAsB,EAAE,OAAmC,EAAE,QAA4D;QACtJ,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAA6D,CAAC;QACvE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,4BAA4B,CAAC,iBAAiB,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBACnI,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAuC,CAAC,CAAC;YAC/E,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,4BAA4B,CAAC,iBAAiB,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBACrJ,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAuC,CAAC;gBAC1D,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAiCD,4BAAM,GAAN,UAAO,iBAAyB,EAAE,cAAsB,EAAE,OAAmC,EAAE,QAAuC;QACpI,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAAwC,CAAC;QAClD,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,+BAA+B,CAAC,iBAAiB,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBACtI,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAkB,CAAC,CAAC;YAC1D,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,+BAA+B,CAAC,iBAAiB,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBACxJ,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAkB,CAAC;gBACrC,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAiCD,8BAAQ,GAAR,UAAS,iBAAyB,EAAE,cAAsB,EAAE,UAA6B,EAAE,OAAmC,EAAE,QAAkE;QAChM,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAAmE,CAAC;QAC7E,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,iCAAiC,CAAC,iBAAiB,EAAE,cAAc,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBACpJ,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAA6C,CAAC,CAAC;YACrF,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,iCAAiC,CAAC,iBAAiB,EAAE,cAAc,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBACtK,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAA6C,CAAC;gBAChE,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IA+BD,oCAAc,GAAd,UAAe,iBAAyB,EAAE,cAAsB,EAAE,OAAmC,EAAE,QAAgE;QACrK,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAAiE,CAAC;QAC3E,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,uCAAuC,CAAC,iBAAiB,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBAC9I,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAA2C,CAAC,CAAC;YACnF,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,uCAAuC,CAAC,iBAAiB,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBAChK,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAA2C,CAAC;gBAC9D,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IA6BD,yCAAmB,GAAnB,UAAoB,iBAAyB,EAAE,OAA6D,EAAE,QAA8D;QAC1K,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAA+D,CAAC;QACzE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,4CAA4C,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBACnI,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAyC,CAAC,CAAC;YACjF,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,4CAA4C,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBACrJ,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAyC,CAAC;gBAC5D,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAuCD,uCAAiB,GAAjB,UAAkB,iBAAyB,EAAE,cAAsB,EAAE,OAAmC,EAAE,QAAuC;QAC/I,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAAwC,CAAC;QAClD,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,0CAA0C,CAAC,iBAAiB,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBACjJ,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAkB,CAAC,CAAC;YAC1D,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,0CAA0C,CAAC,iBAAiB,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBACnK,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAkB,CAAC;gBACrC,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAqCD,yCAAmB,GAAnB,UAAoB,iBAAyB,EAAE,cAAsB,EAAE,UAA6B,EAAE,OAAmC,EAAE,QAA4D;QACrM,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAA6D,CAAC;QACvE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,4CAA4C,CAAC,iBAAiB,EAAE,cAAc,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBAC/J,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAuC,CAAC,CAAC;YAC/E,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,4CAA4C,CAAC,iBAAiB,EAAE,cAAc,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBACjL,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAuC,CAAC;gBAC1D,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IA4BD,6CAAuB,GAAvB,UAAwB,YAAoB,EAAE,OAAmC,EAAE,QAA8D;QAC/I,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAA+D,CAAC;QACzE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,gDAAgD,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBAClI,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAyC,CAAC,CAAC;YACjF,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,gDAAgD,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBACpJ,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAyC,CAAC;gBAC5D,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAEH,kBAAC;AAAD,CAAC;;;;;;;;;;;;ACjiED;AAAA;;;;GAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEkC;AAEQ;AAG7C,IAAM,WAAW,GAAG,uDAAkB,CAAC;AAEvC,sCAAsC;AACtC;IAEE;;;OAGG;IACH,mBAAY,MAAgC;QAC1C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED;;;;;;;;;;;;;OAaG;IACG,uDAAmC,GAAzC,UAA0C,yBAAiC,EAAE,OAAmC;;;;;;wBAC1G,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACzB,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,yBAAyB,KAAK,IAAI,IAAI,yBAAyB,KAAK,SAAS,IAAI,OAAO,yBAAyB,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAC7I,MAAM,IAAI,KAAK,CAAC,sFAAsF,CAAC,CAAC;4BAC1G,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACpI,MAAM,IAAI,KAAK,CAAC,mFAAmF,CAAC,CAAC;4BACvG,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,uFAAuF,CAAC,CAAC;4BAC3G,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;wBAC9B,UAAU,GAAG,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,iFAAiF,CAAC;wBAClJ,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,6BAA6B,EAAE,kBAAkB,CAAC,yBAAyB,CAAC,CAAC,CAAC;wBAC9G,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;wBAChG,gBAAgB,GAAe,EAAE,CAAC;wBACtC,gBAAgB,CAAC,IAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;wBACnF,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAChC,UAAU,IAAI,GAAG,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACjD,CAAC;wBAGG,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,MAAM,CAAC;wBAC5B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;;;;wBAIgB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBACD,uBAAuB;wBACvB,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;4BACvE,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;oCACxD,YAAY,GAAG,yDAAgB,CAAC;oCACpC,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;gCACnH,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACX,oBAAoB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;gCAC1I,oBAAoB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;gCAChE,oBAAoB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;gCAC/D,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAC;4BAC9C,CAAC;wBACH,CAAC;;;;wBAGD,sBAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAED;;;;;;;;;;;;;OAaG;IACG,qDAAiC,GAAvC,UAAwC,yBAAiC,EAAE,OAAmC;;;;;;wBACxG,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACzB,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,yBAAyB,KAAK,IAAI,IAAI,yBAAyB,KAAK,SAAS,IAAI,OAAO,yBAAyB,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAC7I,MAAM,IAAI,KAAK,CAAC,sFAAsF,CAAC,CAAC;4BAC1G,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACpI,MAAM,IAAI,KAAK,CAAC,mFAAmF,CAAC,CAAC;4BACvG,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,uFAAuF,CAAC,CAAC;4BAC3G,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;wBAC9B,UAAU,GAAG,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,+EAA+E,CAAC;wBAChJ,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,6BAA6B,EAAE,kBAAkB,CAAC,yBAAyB,CAAC,CAAC,CAAC;wBAC9G,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;wBAChG,gBAAgB,GAAe,EAAE,CAAC;wBACtC,gBAAgB,CAAC,IAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;wBACnF,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAChC,UAAU,IAAI,GAAG,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACjD,CAAC;wBAGG,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,MAAM,CAAC;wBAC5B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;;;;wBAIgB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBACD,uBAAuB;wBACvB,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;4BACvE,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;oCACxD,YAAY,GAAG,yDAAgB,CAAC;oCACpC,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;gCACnH,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACX,oBAAoB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;gCAC1I,oBAAoB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;gCAChE,oBAAoB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;gCAC/D,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAC;4BAC9C,CAAC;wBACH,CAAC;;;;wBAGD,sBAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAED;;;;;;;;;;OAUG;IACG,iDAA6B,GAAnC,UAAoC,OAA4C;;;;;;wBAC1E,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACrB,GAAG,GAAG,CAAC,OAAO,IAAI,OAAO,CAAC,GAAG,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC;wBACvE,MAAM,GAAG,CAAC,OAAO,IAAI,OAAO,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC;wBACpF,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,SAAS,IAAI,OAAO,GAAG,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACjE,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;4BACjD,CAAC;4BACD,EAAE,CAAC,CAAC,MAAM,KAAK,IAAI,IAAI,MAAM,KAAK,SAAS,IAAI,OAAO,MAAM,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACpF,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;4BACpD,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACpI,MAAM,IAAI,KAAK,CAAC,mFAAmF,CAAC,CAAC;4BACvG,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,uFAAuF,CAAC,CAAC;4BAC3G,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;wBAC9B,UAAU,GAAG,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,0CAA0C,CAAC;wBAC3G,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;wBAChG,gBAAgB,GAAe,EAAE,CAAC;wBACtC,EAAE,CAAC,CAAC,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,SAAS,CAAC,CAAC,CAAC;4BACtC,gBAAgB,CAAC,IAAI,CAAC,OAAO,GAAG,kBAAkB,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;wBACtE,CAAC;wBACD,EAAE,CAAC,CAAC,MAAM,KAAK,IAAI,IAAI,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC;4BAC5C,gBAAgB,CAAC,IAAI,CAAC,UAAU,GAAG,kBAAkB,CAAC,MAAM,CAAC,CAAC,CAAC;wBACjE,CAAC;wBACD,gBAAgB,CAAC,IAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;wBACnF,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAChC,UAAU,IAAI,GAAG,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACjD,CAAC;wBAGG,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,KAAK,CAAC;wBAC3B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;;;;wBAIgB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBACD,uBAAuB;wBACvB,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;4BACvE,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;oCACxD,YAAY,GAAG,mEAA0B,CAAC;oCAC9C,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;gCACnH,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACX,oBAAoB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;gCAC1I,oBAAoB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;gCAChE,oBAAoB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;gCAC/D,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAC;4BAC9C,CAAC;wBACH,CAAC;;;;wBAGD,sBAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAED;;;;;;;;;;;;;OAaG;IACG,gDAA4B,GAAlC,UAAmC,yBAAiC,EAAE,OAA2C;;;;;;wBAC3G,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACrB,MAAM,GAAG,CAAC,OAAO,IAAI,OAAO,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC;wBACpF,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,MAAM,KAAK,IAAI,IAAI,MAAM,KAAK,SAAS,IAAI,OAAO,MAAM,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACpF,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;4BACpD,CAAC;4BACD,EAAE,CAAC,CAAC,yBAAyB,KAAK,IAAI,IAAI,yBAAyB,KAAK,SAAS,IAAI,OAAO,yBAAyB,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAC7I,MAAM,IAAI,KAAK,CAAC,sFAAsF,CAAC,CAAC;4BAC1G,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACpI,MAAM,IAAI,KAAK,CAAC,mFAAmF,CAAC,CAAC;4BACvG,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,uFAAuF,CAAC,CAAC;4BAC3G,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;wBAC9B,UAAU,GAAG,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,sEAAsE,CAAC;wBACvI,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,6BAA6B,EAAE,kBAAkB,CAAC,yBAAyB,CAAC,CAAC,CAAC;wBAC9G,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;wBAChG,gBAAgB,GAAe,EAAE,CAAC;wBACtC,EAAE,CAAC,CAAC,MAAM,KAAK,IAAI,IAAI,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC;4BAC5C,gBAAgB,CAAC,IAAI,CAAC,UAAU,GAAG,kBAAkB,CAAC,MAAM,CAAC,CAAC,CAAC;wBACjE,CAAC;wBACD,gBAAgB,CAAC,IAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;wBACnF,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAChC,UAAU,IAAI,GAAG,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACjD,CAAC;wBAGG,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,KAAK,CAAC;wBAC3B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;;;;wBAIgB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBACD,uBAAuB;wBACvB,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;4BACvE,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;oCACxD,YAAY,GAAG,yDAAgB,CAAC;oCACpC,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;gCACnH,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACX,oBAAoB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;gCAC1I,oBAAoB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;gCAChE,oBAAoB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;gCAC/D,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAC;4BAC9C,CAAC;wBACH,CAAC;;;;wBAGD,sBAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAED;;;;;;;;;;;;;OAaG;IACG,qDAAiC,GAAvC,UAAwC,YAAoB,EAAE,OAAmC;;;;;;wBAC3F,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACzB,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,YAAY,KAAK,IAAI,IAAI,YAAY,KAAK,SAAS,IAAI,OAAO,YAAY,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACtG,MAAM,IAAI,KAAK,CAAC,yEAAyE,CAAC,CAAC;4BAC7F,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,UAAU,GAAG,YAAY,CAAC;wBAC9B,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;wBAGxD,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,KAAK,CAAC;wBAC3B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;;;;wBAIgB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBACD,uBAAuB;wBACvB,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;4BACvE,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;oCACxD,YAAY,GAAG,mEAA0B,CAAC;oCAC9C,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;gCACnH,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACX,oBAAoB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;gCAC1I,oBAAoB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;gCAChE,oBAAoB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;gCAC/D,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAC;4BAC9C,CAAC;wBACH,CAAC;;;;wBAGD,sBAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IA2BD,8BAAU,GAAV,UAAW,yBAAiC,EAAE,OAAmC,EAAE,QAAkD;QACnI,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAAmD,CAAC;QAC7D,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,mCAAmC,CAAC,yBAAyB,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBAClI,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAA6B,CAAC,CAAC;YACrE,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,mCAAmC,CAAC,yBAAyB,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBACpJ,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAA6B,CAAC;gBAChD,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IA2BD,4BAAQ,GAAR,UAAS,yBAAiC,EAAE,OAAmC,EAAE,QAAkD;QACjI,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAAmD,CAAC;QAC7D,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,iCAAiC,CAAC,yBAAyB,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBAChI,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAA6B,CAAC,CAAC;YACrE,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,iCAAiC,CAAC,yBAAyB,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBAClJ,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAA6B,CAAC;gBAChD,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAyBD,wBAAI,GAAJ,UAAK,OAA4C,EAAE,QAA4D;QAC7G,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAA6D,CAAC;QACvE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,6BAA6B,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBACjG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAuC,CAAC,CAAC;YAC/E,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,6BAA6B,CAAC,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBACnH,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAuC,CAAC;gBAC1D,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IA2BD,uBAAG,GAAH,UAAI,yBAAiC,EAAE,OAA2C,EAAE,QAAkD;QACpI,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAAmD,CAAC;QAC7D,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,4BAA4B,CAAC,yBAAyB,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBAC3H,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAA6B,CAAC,CAAC;YACrE,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,4BAA4B,CAAC,yBAAyB,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBAC7I,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAA6B,CAAC;gBAChD,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IA4BD,4BAAQ,GAAR,UAAS,YAAoB,EAAE,OAAmC,EAAE,QAA4D;QAC9H,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAA6D,CAAC;QACvE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,iCAAiC,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBACnH,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAuC,CAAC,CAAC;YAC/E,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,iCAAiC,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBACrI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAuC,CAAC;gBAC1D,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAEH,gBAAC;AAAD,CAAC;;;;;;;;;;;;ACj1BD;AAAA;;;;GAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEkC;AAEQ;AAG7C,IAAM,WAAW,GAAG,uDAAkB,CAAC;AAEvC,sCAAsC;AACtC;IAEE;;;OAGG;IACH,mBAAY,MAAgC;QAC1C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED;;;;;;;;;;;;;;OAcG;IACG,gEAA4C,GAAlD,UAAmD,iBAAyB,EAAE,OAA2D;;;;;;wBACnI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACrB,MAAM,GAAG,CAAC,OAAO,IAAI,OAAO,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC;wBAChF,MAAM,GAAG,CAAC,OAAO,IAAI,OAAO,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC;wBAChF,GAAG,GAAG,CAAC,OAAO,IAAI,OAAO,CAAC,GAAG,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC;wBAC3E,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,iBAAiB,KAAK,IAAI,IAAI,iBAAiB,KAAK,SAAS,IAAI,OAAO,iBAAiB,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACrH,MAAM,IAAI,KAAK,CAAC,8EAA8E,CAAC,CAAC;4BAClG,CAAC;4BACD,EAAE,CAAC,CAAC,iBAAiB,KAAK,IAAI,IAAI,iBAAiB,KAAK,SAAS,CAAC,CAAC,CAAC;gCAClE,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,EAAE,CAAC,CAClC,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,qEAAqE,CAAC,CAAC;gCACzF,CAAC;gCACD,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC,CACjC,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,oEAAoE,CAAC,CAAC;gCACxF,CAAC;gCACD,EAAE,CAAC,CAAC,iBAAiB,CAAC,KAAK,CAAC,iBAAiB,CAAC,KAAK,IAAI,CAAC,CACxD,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,kFAAkF,CAAC,CAAC;gCACtG,CAAC;4BACH,CAAC;4BACD,EAAE,CAAC,CAAC,MAAM,KAAK,IAAI,IAAI,MAAM,KAAK,SAAS,IAAI,OAAO,MAAM,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACpF,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;4BACpD,CAAC;4BACD,EAAE,CAAC,CAAC,MAAM,KAAK,IAAI,IAAI,MAAM,KAAK,SAAS,IAAI,OAAO,MAAM,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACpF,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;4BACpD,CAAC;4BACD,EAAE,CAAC,CAAC,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,SAAS,IAAI,OAAO,GAAG,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACjE,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;4BACjD,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACpI,MAAM,IAAI,KAAK,CAAC,mFAAmF,CAAC,CAAC;4BACvG,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,uFAAuF,CAAC,CAAC;4BAC3G,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;wBAC9B,UAAU,GAAG,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,6EAA6E,CAAC;wBAC9I,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,qBAAqB,EAAE,kBAAkB,CAAC,iBAAiB,CAAC,CAAC,CAAC;wBAC9F,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;wBAChG,gBAAgB,GAAe,EAAE,CAAC;wBACtC,EAAE,CAAC,CAAC,MAAM,KAAK,IAAI,IAAI,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC;4BAC5C,gBAAgB,CAAC,IAAI,CAAC,UAAU,GAAG,kBAAkB,CAAC,MAAM,CAAC,CAAC,CAAC;wBACjE,CAAC;wBACD,EAAE,CAAC,CAAC,MAAM,KAAK,IAAI,IAAI,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC;4BAC5C,gBAAgB,CAAC,IAAI,CAAC,UAAU,GAAG,kBAAkB,CAAC,MAAM,CAAC,CAAC,CAAC;wBACjE,CAAC;wBACD,EAAE,CAAC,CAAC,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,SAAS,CAAC,CAAC,CAAC;4BACtC,gBAAgB,CAAC,IAAI,CAAC,OAAO,GAAG,kBAAkB,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;wBACtE,CAAC;wBACD,gBAAgB,CAAC,IAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;wBACnF,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAChC,UAAU,IAAI,GAAG,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACjD,CAAC;wBAGG,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,KAAK,CAAC;wBAC3B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;;;;wBAIgB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBACD,uBAAuB;wBACvB,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;4BACvE,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;oCACxD,YAAY,GAAG,mEAA0B,CAAC;oCAC9C,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;gCACnH,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACX,oBAAoB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;gCAC1I,oBAAoB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;gCAChE,oBAAoB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;gCAC/D,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAC;4BAC9C,CAAC;wBACH,CAAC;;;;wBAGD,sBAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAGD;;;;;;;;;;;;;;;;;;;;;OAqBG;IACG,0DAAsC,GAA5C,UAA6C,uBAA+B,EAAE,UAAoC,EAAE,OAAmC;;;;;;wBACjJ,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;;;;wBAIP,qBAAM,IAAI,CAAC,2CAA2C,CAAC,uBAAuB,EAAE,UAAU,EAAE,OAAO,CAAC;;wBAApH,aAAa,GAAG,SAAoG,CAAC;;;;wBAErH,sBAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;;;wBAIZ,qBAAM,MAAM,CAAC,6BAA6B,CAAC,aAAa,EAAE,OAAO,CAAC;;wBAAjF,YAAY,GAAG,SAAkE,CAAC;;;;wBAIlF,sBAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;4BAE7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAGD;;;;;;;;;;;;;;;;;;;;;;;;OAwBG;IACG,kEAA8C,GAApD,UAAqD,uBAA+B,EAAE,UAAoC,EAAE,OAAmC;;;;;;wBACzJ,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;;;;wBAIP,qBAAM,IAAI,CAAC,mDAAmD,CAAC,uBAAuB,EAAE,UAAU,EAAE,OAAO,CAAC;;wBAA5H,aAAa,GAAG,SAA4G,CAAC;;;;wBAE7H,sBAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;;;wBAIZ,qBAAM,MAAM,CAAC,6BAA6B,CAAC,aAAa,EAAE,OAAO,CAAC;;wBAAjF,YAAY,GAAG,SAAkE,CAAC;;;;wBAIlF,sBAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;4BAE7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAED;;;;;;;;;;OAUG;IACG,iDAA6B,GAAnC,UAAoC,OAA4C;;;;;;wBAC1E,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACrB,MAAM,GAAG,CAAC,OAAO,IAAI,OAAO,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC;wBAChF,MAAM,GAAG,CAAC,OAAO,IAAI,OAAO,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC;wBAChF,GAAG,GAAG,CAAC,OAAO,IAAI,OAAO,CAAC,GAAG,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC;wBAC3E,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,MAAM,KAAK,IAAI,IAAI,MAAM,KAAK,SAAS,IAAI,OAAO,MAAM,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACpF,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;4BACpD,CAAC;4BACD,EAAE,CAAC,CAAC,MAAM,KAAK,IAAI,IAAI,MAAM,KAAK,SAAS,IAAI,OAAO,MAAM,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACpF,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;4BACpD,CAAC;4BACD,EAAE,CAAC,CAAC,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,SAAS,IAAI,OAAO,GAAG,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACjE,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;4BACjD,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACpI,MAAM,IAAI,KAAK,CAAC,mFAAmF,CAAC,CAAC;4BACvG,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,uFAAuF,CAAC,CAAC;4BAC3G,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;wBAC9B,UAAU,GAAG,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,0CAA0C,CAAC;wBAC3G,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;wBAChG,gBAAgB,GAAe,EAAE,CAAC;wBACtC,EAAE,CAAC,CAAC,MAAM,KAAK,IAAI,IAAI,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC;4BAC5C,gBAAgB,CAAC,IAAI,CAAC,UAAU,GAAG,kBAAkB,CAAC,MAAM,CAAC,CAAC,CAAC;wBACjE,CAAC;wBACD,EAAE,CAAC,CAAC,MAAM,KAAK,IAAI,IAAI,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC;4BAC5C,gBAAgB,CAAC,IAAI,CAAC,UAAU,GAAG,kBAAkB,CAAC,MAAM,CAAC,CAAC,CAAC;wBACjE,CAAC;wBACD,EAAE,CAAC,CAAC,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,SAAS,CAAC,CAAC,CAAC;4BACtC,gBAAgB,CAAC,IAAI,CAAC,OAAO,GAAG,kBAAkB,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;wBACtE,CAAC;wBACD,gBAAgB,CAAC,IAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;wBACnF,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAChC,UAAU,IAAI,GAAG,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACjD,CAAC;wBAGG,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,KAAK,CAAC;wBAC3B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;;;;wBAIgB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBACD,uBAAuB;wBACvB,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;4BACvE,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;oCACxD,YAAY,GAAG,mEAA0B,CAAC;oCAC9C,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;gCACnH,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACX,oBAAoB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;gCAC1I,oBAAoB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;gCAChE,oBAAoB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;gCAC/D,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAC;4BAC9C,CAAC;wBACH,CAAC;;;;wBAGD,sBAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;OAyBG;IACG,2DAAuC,GAA7C,UAA8C,iBAAyB,EAAE,yBAAiC,EAAE,kBAA0B,EAAE,YAAoB,EAAE,YAAoB,EAAE,UAAkB,EAAE,OAAmC;;;;;;wBACrO,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACzB,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,iBAAiB,KAAK,IAAI,IAAI,iBAAiB,KAAK,SAAS,IAAI,OAAO,iBAAiB,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACrH,MAAM,IAAI,KAAK,CAAC,8EAA8E,CAAC,CAAC;4BAClG,CAAC;4BACD,EAAE,CAAC,CAAC,iBAAiB,KAAK,IAAI,IAAI,iBAAiB,KAAK,SAAS,CAAC,CAAC,CAAC;gCAClE,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,EAAE,CAAC,CAClC,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,qEAAqE,CAAC,CAAC;gCACzF,CAAC;gCACD,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC,CACjC,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,oEAAoE,CAAC,CAAC;gCACxF,CAAC;gCACD,EAAE,CAAC,CAAC,iBAAiB,CAAC,KAAK,CAAC,iBAAiB,CAAC,KAAK,IAAI,CAAC,CACxD,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,kFAAkF,CAAC,CAAC;gCACtG,CAAC;4BACH,CAAC;4BACD,EAAE,CAAC,CAAC,yBAAyB,KAAK,IAAI,IAAI,yBAAyB,KAAK,SAAS,IAAI,OAAO,yBAAyB,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAC7I,MAAM,IAAI,KAAK,CAAC,sFAAsF,CAAC,CAAC;4BAC1G,CAAC;4BACD,EAAE,CAAC,CAAC,kBAAkB,KAAK,IAAI,IAAI,kBAAkB,KAAK,SAAS,IAAI,OAAO,kBAAkB,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACxH,MAAM,IAAI,KAAK,CAAC,+EAA+E,CAAC,CAAC;4BACnG,CAAC;4BACD,EAAE,CAAC,CAAC,YAAY,KAAK,IAAI,IAAI,YAAY,KAAK,SAAS,IAAI,OAAO,YAAY,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACtG,MAAM,IAAI,KAAK,CAAC,yEAAyE,CAAC,CAAC;4BAC7F,CAAC;4BACD,EAAE,CAAC,CAAC,YAAY,KAAK,IAAI,IAAI,YAAY,KAAK,SAAS,IAAI,OAAO,YAAY,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACtG,MAAM,IAAI,KAAK,CAAC,yEAAyE,CAAC,CAAC;4BAC7F,CAAC;4BACD,EAAE,CAAC,CAAC,UAAU,KAAK,IAAI,IAAI,UAAU,KAAK,SAAS,IAAI,OAAO,UAAU,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChG,MAAM,IAAI,KAAK,CAAC,uEAAuE,CAAC,CAAC;4BAC3F,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,uFAAuF,CAAC,CAAC;4BAC3G,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;wBAC9B,UAAU,GAAG,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,4JAA4J,CAAC;wBAC7N,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,qBAAqB,EAAE,kBAAkB,CAAC,iBAAiB,CAAC,CAAC,CAAC;wBAC9F,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,6BAA6B,EAAE,kBAAkB,CAAC,yBAAyB,CAAC,CAAC,CAAC;wBAC9G,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,sBAAsB,EAAE,kBAAkB,CAAC,CAAC;wBAC5E,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,gBAAgB,EAAE,YAAY,CAAC,CAAC;wBAChE,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,gBAAgB,EAAE,kBAAkB,CAAC,YAAY,CAAC,CAAC,CAAC;wBACpF,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;wBAChG,gBAAgB,GAAe,EAAE,CAAC;wBACtC,gBAAgB,CAAC,IAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC,UAAU,CAAC,CAAC,CAAC;wBACvE,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAChC,UAAU,IAAI,GAAG,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACjD,CAAC;wBAGG,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,MAAM,CAAC;wBAC5B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;;;;wBAIgB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,IAAI,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACzC,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBACD,YAAY,CAAC,UAAU,GAAG,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC;;;;wBAG/C,sBAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAGD;;;;;;;;;;;;;;;;;;;;;;;;OAwBG;IACG,yDAAqC,GAA3C,UAA4C,iBAAyB,EAAE,yBAAiC,EAAE,kBAA0B,EAAE,YAAoB,EAAE,YAAoB,EAAE,UAAkB,EAAE,OAAmC;;;;;;wBACnO,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;;;;wBAIP,qBAAM,IAAI,CAAC,0CAA0C,CAAC,iBAAiB,EAAE,yBAAyB,EAAE,kBAAkB,EAAE,YAAY,EAAE,YAAY,EAAE,UAAU,EAAE,OAAO,CAAC;;wBAAxL,aAAa,GAAG,SAAwK,CAAC;;;;wBAEzL,sBAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;;;wBAIZ,qBAAM,MAAM,CAAC,6BAA6B,CAAC,aAAa,EAAE,OAAO,CAAC;;wBAAjF,YAAY,GAAG,SAAkE,CAAC;;;;wBAIlF,sBAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;4BAE7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAGD;;;;;;;;;;;;;;;;;;;;;;;;;;;OA2BG;IACG,2DAAuC,GAA7C,UAA8C,iBAAyB,EAAE,yBAAiC,EAAE,kBAA0B,EAAE,YAAoB,EAAE,YAAoB,EAAE,UAAkB,EAAE,UAAkC,EAAE,OAAmC;;;;;;wBACzQ,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;;;;wBAIP,qBAAM,IAAI,CAAC,4CAA4C,CAAC,iBAAiB,EAAE,yBAAyB,EAAE,kBAAkB,EAAE,YAAY,EAAE,YAAY,EAAE,UAAU,EAAE,UAAU,EAAE,OAAO,CAAC;;wBAAtM,aAAa,GAAG,SAAsL,CAAC;;;;wBAEvM,sBAAO,OAAO,CAAC,MAAM,CAAC,MAAG,CAAC,EAAC;;;wBAIZ,qBAAM,MAAM,CAAC,6BAA6B,CAAC,aAAa,EAAE,OAAO,CAAC;;wBAAjF,YAAY,GAAG,SAAkE,CAAC;wBAC9E,WAAW,GAAG,YAAY,CAAC,OAAO,CAAC;wBACnC,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBAGjC,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;wBACvE,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;gCACxD,YAAY,GAAG,gEAAuB,CAAC;gCAC3C,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;4BACnH,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACX,oBAAoB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;4BAC1I,oBAAoB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BAChE,oBAAoB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC/D,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAC;wBAC9C,CAAC;;;;wBAED,sBAAO,OAAO,CAAC,MAAM,CAAC,MAAG,CAAC,EAAC;4BAE7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAGD;;;;;;;;;;;;;;;;;;;;;;;;;;OA0BG;IACG,mDAA+B,GAArC,UAAsC,iBAAyB,EAAE,yBAAiC,EAAE,kBAA0B,EAAE,YAAoB,EAAE,YAAoB,EAAE,UAAkB,EAAE,UAAkC,EAAE,OAAmC;;;;;;wBACjQ,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;;;;wBAIP,qBAAM,IAAI,CAAC,oCAAoC,CAAC,iBAAiB,EAAE,yBAAyB,EAAE,kBAAkB,EAAE,YAAY,EAAE,YAAY,EAAE,UAAU,EAAE,UAAU,EAAE,OAAO,CAAC;;wBAA9L,aAAa,GAAG,SAA8K,CAAC;;;;wBAE/L,sBAAO,OAAO,CAAC,MAAM,CAAC,MAAG,CAAC,EAAC;;;wBAIZ,qBAAM,MAAM,CAAC,6BAA6B,CAAC,aAAa,EAAE,OAAO,CAAC;;wBAAjF,YAAY,GAAG,SAAkE,CAAC;wBAC9E,WAAW,GAAG,YAAY,CAAC,OAAO,CAAC;wBACnC,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBAGjC,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;wBACvE,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;gCACxD,YAAY,GAAG,gEAAuB,CAAC;gCAC3C,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;4BACnH,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACX,oBAAoB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;4BAC1I,oBAAoB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BAChE,oBAAoB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC/D,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAC;wBAC9C,CAAC;;;;wBAED,sBAAO,OAAO,CAAC,MAAM,CAAC,MAAG,CAAC,EAAC;4BAE7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAED;;;;;;;;;;;;;;;;;;;;;;;;OAwBG;IACG,gDAA4B,GAAlC,UAAmC,iBAAyB,EAAE,yBAAiC,EAAE,kBAA0B,EAAE,YAAoB,EAAE,YAAoB,EAAE,UAAkB,EAAE,OAAmC;;;;;;wBAC1N,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACzB,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,iBAAiB,KAAK,IAAI,IAAI,iBAAiB,KAAK,SAAS,IAAI,OAAO,iBAAiB,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACrH,MAAM,IAAI,KAAK,CAAC,8EAA8E,CAAC,CAAC;4BAClG,CAAC;4BACD,EAAE,CAAC,CAAC,iBAAiB,KAAK,IAAI,IAAI,iBAAiB,KAAK,SAAS,CAAC,CAAC,CAAC;gCAClE,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,EAAE,CAAC,CAClC,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,qEAAqE,CAAC,CAAC;gCACzF,CAAC;gCACD,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC,CACjC,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,oEAAoE,CAAC,CAAC;gCACxF,CAAC;gCACD,EAAE,CAAC,CAAC,iBAAiB,CAAC,KAAK,CAAC,iBAAiB,CAAC,KAAK,IAAI,CAAC,CACxD,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,kFAAkF,CAAC,CAAC;gCACtG,CAAC;4BACH,CAAC;4BACD,EAAE,CAAC,CAAC,yBAAyB,KAAK,IAAI,IAAI,yBAAyB,KAAK,SAAS,IAAI,OAAO,yBAAyB,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAC7I,MAAM,IAAI,KAAK,CAAC,sFAAsF,CAAC,CAAC;4BAC1G,CAAC;4BACD,EAAE,CAAC,CAAC,kBAAkB,KAAK,IAAI,IAAI,kBAAkB,KAAK,SAAS,IAAI,OAAO,kBAAkB,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACxH,MAAM,IAAI,KAAK,CAAC,+EAA+E,CAAC,CAAC;4BACnG,CAAC;4BACD,EAAE,CAAC,CAAC,YAAY,KAAK,IAAI,IAAI,YAAY,KAAK,SAAS,IAAI,OAAO,YAAY,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACtG,MAAM,IAAI,KAAK,CAAC,yEAAyE,CAAC,CAAC;4BAC7F,CAAC;4BACD,EAAE,CAAC,CAAC,YAAY,KAAK,IAAI,IAAI,YAAY,KAAK,SAAS,IAAI,OAAO,YAAY,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACtG,MAAM,IAAI,KAAK,CAAC,yEAAyE,CAAC,CAAC;4BAC7F,CAAC;4BACD,EAAE,CAAC,CAAC,UAAU,KAAK,IAAI,IAAI,UAAU,KAAK,SAAS,IAAI,OAAO,UAAU,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChG,MAAM,IAAI,KAAK,CAAC,uEAAuE,CAAC,CAAC;4BAC3F,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,uFAAuF,CAAC,CAAC;4BAC3G,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;wBAC9B,UAAU,GAAG,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,4JAA4J,CAAC;wBAC7N,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,qBAAqB,EAAE,kBAAkB,CAAC,iBAAiB,CAAC,CAAC,CAAC;wBAC9F,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,6BAA6B,EAAE,kBAAkB,CAAC,yBAAyB,CAAC,CAAC,CAAC;wBAC9G,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,sBAAsB,EAAE,kBAAkB,CAAC,CAAC;wBAC5E,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,gBAAgB,EAAE,YAAY,CAAC,CAAC;wBAChE,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,gBAAgB,EAAE,kBAAkB,CAAC,YAAY,CAAC,CAAC,CAAC;wBACpF,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;wBAChG,gBAAgB,GAAe,EAAE,CAAC;wBACtC,gBAAgB,CAAC,IAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC,UAAU,CAAC,CAAC,CAAC;wBACvE,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAChC,UAAU,IAAI,GAAG,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACjD,CAAC;wBAGG,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,KAAK,CAAC;wBAC3B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;;;;wBAIgB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBACD,uBAAuB;wBACvB,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;4BACvE,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;oCACxD,YAAY,GAAG,gEAAuB,CAAC;oCAC3C,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;gCACnH,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACX,oBAAoB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;gCAC1I,oBAAoB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;gCAChE,oBAAoB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;gCAC/D,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAC;4BAC9C,CAAC;wBACH,CAAC;;;;wBAGD,sBAAO,OAAO,CAAC,MAAM,CAAC,MAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAED;;;;;;;;;;;;;;;;OAgBG;IACG,+DAA2C,GAAjD,UAAkD,UAAkB,EAAE,UAAkB,EAAE,OAAmC;;;;;;wBACvH,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACzB,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,UAAU,KAAK,IAAI,IAAI,UAAU,KAAK,SAAS,IAAI,OAAO,UAAU,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChG,MAAM,IAAI,KAAK,CAAC,uEAAuE,CAAC,CAAC;4BAC3F,CAAC;4BACD,EAAE,CAAC,CAAC,UAAU,KAAK,IAAI,IAAI,UAAU,KAAK,SAAS,IAAI,OAAO,UAAU,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChG,MAAM,IAAI,KAAK,CAAC,uEAAuE,CAAC,CAAC;4BAC3F,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;wBAC9B,UAAU,GAAG,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,cAAc,CAAC;wBAC/E,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,cAAc,EAAE,UAAU,CAAC,CAAC;wBACxD,gBAAgB,GAAe,EAAE,CAAC;wBACtC,gBAAgB,CAAC,IAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC,UAAU,CAAC,CAAC,CAAC;wBACvE,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAChC,UAAU,IAAI,GAAG,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACjD,CAAC;wBAGG,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,MAAM,CAAC;wBAC5B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;;;;wBAIgB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,IAAI,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACzC,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBACD,YAAY,CAAC,UAAU,GAAG,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC;;;;wBAG/C,sBAAO,OAAO,CAAC,MAAM,CAAC,MAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAGD;;;;;;;;;;;;;;;;OAgBG;IACG,uDAAmC,GAAzC,UAA0C,UAAkB,EAAE,UAAkB,EAAE,OAAmC;;;;;;wBAC/G,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;;;;wBAIP,qBAAM,IAAI,CAAC,wCAAwC,CAAC,UAAU,EAAE,UAAU,EAAE,OAAO,CAAC;;wBAApG,aAAa,GAAG,SAAoF,CAAC;;;;wBAErG,sBAAO,OAAO,CAAC,MAAM,CAAC,MAAG,CAAC,EAAC;;;wBAIZ,qBAAM,MAAM,CAAC,6BAA6B,CAAC,aAAa,EAAE,OAAO,CAAC;;wBAAjF,YAAY,GAAG,SAAkE,CAAC;;;;wBAIlF,sBAAO,OAAO,CAAC,MAAM,CAAC,MAAG,CAAC,EAAC;4BAE7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAGD;;;;;;;;;;;;;;;;;;OAkBG;IACG,+DAA2C,GAAjD,UAAkD,UAAkB,EAAE,UAAkB,EAAE,UAAkC,EAAE,OAAmC;;;;;;wBAC3J,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;;;;wBAIP,qBAAM,IAAI,CAAC,gDAAgD,CAAC,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,OAAO,CAAC;;wBAAxH,aAAa,GAAG,SAAwG,CAAC;;;;wBAEzH,sBAAO,OAAO,CAAC,MAAM,CAAC,MAAG,CAAC,EAAC;;;wBAIZ,qBAAM,MAAM,CAAC,6BAA6B,CAAC,aAAa,EAAE,OAAO,CAAC;;wBAAjF,YAAY,GAAG,SAAkE,CAAC;wBAC9E,WAAW,GAAG,YAAY,CAAC,OAAO,CAAC;wBACnC,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBAGjC,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;wBACvE,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;gCACxD,YAAY,GAAG,gEAAuB,CAAC;gCAC3C,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;4BACnH,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACX,oBAAoB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;4BAC1I,oBAAoB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BAChE,oBAAoB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC/D,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAC;wBAC9C,CAAC;;;;wBAED,sBAAO,OAAO,CAAC,MAAM,CAAC,MAAG,CAAC,EAAC;4BAE7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAGD;;;;;;;;;;;;;;;;;;OAkBG;IACG,uDAAmC,GAAzC,UAA0C,UAAkB,EAAE,UAAkB,EAAE,UAAkC,EAAE,OAAmC;;;;;;wBACnJ,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;;;;wBAIP,qBAAM,IAAI,CAAC,wCAAwC,CAAC,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,OAAO,CAAC;;wBAAhH,aAAa,GAAG,SAAgG,CAAC;;;;wBAEjH,sBAAO,OAAO,CAAC,MAAM,CAAC,MAAG,CAAC,EAAC;;;wBAIZ,qBAAM,MAAM,CAAC,6BAA6B,CAAC,aAAa,EAAE,OAAO,CAAC;;wBAAjF,YAAY,GAAG,SAAkE,CAAC;wBAC9E,WAAW,GAAG,YAAY,CAAC,OAAO,CAAC;wBACnC,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBAGjC,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;wBACvE,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;gCACxD,YAAY,GAAG,gEAAuB,CAAC;gCAC3C,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;4BACnH,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACX,oBAAoB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;4BAC1I,oBAAoB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BAChE,oBAAoB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC/D,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAC;wBAC9C,CAAC;;;;wBAED,sBAAO,OAAO,CAAC,MAAM,CAAC,MAAG,CAAC,EAAC;4BAE7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAED;;;;;;;;;;;;;;;;OAgBG;IACG,oDAAgC,GAAtC,UAAuC,UAAkB,EAAE,UAAkB,EAAE,OAAmC;;;;;;wBAC5G,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACzB,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,UAAU,KAAK,IAAI,IAAI,UAAU,KAAK,SAAS,IAAI,OAAO,UAAU,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChG,MAAM,IAAI,KAAK,CAAC,uEAAuE,CAAC,CAAC;4BAC3F,CAAC;4BACD,EAAE,CAAC,CAAC,UAAU,KAAK,IAAI,IAAI,UAAU,KAAK,SAAS,IAAI,OAAO,UAAU,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChG,MAAM,IAAI,KAAK,CAAC,uEAAuE,CAAC,CAAC;4BAC3F,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;wBAC9B,UAAU,GAAG,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,cAAc,CAAC;wBAC/E,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,cAAc,EAAE,UAAU,CAAC,CAAC;wBACxD,gBAAgB,GAAe,EAAE,CAAC;wBACtC,gBAAgB,CAAC,IAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC,UAAU,CAAC,CAAC,CAAC;wBACvE,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAChC,UAAU,IAAI,GAAG,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACjD,CAAC;wBAGG,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,KAAK,CAAC;wBAC3B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;;;;wBAIgB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBACD,uBAAuB;wBACvB,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;4BACvE,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;oCACxD,YAAY,GAAG,gEAAuB,CAAC;oCAC3C,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;gCACnH,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACX,oBAAoB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;gCAC1I,oBAAoB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;gCAChE,oBAAoB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;gCAC/D,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAC;4BAC9C,CAAC;wBACH,CAAC;;;;wBAGD,sBAAO,OAAO,CAAC,MAAM,CAAC,MAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAED;;;;;;;;;;;;;;;;;;;;;OAqBG;IACG,+DAA2C,GAAjD,UAAkD,uBAA+B,EAAE,UAAoC,EAAE,OAAmC;;;;;;wBACtJ,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACzB,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,uBAAuB,KAAK,IAAI,IAAI,uBAAuB,KAAK,SAAS,IAAI,OAAO,uBAAuB,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACvI,MAAM,IAAI,KAAK,CAAC,oFAAoF,CAAC,CAAC;4BACxG,CAAC;4BACD,EAAE,CAAC,CAAC,uBAAuB,KAAK,IAAI,IAAI,uBAAuB,KAAK,SAAS,CAAC,CAAC,CAAC;gCAC9E,EAAE,CAAC,CAAC,uBAAuB,CAAC,MAAM,GAAG,EAAE,CAAC,CACxC,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,2EAA2E,CAAC,CAAC;gCAC/F,CAAC;gCACD,EAAE,CAAC,CAAC,uBAAuB,CAAC,MAAM,GAAG,CAAC,CAAC,CACvC,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,0EAA0E,CAAC,CAAC;gCAC9F,CAAC;gCACD,EAAE,CAAC,CAAC,uBAAuB,CAAC,KAAK,CAAC,iBAAiB,CAAC,KAAK,IAAI,CAAC,CAC9D,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,wFAAwF,CAAC,CAAC;gCAC5G,CAAC;4BACH,CAAC;4BACD,EAAE,CAAC,CAAC,UAAU,KAAK,IAAI,IAAI,UAAU,KAAK,SAAS,CAAC,CAAC,CAAC;gCACpD,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;4BAC7D,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACpI,MAAM,IAAI,KAAK,CAAC,mFAAmF,CAAC,CAAC;4BACvG,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,uFAAuF,CAAC,CAAC;4BAC3G,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;wBAC9B,UAAU,GAAG,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,uFAAuF,CAAC;wBACxJ,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,2BAA2B,EAAE,kBAAkB,CAAC,uBAAuB,CAAC,CAAC,CAAC;wBAC1G,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;wBAChG,gBAAgB,GAAe,EAAE,CAAC;wBACtC,gBAAgB,CAAC,IAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;wBACnF,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAChC,UAAU,IAAI,GAAG,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACjD,CAAC;wBAGG,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,MAAM,CAAC;wBAC5B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;wBAEG,cAAc,GAAG,IAAI,CAAC;wBACtB,YAAY,GAAG,IAAI,CAAC;wBACxB,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,UAAU,KAAK,IAAI,IAAI,UAAU,KAAK,SAAS,CAAC,CAAC,CAAC;gCAChD,kBAAkB,GAAG,kEAAyB,CAAC;gCACnD,YAAY,GAAG,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,kBAAkB,EAAE,UAAU,EAAE,YAAY,CAAC,CAAC;gCACzF,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;4BAChD,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACX,kBAAkB,GAAG,IAAI,KAAK,CAAC,aAAU,KAAK,CAAC,OAAO,oCAAgC;iCACtF,eAAa,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC,MAAG,EAAC,CAAC;4BACzD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,kBAAkB,CAAC,EAAC;wBAC5C,CAAC;wBACD,WAAW,CAAC,IAAI,GAAG,cAAc,CAAC;;;;wBAIjB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,IAAI,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACzC,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;;;;wBAGD,sBAAO,OAAO,CAAC,MAAM,CAAC,MAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAED;;;;;;;;;;;;;;;;;;;;;;;;OAwBG;IACG,uEAAmD,GAAzD,UAA0D,uBAA+B,EAAE,UAAoC,EAAE,OAAmC;;;;;;wBAC9J,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACzB,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,uBAAuB,KAAK,IAAI,IAAI,uBAAuB,KAAK,SAAS,IAAI,OAAO,uBAAuB,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACvI,MAAM,IAAI,KAAK,CAAC,oFAAoF,CAAC,CAAC;4BACxG,CAAC;4BACD,EAAE,CAAC,CAAC,uBAAuB,KAAK,IAAI,IAAI,uBAAuB,KAAK,SAAS,CAAC,CAAC,CAAC;gCAC9E,EAAE,CAAC,CAAC,uBAAuB,CAAC,MAAM,GAAG,EAAE,CAAC,CACxC,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,2EAA2E,CAAC,CAAC;gCAC/F,CAAC;gCACD,EAAE,CAAC,CAAC,uBAAuB,CAAC,MAAM,GAAG,CAAC,CAAC,CACvC,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,0EAA0E,CAAC,CAAC;gCAC9F,CAAC;gCACD,EAAE,CAAC,CAAC,uBAAuB,CAAC,KAAK,CAAC,iBAAiB,CAAC,KAAK,IAAI,CAAC,CAC9D,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,wFAAwF,CAAC,CAAC;gCAC5G,CAAC;4BACH,CAAC;4BACD,EAAE,CAAC,CAAC,UAAU,KAAK,IAAI,IAAI,UAAU,KAAK,SAAS,CAAC,CAAC,CAAC;gCACpD,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;4BAC7D,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACpI,MAAM,IAAI,KAAK,CAAC,mFAAmF,CAAC,CAAC;4BACvG,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,uFAAuF,CAAC,CAAC;4BAC3G,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;wBAC9B,UAAU,GAAG,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,+FAA+F,CAAC;wBAChK,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,2BAA2B,EAAE,kBAAkB,CAAC,uBAAuB,CAAC,CAAC,CAAC;wBAC1G,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;wBAChG,gBAAgB,GAAe,EAAE,CAAC;wBACtC,gBAAgB,CAAC,IAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;wBACnF,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAChC,UAAU,IAAI,GAAG,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACjD,CAAC;wBAGG,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,MAAM,CAAC;wBAC5B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;wBAEG,cAAc,GAAG,IAAI,CAAC;wBACtB,YAAY,GAAG,IAAI,CAAC;wBACxB,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,UAAU,KAAK,IAAI,IAAI,UAAU,KAAK,SAAS,CAAC,CAAC,CAAC;gCAChD,kBAAkB,GAAG,kEAAyB,CAAC;gCACnD,YAAY,GAAG,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,kBAAkB,EAAE,UAAU,EAAE,YAAY,CAAC,CAAC;gCACzF,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;4BAChD,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACX,kBAAkB,GAAG,IAAI,KAAK,CAAC,aAAU,KAAK,CAAC,OAAO,oCAAgC;iCACtF,eAAa,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC,MAAG,EAAC,CAAC;4BACzD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,kBAAkB,CAAC,EAAC;wBAC5C,CAAC;wBACD,WAAW,CAAC,IAAI,GAAG,cAAc,CAAC;;;;wBAIjB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,IAAI,UAAU,KAAK,GAAG,IAAI,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BAC/D,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;;;;wBAGD,sBAAO,OAAO,CAAC,MAAM,CAAC,MAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAED;;;;;;;;;;;;;;;;;;;;;;;;OAwBG;IACG,8DAA0C,GAAhD,UAAiD,iBAAyB,EAAE,yBAAiC,EAAE,kBAA0B,EAAE,YAAoB,EAAE,YAAoB,EAAE,UAAkB,EAAE,OAAmC;;;;;;wBACxO,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACzB,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,iBAAiB,KAAK,IAAI,IAAI,iBAAiB,KAAK,SAAS,IAAI,OAAO,iBAAiB,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACrH,MAAM,IAAI,KAAK,CAAC,8EAA8E,CAAC,CAAC;4BAClG,CAAC;4BACD,EAAE,CAAC,CAAC,iBAAiB,KAAK,IAAI,IAAI,iBAAiB,KAAK,SAAS,CAAC,CAAC,CAAC;gCAClE,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,EAAE,CAAC,CAClC,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,qEAAqE,CAAC,CAAC;gCACzF,CAAC;gCACD,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC,CACjC,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,oEAAoE,CAAC,CAAC;gCACxF,CAAC;gCACD,EAAE,CAAC,CAAC,iBAAiB,CAAC,KAAK,CAAC,iBAAiB,CAAC,KAAK,IAAI,CAAC,CACxD,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,kFAAkF,CAAC,CAAC;gCACtG,CAAC;4BACH,CAAC;4BACD,EAAE,CAAC,CAAC,yBAAyB,KAAK,IAAI,IAAI,yBAAyB,KAAK,SAAS,IAAI,OAAO,yBAAyB,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAC7I,MAAM,IAAI,KAAK,CAAC,sFAAsF,CAAC,CAAC;4BAC1G,CAAC;4BACD,EAAE,CAAC,CAAC,kBAAkB,KAAK,IAAI,IAAI,kBAAkB,KAAK,SAAS,IAAI,OAAO,kBAAkB,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACxH,MAAM,IAAI,KAAK,CAAC,+EAA+E,CAAC,CAAC;4BACnG,CAAC;4BACD,EAAE,CAAC,CAAC,YAAY,KAAK,IAAI,IAAI,YAAY,KAAK,SAAS,IAAI,OAAO,YAAY,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACtG,MAAM,IAAI,KAAK,CAAC,yEAAyE,CAAC,CAAC;4BAC7F,CAAC;4BACD,EAAE,CAAC,CAAC,YAAY,KAAK,IAAI,IAAI,YAAY,KAAK,SAAS,IAAI,OAAO,YAAY,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACtG,MAAM,IAAI,KAAK,CAAC,yEAAyE,CAAC,CAAC;4BAC7F,CAAC;4BACD,EAAE,CAAC,CAAC,UAAU,KAAK,IAAI,IAAI,UAAU,KAAK,SAAS,IAAI,OAAO,UAAU,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChG,MAAM,IAAI,KAAK,CAAC,uEAAuE,CAAC,CAAC;4BAC3F,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,uFAAuF,CAAC,CAAC;4BAC3G,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;wBAC9B,UAAU,GAAG,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,4JAA4J,CAAC;wBAC7N,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,qBAAqB,EAAE,kBAAkB,CAAC,iBAAiB,CAAC,CAAC,CAAC;wBAC9F,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,6BAA6B,EAAE,kBAAkB,CAAC,yBAAyB,CAAC,CAAC,CAAC;wBAC9G,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,sBAAsB,EAAE,kBAAkB,CAAC,CAAC;wBAC5E,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,gBAAgB,EAAE,YAAY,CAAC,CAAC;wBAChE,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,gBAAgB,EAAE,kBAAkB,CAAC,YAAY,CAAC,CAAC,CAAC;wBACpF,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;wBAChG,gBAAgB,GAAe,EAAE,CAAC;wBACtC,gBAAgB,CAAC,IAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC,UAAU,CAAC,CAAC,CAAC;wBACvE,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAChC,UAAU,IAAI,GAAG,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACjD,CAAC;wBAGG,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,QAAQ,CAAC;wBAC9B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;;;;wBAIgB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,IAAI,UAAU,KAAK,GAAG,IAAI,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BAC/D,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;;;;wBAGD,sBAAO,OAAO,CAAC,MAAM,CAAC,MAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;OA2BG;IACG,gEAA4C,GAAlD,UAAmD,iBAAyB,EAAE,yBAAiC,EAAE,kBAA0B,EAAE,YAAoB,EAAE,YAAoB,EAAE,UAAkB,EAAE,UAAkC,EAAE,OAAmC;;;;;;wBAC9Q,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACzB,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,iBAAiB,KAAK,IAAI,IAAI,iBAAiB,KAAK,SAAS,IAAI,OAAO,iBAAiB,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACrH,MAAM,IAAI,KAAK,CAAC,8EAA8E,CAAC,CAAC;4BAClG,CAAC;4BACD,EAAE,CAAC,CAAC,iBAAiB,KAAK,IAAI,IAAI,iBAAiB,KAAK,SAAS,CAAC,CAAC,CAAC;gCAClE,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,EAAE,CAAC,CAClC,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,qEAAqE,CAAC,CAAC;gCACzF,CAAC;gCACD,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC,CACjC,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,oEAAoE,CAAC,CAAC;gCACxF,CAAC;gCACD,EAAE,CAAC,CAAC,iBAAiB,CAAC,KAAK,CAAC,iBAAiB,CAAC,KAAK,IAAI,CAAC,CACxD,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,kFAAkF,CAAC,CAAC;gCACtG,CAAC;4BACH,CAAC;4BACD,EAAE,CAAC,CAAC,yBAAyB,KAAK,IAAI,IAAI,yBAAyB,KAAK,SAAS,IAAI,OAAO,yBAAyB,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAC7I,MAAM,IAAI,KAAK,CAAC,sFAAsF,CAAC,CAAC;4BAC1G,CAAC;4BACD,EAAE,CAAC,CAAC,kBAAkB,KAAK,IAAI,IAAI,kBAAkB,KAAK,SAAS,IAAI,OAAO,kBAAkB,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACxH,MAAM,IAAI,KAAK,CAAC,+EAA+E,CAAC,CAAC;4BACnG,CAAC;4BACD,EAAE,CAAC,CAAC,YAAY,KAAK,IAAI,IAAI,YAAY,KAAK,SAAS,IAAI,OAAO,YAAY,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACtG,MAAM,IAAI,KAAK,CAAC,yEAAyE,CAAC,CAAC;4BAC7F,CAAC;4BACD,EAAE,CAAC,CAAC,YAAY,KAAK,IAAI,IAAI,YAAY,KAAK,SAAS,IAAI,OAAO,YAAY,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACtG,MAAM,IAAI,KAAK,CAAC,yEAAyE,CAAC,CAAC;4BAC7F,CAAC;4BACD,EAAE,CAAC,CAAC,UAAU,KAAK,IAAI,IAAI,UAAU,KAAK,SAAS,IAAI,OAAO,UAAU,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChG,MAAM,IAAI,KAAK,CAAC,uEAAuE,CAAC,CAAC;4BAC3F,CAAC;4BACD,EAAE,CAAC,CAAC,UAAU,KAAK,IAAI,IAAI,UAAU,KAAK,SAAS,CAAC,CAAC,CAAC;gCACpD,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;4BAC7D,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,uFAAuF,CAAC,CAAC;4BAC3G,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;wBAC9B,UAAU,GAAG,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,4JAA4J,CAAC;wBAC7N,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,qBAAqB,EAAE,kBAAkB,CAAC,iBAAiB,CAAC,CAAC,CAAC;wBAC9F,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,6BAA6B,EAAE,kBAAkB,CAAC,yBAAyB,CAAC,CAAC,CAAC;wBAC9G,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,sBAAsB,EAAE,kBAAkB,CAAC,CAAC;wBAC5E,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,gBAAgB,EAAE,YAAY,CAAC,CAAC;wBAChE,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,gBAAgB,EAAE,kBAAkB,CAAC,YAAY,CAAC,CAAC,CAAC;wBACpF,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;wBAChG,gBAAgB,GAAe,EAAE,CAAC;wBACtC,gBAAgB,CAAC,IAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC,UAAU,CAAC,CAAC,CAAC;wBACvE,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAChC,UAAU,IAAI,GAAG,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACjD,CAAC;wBAGG,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,KAAK,CAAC;wBAC3B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;wBAEG,cAAc,GAAG,IAAI,CAAC;wBACtB,YAAY,GAAG,IAAI,CAAC;wBACxB,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,UAAU,KAAK,IAAI,IAAI,UAAU,KAAK,SAAS,CAAC,CAAC,CAAC;gCAChD,kBAAkB,GAAG,gEAAuB,CAAC;gCACjD,YAAY,GAAG,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,kBAAkB,EAAE,UAAU,EAAE,YAAY,CAAC,CAAC;gCACzF,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;4BAChD,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACX,kBAAkB,GAAG,IAAI,KAAK,CAAC,aAAU,KAAK,CAAC,OAAO,oCAAgC;iCACtF,eAAa,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC,MAAG,EAAC,CAAC;4BACzD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,kBAAkB,CAAC,EAAC;wBAC5C,CAAC;wBACD,WAAW,CAAC,IAAI,GAAG,cAAc,CAAC;;;;wBAIjB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,IAAI,UAAU,KAAK,GAAG,IAAI,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BAC/D,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBACD,uBAAuB;wBACvB,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;4BACvE,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;oCACxD,YAAY,GAAG,gEAAuB,CAAC;oCAC3C,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;gCACnH,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACX,oBAAoB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;gCAC1I,oBAAoB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;gCAChE,oBAAoB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;gCAC/D,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAC;4BAC9C,CAAC;wBACH,CAAC;wBACD,uBAAuB;wBACvB,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;4BACvE,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;oCACxD,YAAY,GAAG,gEAAuB,CAAC;oCAC3C,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;gCACnH,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACX,qBAAqB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;gCAC3I,qBAAqB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;gCACjE,qBAAqB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;gCAChE,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,qBAAqB,CAAC,EAAC;4BAC/C,CAAC;wBACH,CAAC;;;;wBAGD,sBAAO,OAAO,CAAC,MAAM,CAAC,MAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;OA0BG;IACG,wDAAoC,GAA1C,UAA2C,iBAAyB,EAAE,yBAAiC,EAAE,kBAA0B,EAAE,YAAoB,EAAE,YAAoB,EAAE,UAAkB,EAAE,UAAkC,EAAE,OAAmC;;;;;;wBACtQ,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACzB,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,iBAAiB,KAAK,IAAI,IAAI,iBAAiB,KAAK,SAAS,IAAI,OAAO,iBAAiB,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACrH,MAAM,IAAI,KAAK,CAAC,8EAA8E,CAAC,CAAC;4BAClG,CAAC;4BACD,EAAE,CAAC,CAAC,iBAAiB,KAAK,IAAI,IAAI,iBAAiB,KAAK,SAAS,CAAC,CAAC,CAAC;gCAClE,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,EAAE,CAAC,CAClC,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,qEAAqE,CAAC,CAAC;gCACzF,CAAC;gCACD,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC,CACjC,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,oEAAoE,CAAC,CAAC;gCACxF,CAAC;gCACD,EAAE,CAAC,CAAC,iBAAiB,CAAC,KAAK,CAAC,iBAAiB,CAAC,KAAK,IAAI,CAAC,CACxD,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,kFAAkF,CAAC,CAAC;gCACtG,CAAC;4BACH,CAAC;4BACD,EAAE,CAAC,CAAC,yBAAyB,KAAK,IAAI,IAAI,yBAAyB,KAAK,SAAS,IAAI,OAAO,yBAAyB,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAC7I,MAAM,IAAI,KAAK,CAAC,sFAAsF,CAAC,CAAC;4BAC1G,CAAC;4BACD,EAAE,CAAC,CAAC,kBAAkB,KAAK,IAAI,IAAI,kBAAkB,KAAK,SAAS,IAAI,OAAO,kBAAkB,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACxH,MAAM,IAAI,KAAK,CAAC,+EAA+E,CAAC,CAAC;4BACnG,CAAC;4BACD,EAAE,CAAC,CAAC,YAAY,KAAK,IAAI,IAAI,YAAY,KAAK,SAAS,IAAI,OAAO,YAAY,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACtG,MAAM,IAAI,KAAK,CAAC,yEAAyE,CAAC,CAAC;4BAC7F,CAAC;4BACD,EAAE,CAAC,CAAC,YAAY,KAAK,IAAI,IAAI,YAAY,KAAK,SAAS,IAAI,OAAO,YAAY,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACtG,MAAM,IAAI,KAAK,CAAC,yEAAyE,CAAC,CAAC;4BAC7F,CAAC;4BACD,EAAE,CAAC,CAAC,UAAU,KAAK,IAAI,IAAI,UAAU,KAAK,SAAS,IAAI,OAAO,UAAU,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChG,MAAM,IAAI,KAAK,CAAC,uEAAuE,CAAC,CAAC;4BAC3F,CAAC;4BACD,EAAE,CAAC,CAAC,UAAU,KAAK,IAAI,IAAI,UAAU,KAAK,SAAS,CAAC,CAAC,CAAC;gCACpD,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;4BAC7D,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,uFAAuF,CAAC,CAAC;4BAC3G,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;wBAC9B,UAAU,GAAG,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,4JAA4J,CAAC;wBAC7N,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,qBAAqB,EAAE,kBAAkB,CAAC,iBAAiB,CAAC,CAAC,CAAC;wBAC9F,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,6BAA6B,EAAE,kBAAkB,CAAC,yBAAyB,CAAC,CAAC,CAAC;wBAC9G,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,sBAAsB,EAAE,kBAAkB,CAAC,CAAC;wBAC5E,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,gBAAgB,EAAE,YAAY,CAAC,CAAC;wBAChE,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,gBAAgB,EAAE,kBAAkB,CAAC,YAAY,CAAC,CAAC,CAAC;wBACpF,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;wBAChG,gBAAgB,GAAe,EAAE,CAAC;wBACtC,gBAAgB,CAAC,IAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC,UAAU,CAAC,CAAC,CAAC;wBACvE,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAChC,UAAU,IAAI,GAAG,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACjD,CAAC;wBAGG,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,OAAO,CAAC;wBAC7B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;wBAEG,cAAc,GAAG,IAAI,CAAC;wBACtB,YAAY,GAAG,IAAI,CAAC;wBACxB,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,UAAU,KAAK,IAAI,IAAI,UAAU,KAAK,SAAS,CAAC,CAAC,CAAC;gCAChD,kBAAkB,GAAG,gEAAuB,CAAC;gCACjD,YAAY,GAAG,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,kBAAkB,EAAE,UAAU,EAAE,YAAY,CAAC,CAAC;gCACzF,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;4BAChD,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACX,kBAAkB,GAAG,IAAI,KAAK,CAAC,aAAU,KAAK,CAAC,OAAO,oCAAgC;iCACtF,eAAa,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC,MAAG,EAAC,CAAC;4BACzD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,kBAAkB,CAAC,EAAC;wBAC5C,CAAC;wBACD,WAAW,CAAC,IAAI,GAAG,cAAc,CAAC;;;;wBAIjB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,IAAI,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACzC,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBACD,uBAAuB;wBACvB,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;4BACvE,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;oCACxD,YAAY,GAAG,gEAAuB,CAAC;oCAC3C,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;gCACnH,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACX,oBAAoB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;gCAC1I,oBAAoB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;gCAChE,oBAAoB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;gCAC/D,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAC;4BAC9C,CAAC;wBACH,CAAC;;;;wBAGD,sBAAO,OAAO,CAAC,MAAM,CAAC,MAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAED;;;;;;;;;;;;;;;;OAgBG;IACG,4DAAwC,GAA9C,UAA+C,UAAkB,EAAE,UAAkB,EAAE,OAAmC;;;;;;wBACpH,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACzB,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,UAAU,KAAK,IAAI,IAAI,UAAU,KAAK,SAAS,IAAI,OAAO,UAAU,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChG,MAAM,IAAI,KAAK,CAAC,uEAAuE,CAAC,CAAC;4BAC3F,CAAC;4BACD,EAAE,CAAC,CAAC,UAAU,KAAK,IAAI,IAAI,UAAU,KAAK,SAAS,IAAI,OAAO,UAAU,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChG,MAAM,IAAI,KAAK,CAAC,uEAAuE,CAAC,CAAC;4BAC3F,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;wBAC9B,UAAU,GAAG,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,cAAc,CAAC;wBAC/E,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,cAAc,EAAE,UAAU,CAAC,CAAC;wBACxD,gBAAgB,GAAe,EAAE,CAAC;wBACtC,gBAAgB,CAAC,IAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC,UAAU,CAAC,CAAC,CAAC;wBACvE,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAChC,UAAU,IAAI,GAAG,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACjD,CAAC;wBAGG,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,QAAQ,CAAC;wBAC9B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;;;;wBAIgB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,IAAI,UAAU,KAAK,GAAG,IAAI,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BAC/D,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;;;;wBAGD,sBAAO,OAAO,CAAC,MAAM,CAAC,MAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAED;;;;;;;;;;;;;;;;;;OAkBG;IACG,oEAAgD,GAAtD,UAAuD,UAAkB,EAAE,UAAkB,EAAE,UAAkC,EAAE,OAAmC;;;;;;wBAChK,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACzB,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,UAAU,KAAK,IAAI,IAAI,UAAU,KAAK,SAAS,IAAI,OAAO,UAAU,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChG,MAAM,IAAI,KAAK,CAAC,uEAAuE,CAAC,CAAC;4BAC3F,CAAC;4BACD,EAAE,CAAC,CAAC,UAAU,KAAK,IAAI,IAAI,UAAU,KAAK,SAAS,IAAI,OAAO,UAAU,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChG,MAAM,IAAI,KAAK,CAAC,uEAAuE,CAAC,CAAC;4BAC3F,CAAC;4BACD,EAAE,CAAC,CAAC,UAAU,KAAK,IAAI,IAAI,UAAU,KAAK,SAAS,CAAC,CAAC,CAAC;gCACpD,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;4BAC7D,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;wBAC9B,UAAU,GAAG,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,cAAc,CAAC;wBAC/E,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,cAAc,EAAE,UAAU,CAAC,CAAC;wBACxD,gBAAgB,GAAe,EAAE,CAAC;wBACtC,gBAAgB,CAAC,IAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC,UAAU,CAAC,CAAC,CAAC;wBACvE,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAChC,UAAU,IAAI,GAAG,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACjD,CAAC;wBAGG,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,KAAK,CAAC;wBAC3B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;wBAEG,cAAc,GAAG,IAAI,CAAC;wBACtB,YAAY,GAAG,IAAI,CAAC;wBACxB,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,UAAU,KAAK,IAAI,IAAI,UAAU,KAAK,SAAS,CAAC,CAAC,CAAC;gCAChD,kBAAkB,GAAG,gEAAuB,CAAC;gCACjD,YAAY,GAAG,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,kBAAkB,EAAE,UAAU,EAAE,YAAY,CAAC,CAAC;gCACzF,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;4BAChD,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACX,kBAAkB,GAAG,IAAI,KAAK,CAAC,aAAU,KAAK,CAAC,OAAO,oCAAgC;iCACtF,eAAa,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC,MAAG,EAAC,CAAC;4BACzD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,kBAAkB,CAAC,EAAC;wBAC5C,CAAC;wBACD,WAAW,CAAC,IAAI,GAAG,cAAc,CAAC;;;;wBAIjB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,IAAI,UAAU,KAAK,GAAG,IAAI,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BAC/D,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBACD,uBAAuB;wBACvB,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;4BACvE,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;oCACxD,YAAY,GAAG,gEAAuB,CAAC;oCAC3C,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;gCACnH,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACX,oBAAoB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;gCAC1I,oBAAoB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;gCAChE,oBAAoB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;gCAC/D,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAC;4BAC9C,CAAC;wBACH,CAAC;wBACD,uBAAuB;wBACvB,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;4BACvE,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;oCACxD,YAAY,GAAG,gEAAuB,CAAC;oCAC3C,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;gCACnH,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACX,qBAAqB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;gCAC3I,qBAAqB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;gCACjE,qBAAqB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;gCAChE,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,qBAAqB,CAAC,EAAC;4BAC/C,CAAC;wBACH,CAAC;;;;wBAGD,sBAAO,OAAO,CAAC,MAAM,CAAC,MAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAED;;;;;;;;;;;;;;;;;;OAkBG;IACG,4DAAwC,GAA9C,UAA+C,UAAkB,EAAE,UAAkB,EAAE,UAAkC,EAAE,OAAmC;;;;;;wBACxJ,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACzB,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,UAAU,KAAK,IAAI,IAAI,UAAU,KAAK,SAAS,IAAI,OAAO,UAAU,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChG,MAAM,IAAI,KAAK,CAAC,uEAAuE,CAAC,CAAC;4BAC3F,CAAC;4BACD,EAAE,CAAC,CAAC,UAAU,KAAK,IAAI,IAAI,UAAU,KAAK,SAAS,IAAI,OAAO,UAAU,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChG,MAAM,IAAI,KAAK,CAAC,uEAAuE,CAAC,CAAC;4BAC3F,CAAC;4BACD,EAAE,CAAC,CAAC,UAAU,KAAK,IAAI,IAAI,UAAU,KAAK,SAAS,CAAC,CAAC,CAAC;gCACpD,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;4BAC7D,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;wBAC9B,UAAU,GAAG,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,cAAc,CAAC;wBAC/E,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,cAAc,EAAE,UAAU,CAAC,CAAC;wBACxD,gBAAgB,GAAe,EAAE,CAAC;wBACtC,gBAAgB,CAAC,IAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC,UAAU,CAAC,CAAC,CAAC;wBACvE,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAChC,UAAU,IAAI,GAAG,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACjD,CAAC;wBAGG,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,OAAO,CAAC;wBAC7B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;wBAEG,cAAc,GAAG,IAAI,CAAC;wBACtB,YAAY,GAAG,IAAI,CAAC;wBACxB,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,UAAU,KAAK,IAAI,IAAI,UAAU,KAAK,SAAS,CAAC,CAAC,CAAC;gCAChD,kBAAkB,GAAG,gEAAuB,CAAC;gCACjD,YAAY,GAAG,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,kBAAkB,EAAE,UAAU,EAAE,YAAY,CAAC,CAAC;gCACzF,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;4BAChD,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACX,kBAAkB,GAAG,IAAI,KAAK,CAAC,aAAU,KAAK,CAAC,OAAO,oCAAgC;iCACtF,eAAa,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC,MAAG,EAAC,CAAC;4BACzD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,kBAAkB,CAAC,EAAC;wBAC5C,CAAC;wBACD,WAAW,CAAC,IAAI,GAAG,cAAc,CAAC;;;;wBAIjB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,IAAI,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACzC,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBACD,uBAAuB;wBACvB,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;4BACvE,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;oCACxD,YAAY,GAAG,gEAAuB,CAAC;oCAC3C,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;gCACnH,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACX,oBAAoB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;gCAC1I,oBAAoB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;gCAChE,oBAAoB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;gCAC/D,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAC;4BAC9C,CAAC;wBACH,CAAC;;;;wBAGD,sBAAO,OAAO,CAAC,MAAM,CAAC,MAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAED;;;;;;;;;;;;;OAaG;IACG,oEAAgD,GAAtD,UAAuD,YAAoB,EAAE,OAAmC;;;;;;wBAC1G,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACzB,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,YAAY,KAAK,IAAI,IAAI,YAAY,KAAK,SAAS,IAAI,OAAO,YAAY,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACtG,MAAM,IAAI,KAAK,CAAC,yEAAyE,CAAC,CAAC;4BAC7F,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,UAAU,GAAG,YAAY,CAAC;wBAC9B,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;wBAGxD,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,KAAK,CAAC;wBAC3B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;;;;wBAIgB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBACD,uBAAuB;wBACvB,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;4BACvE,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;oCACxD,YAAY,GAAG,mEAA0B,CAAC;oCAC9C,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;gCACnH,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACX,oBAAoB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;gCAC1I,oBAAoB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;gCAChE,oBAAoB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;gCAC/D,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAC;4BAC9C,CAAC;wBACH,CAAC;;;;wBAGD,sBAAO,OAAO,CAAC,MAAM,CAAC,MAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAED;;;;;;;;;;;;;OAaG;IACG,qDAAiC,GAAvC,UAAwC,YAAoB,EAAE,OAAmC;;;;;;wBAC3F,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACzB,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,YAAY,KAAK,IAAI,IAAI,YAAY,KAAK,SAAS,IAAI,OAAO,YAAY,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACtG,MAAM,IAAI,KAAK,CAAC,yEAAyE,CAAC,CAAC;4BAC7F,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,UAAU,GAAG,YAAY,CAAC;wBAC9B,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;wBAGxD,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,KAAK,CAAC;wBAC3B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;;;;wBAIgB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBACD,uBAAuB;wBACvB,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;4BACvE,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;oCACxD,YAAY,GAAG,mEAA0B,CAAC;oCAC9C,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;gCACnH,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACX,oBAAoB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;gCAC1I,oBAAoB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;gCAChE,oBAAoB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;gCAC/D,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAC;4BAC9C,CAAC;wBACH,CAAC;;;;wBAGD,sBAAO,OAAO,CAAC,MAAM,CAAC,MAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IA6BD,uCAAmB,GAAnB,UAAoB,iBAAyB,EAAE,OAA2D,EAAE,QAA4D;QACtK,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAA6D,CAAC;QACvE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,4CAA4C,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBACnI,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAuC,CAAC,CAAC;YAC/E,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,4CAA4C,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBACrJ,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAuC,CAAC;gBAC1D,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAkCD,iCAAa,GAAb,UAAc,uBAA+B,EAAE,UAAoC,EAAE,OAAmC,EAAE,QAAuC;QAC/J,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAAwC,CAAC;QAClD,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,sCAAsC,CAAC,uBAAuB,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBAC/I,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAkB,CAAC,CAAC;YAC1D,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,sCAAsC,CAAC,uBAAuB,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBACjK,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAkB,CAAC;gBACrC,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAqCD,yCAAqB,GAArB,UAAsB,uBAA+B,EAAE,UAAoC,EAAE,OAAmC,EAAE,QAAuC;QACvK,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAAwC,CAAC;QAClD,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,8CAA8C,CAAC,uBAAuB,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBACvJ,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAkB,CAAC,CAAC;YAC1D,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,8CAA8C,CAAC,uBAAuB,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBACzK,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAkB,CAAC;gBACrC,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAyBD,wBAAI,GAAJ,UAAK,OAA4C,EAAE,QAA4D;QAC7G,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAA6D,CAAC;QACvE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,6BAA6B,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBACjG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAuC,CAAC,CAAC;YAC/E,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,6BAA6B,CAAC,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBACnH,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAuC,CAAC;gBAC1D,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAsCD,kCAAc,GAAd,UAAe,iBAAyB,EAAE,yBAAiC,EAAE,kBAA0B,EAAE,YAAoB,EAAE,YAAoB,EAAE,UAAkB,EAAE,OAAmC,EAAE,QAA0C;QACtP,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAA2C,CAAC;QACrD,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,uCAAuC,CAAC,iBAAiB,EAAE,yBAAyB,EAAE,kBAAkB,EAAE,YAAY,EAAE,YAAY,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBACrN,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAqB,CAAC,CAAC;YAC7D,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,uCAAuC,CAAC,iBAAiB,EAAE,yBAAyB,EAAE,kBAAkB,EAAE,YAAY,EAAE,YAAY,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBACvO,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAqB,CAAC;gBACxC,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAqCD,gCAAY,GAAZ,UAAa,iBAAyB,EAAE,yBAAiC,EAAE,kBAA0B,EAAE,YAAoB,EAAE,YAAoB,EAAE,UAAkB,EAAE,OAAmC,EAAE,QAAuC;QACjP,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAAwC,CAAC;QAClD,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,qCAAqC,CAAC,iBAAiB,EAAE,yBAAyB,EAAE,kBAAkB,EAAE,YAAY,EAAE,YAAY,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBACnN,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAkB,CAAC,CAAC;YAC1D,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,qCAAqC,CAAC,iBAAiB,EAAE,yBAAyB,EAAE,kBAAkB,EAAE,YAAY,EAAE,YAAY,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBACrO,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAkB,CAAC;gBACrC,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IA0CD,kCAAc,GAAd,UAAe,iBAAyB,EAAE,yBAAiC,EAAE,kBAA0B,EAAE,YAAoB,EAAE,YAAoB,EAAE,UAAkB,EAAE,UAAkC,EAAE,OAAmC,EAAE,QAAyD;QACzS,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAA0D,CAAC;QACpE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,uCAAuC,CAAC,iBAAiB,EAAE,yBAAyB,EAAE,kBAAkB,EAAE,YAAY,EAAE,YAAY,EAAE,UAAU,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBACjO,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAoC,CAAC,CAAC;YAC5E,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,uCAAuC,CAAC,iBAAiB,EAAE,yBAAyB,EAAE,kBAAkB,EAAE,YAAY,EAAE,YAAY,EAAE,UAAU,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBACnP,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAoC,CAAC;gBACvD,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAyCD,0BAAM,GAAN,UAAO,iBAAyB,EAAE,yBAAiC,EAAE,kBAA0B,EAAE,YAAoB,EAAE,YAAoB,EAAE,UAAkB,EAAE,UAAkC,EAAE,OAAmC,EAAE,QAAyD;QACjS,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAA0D,CAAC;QACpE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,+BAA+B,CAAC,iBAAiB,EAAE,yBAAyB,EAAE,kBAAkB,EAAE,YAAY,EAAE,YAAY,EAAE,UAAU,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBACzN,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAoC,CAAC,CAAC;YAC5E,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,+BAA+B,CAAC,iBAAiB,EAAE,yBAAyB,EAAE,kBAAkB,EAAE,YAAY,EAAE,YAAY,EAAE,UAAU,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBAC3O,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAoC,CAAC;gBACvD,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAuCD,uBAAG,GAAH,UAAI,iBAAyB,EAAE,yBAAiC,EAAE,kBAA0B,EAAE,YAAoB,EAAE,YAAoB,EAAE,UAAkB,EAAE,OAAmC,EAAE,QAAyD;QAC1P,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAA0D,CAAC;QACpE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,4BAA4B,CAAC,iBAAiB,EAAE,yBAAyB,EAAE,kBAAkB,EAAE,YAAY,EAAE,YAAY,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBAC1M,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAoC,CAAC,CAAC;YAC5E,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,4BAA4B,CAAC,iBAAiB,EAAE,yBAAyB,EAAE,kBAAkB,EAAE,YAAY,EAAE,YAAY,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBAC5N,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAoC,CAAC;gBACvD,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IA6BD,sCAAkB,GAAlB,UAAmB,UAAkB,EAAE,UAAkB,EAAE,OAAmC,EAAE,QAA0C;QACxI,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAA2C,CAAC;QACrD,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,2CAA2C,CAAC,UAAU,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBACvI,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAqB,CAAC,CAAC;YAC7D,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,2CAA2C,CAAC,UAAU,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBACzJ,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAqB,CAAC;gBACxC,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IA6BD,8BAAU,GAAV,UAAW,UAAkB,EAAE,UAAkB,EAAE,OAAmC,EAAE,QAAuC;QAC7H,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAAwC,CAAC;QAClD,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,mCAAmC,CAAC,UAAU,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBAC/H,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAkB,CAAC,CAAC;YAC1D,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,mCAAmC,CAAC,UAAU,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBACjJ,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAkB,CAAC;gBACrC,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAiCD,sCAAkB,GAAlB,UAAmB,UAAkB,EAAE,UAAkB,EAAE,UAAkC,EAAE,OAAmC,EAAE,QAAyD;QAC3L,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAA0D,CAAC;QACpE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,2CAA2C,CAAC,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBACnJ,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAoC,CAAC,CAAC;YAC5E,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,2CAA2C,CAAC,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBACrK,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAoC,CAAC;gBACvD,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAiCD,8BAAU,GAAV,UAAW,UAAkB,EAAE,UAAkB,EAAE,UAAkC,EAAE,OAAmC,EAAE,QAAyD;QACnL,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAA0D,CAAC;QACpE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,mCAAmC,CAAC,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBAC3I,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAoC,CAAC,CAAC;YAC5E,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,mCAAmC,CAAC,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBAC7J,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAoC,CAAC;gBACvD,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IA+BD,2BAAO,GAAP,UAAQ,UAAkB,EAAE,UAAkB,EAAE,OAAmC,EAAE,QAAyD;QAC5I,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAA0D,CAAC;QACpE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,gCAAgC,CAAC,UAAU,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBAC5H,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAoC,CAAC,CAAC;YAC5E,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,gCAAgC,CAAC,UAAU,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBAC9I,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAoC,CAAC;gBACvD,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAkCD,sCAAkB,GAAlB,UAAmB,uBAA+B,EAAE,UAAoC,EAAE,OAAmC,EAAE,QAAuC;QACpK,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAAwC,CAAC;QAClD,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,2CAA2C,CAAC,uBAAuB,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBACpJ,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAkB,CAAC,CAAC;YAC1D,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,2CAA2C,CAAC,uBAAuB,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBACtK,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAkB,CAAC;gBACrC,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAqCD,8CAA0B,GAA1B,UAA2B,uBAA+B,EAAE,UAAoC,EAAE,OAAmC,EAAE,QAAuC;QAC5K,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAAwC,CAAC;QAClD,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,mDAAmD,CAAC,uBAAuB,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBAC5J,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAkB,CAAC,CAAC;YAC1D,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,mDAAmD,CAAC,uBAAuB,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBAC9K,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAkB,CAAC;gBACrC,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAqCD,qCAAiB,GAAjB,UAAkB,iBAAyB,EAAE,yBAAiC,EAAE,kBAA0B,EAAE,YAAoB,EAAE,YAAoB,EAAE,UAAkB,EAAE,OAAmC,EAAE,QAAuC;QACtP,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAAwC,CAAC;QAClD,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,0CAA0C,CAAC,iBAAiB,EAAE,yBAAyB,EAAE,kBAAkB,EAAE,YAAY,EAAE,YAAY,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBACxN,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAkB,CAAC,CAAC;YAC1D,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,0CAA0C,CAAC,iBAAiB,EAAE,yBAAyB,EAAE,kBAAkB,EAAE,YAAY,EAAE,YAAY,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBAC1O,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAkB,CAAC;gBACrC,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IA0CD,uCAAmB,GAAnB,UAAoB,iBAAyB,EAAE,yBAAiC,EAAE,kBAA0B,EAAE,YAAoB,EAAE,YAAoB,EAAE,UAAkB,EAAE,UAAkC,EAAE,OAAmC,EAAE,QAAyD;QAC9S,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAA0D,CAAC;QACpE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,4CAA4C,CAAC,iBAAiB,EAAE,yBAAyB,EAAE,kBAAkB,EAAE,YAAY,EAAE,YAAY,EAAE,UAAU,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBACtO,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAoC,CAAC,CAAC;YAC5E,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,4CAA4C,CAAC,iBAAiB,EAAE,yBAAyB,EAAE,kBAAkB,EAAE,YAAY,EAAE,YAAY,EAAE,UAAU,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBACxP,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAoC,CAAC;gBACvD,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAyCD,+BAAW,GAAX,UAAY,iBAAyB,EAAE,yBAAiC,EAAE,kBAA0B,EAAE,YAAoB,EAAE,YAAoB,EAAE,UAAkB,EAAE,UAAkC,EAAE,OAAmC,EAAE,QAAyD;QACtS,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAA0D,CAAC;QACpE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,oCAAoC,CAAC,iBAAiB,EAAE,yBAAyB,EAAE,kBAAkB,EAAE,YAAY,EAAE,YAAY,EAAE,UAAU,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBAC9N,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAoC,CAAC,CAAC;YAC5E,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,oCAAoC,CAAC,iBAAiB,EAAE,yBAAyB,EAAE,kBAAkB,EAAE,YAAY,EAAE,YAAY,EAAE,UAAU,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBAChP,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAoC,CAAC;gBACvD,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IA6BD,mCAAe,GAAf,UAAgB,UAAkB,EAAE,UAAkB,EAAE,OAAmC,EAAE,QAAuC;QAClI,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAAwC,CAAC;QAClD,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,wCAAwC,CAAC,UAAU,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBACpI,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAkB,CAAC,CAAC;YAC1D,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,wCAAwC,CAAC,UAAU,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBACtJ,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAkB,CAAC;gBACrC,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAiCD,2CAAuB,GAAvB,UAAwB,UAAkB,EAAE,UAAkB,EAAE,UAAkC,EAAE,OAAmC,EAAE,QAAyD;QAChM,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAA0D,CAAC;QACpE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,gDAAgD,CAAC,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBACxJ,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAoC,CAAC,CAAC;YAC5E,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,gDAAgD,CAAC,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBAC1K,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAoC,CAAC;gBACvD,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAiCD,mCAAe,GAAf,UAAgB,UAAkB,EAAE,UAAkB,EAAE,UAAkC,EAAE,OAAmC,EAAE,QAAyD;QACxL,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAA0D,CAAC;QACpE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,wCAAwC,CAAC,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBAChJ,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAoC,CAAC,CAAC;YAC5E,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,wCAAwC,CAAC,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBAClK,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAoC,CAAC;gBACvD,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IA4BD,2CAAuB,GAAvB,UAAwB,YAAoB,EAAE,OAAmC,EAAE,QAA4D;QAC7I,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAA6D,CAAC;QACvE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,gDAAgD,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBAClI,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAuC,CAAC,CAAC;YAC/E,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,gDAAgD,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBACpJ,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAuC,CAAC;gBAC1D,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IA4BD,4BAAQ,GAAR,UAAS,YAAoB,EAAE,OAAmC,EAAE,QAA4D;QAC9H,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAA6D,CAAC;QACvE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,iCAAiC,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBACnH,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAuC,CAAC,CAAC;YAC/E,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,iCAAiC,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBACrI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAuC,CAAC;gBAC1D,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAEH,gBAAC;AAAD,CAAC;;;;;;;;;;;;ACp3HD;AAAA;;;;GAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEkC;AAEQ;AAG7C,IAAM,WAAW,GAAG,uDAAkB,CAAC;AAEvC,2CAA2C;AAC3C;IAEE;;;OAGG;IACH,wBAAY,MAAgC;QAC1C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED;;;;;;;;;;;;;OAaG;IACG,gEAAuC,GAA7C,UAA8C,iBAAyB,EAAE,OAAmC;;;;;;wBACtG,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACzB,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,iBAAiB,KAAK,IAAI,IAAI,iBAAiB,KAAK,SAAS,IAAI,OAAO,iBAAiB,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACrH,MAAM,IAAI,KAAK,CAAC,8EAA8E,CAAC,CAAC;4BAClG,CAAC;4BACD,EAAE,CAAC,CAAC,iBAAiB,KAAK,IAAI,IAAI,iBAAiB,KAAK,SAAS,CAAC,CAAC,CAAC;gCAClE,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,EAAE,CAAC,CAClC,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,qEAAqE,CAAC,CAAC;gCACzF,CAAC;gCACD,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC,CACjC,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,oEAAoE,CAAC,CAAC;gCACxF,CAAC;gCACD,EAAE,CAAC,CAAC,iBAAiB,CAAC,KAAK,CAAC,iBAAiB,CAAC,KAAK,IAAI,CAAC,CACxD,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,kFAAkF,CAAC,CAAC;gCACtG,CAAC;4BACH,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACpI,MAAM,IAAI,KAAK,CAAC,mFAAmF,CAAC,CAAC;4BACvG,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,uFAAuF,CAAC,CAAC;4BAC3G,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;wBAC9B,UAAU,GAAG,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,mEAAmE,CAAC;wBACpI,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,qBAAqB,EAAE,kBAAkB,CAAC,iBAAiB,CAAC,CAAC,CAAC;wBAC9F,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;wBAChG,gBAAgB,GAAe,EAAE,CAAC;wBACtC,gBAAgB,CAAC,IAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;wBACnF,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAChC,UAAU,IAAI,GAAG,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACjD,CAAC;wBAGG,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,MAAM,CAAC;wBAC5B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;;;;wBAIgB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,IAAI,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACzC,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBACD,YAAY,CAAC,UAAU,GAAG,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC;;;;wBAG/C,sBAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAED;;;;;;;;;;;;;;;;OAgBG;IACG,gEAAuC,GAA7C,UAA8C,iBAAyB,EAAE,UAAgC,EAAE,OAAmC;;;;;;wBACxI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACzB,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,iBAAiB,KAAK,IAAI,IAAI,iBAAiB,KAAK,SAAS,IAAI,OAAO,iBAAiB,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACrH,MAAM,IAAI,KAAK,CAAC,8EAA8E,CAAC,CAAC;4BAClG,CAAC;4BACD,EAAE,CAAC,CAAC,iBAAiB,KAAK,IAAI,IAAI,iBAAiB,KAAK,SAAS,CAAC,CAAC,CAAC;gCAClE,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,EAAE,CAAC,CAClC,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,qEAAqE,CAAC,CAAC;gCACzF,CAAC;gCACD,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC,CACjC,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,oEAAoE,CAAC,CAAC;gCACxF,CAAC;gCACD,EAAE,CAAC,CAAC,iBAAiB,CAAC,KAAK,CAAC,iBAAiB,CAAC,KAAK,IAAI,CAAC,CACxD,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,kFAAkF,CAAC,CAAC;gCACtG,CAAC;4BACH,CAAC;4BACD,EAAE,CAAC,CAAC,UAAU,KAAK,IAAI,IAAI,UAAU,KAAK,SAAS,CAAC,CAAC,CAAC;gCACpD,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;4BAC7D,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACpI,MAAM,IAAI,KAAK,CAAC,mFAAmF,CAAC,CAAC;4BACvG,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,uFAAuF,CAAC,CAAC;4BAC3G,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;wBAC9B,UAAU,GAAG,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,mEAAmE,CAAC;wBACpI,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,qBAAqB,EAAE,kBAAkB,CAAC,iBAAiB,CAAC,CAAC,CAAC;wBAC9F,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;wBAChG,gBAAgB,GAAe,EAAE,CAAC;wBACtC,gBAAgB,CAAC,IAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;wBACnF,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAChC,UAAU,IAAI,GAAG,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACjD,CAAC;wBAGG,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,KAAK,CAAC;wBAC3B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;wBAEG,cAAc,GAAG,IAAI,CAAC;wBACtB,YAAY,GAAG,IAAI,CAAC;wBACxB,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,UAAU,KAAK,IAAI,IAAI,UAAU,KAAK,SAAS,CAAC,CAAC,CAAC;gCAChD,kBAAkB,GAAG,8DAAqB,CAAC;gCAC/C,YAAY,GAAG,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,kBAAkB,EAAE,UAAU,EAAE,YAAY,CAAC,CAAC;gCACzF,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;4BAChD,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACX,kBAAkB,GAAG,IAAI,KAAK,CAAC,aAAU,KAAK,CAAC,OAAO,oCAAgC;iCACtF,eAAa,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC,MAAG,EAAC,CAAC;4BACzD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,kBAAkB,CAAC,EAAC;wBAC5C,CAAC;wBACD,WAAW,CAAC,IAAI,GAAG,cAAc,CAAC;;;;wBAIjB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,IAAI,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACzC,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBACD,uBAAuB;wBACvB,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;4BACvE,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;oCACxD,YAAY,GAAG,8DAAqB,CAAC;oCACzC,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;gCACnH,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACX,oBAAoB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;gCAC1I,oBAAoB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;gCAChE,oBAAoB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;gCAC/D,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAC;4BAC9C,CAAC;wBACH,CAAC;wBACD,uBAAuB;wBACvB,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;4BACvE,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;oCACxD,YAAY,GAAG,8DAAqB,CAAC;oCACzC,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;gCACnH,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACX,qBAAqB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;gCAC3I,qBAAqB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;gCACjE,qBAAqB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;gCAChE,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,qBAAqB,CAAC,EAAC;4BAC/C,CAAC;wBACH,CAAC;;;;wBAGD,sBAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAGD;;;;;;;;;;;;;;;;;OAiBG;IACG,8DAAqC,GAA3C,UAA4C,iBAAyB,EAAE,OAAmC;;;;;;wBACpG,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;;;;wBAIP,qBAAM,IAAI,CAAC,0CAA0C,CAAC,iBAAiB,EAAE,OAAO,CAAC;;wBAAjG,aAAa,GAAG,SAAiF,CAAC;;;;wBAElG,sBAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;;;wBAIZ,qBAAM,MAAM,CAAC,6BAA6B,CAAC,aAAa,EAAE,OAAO,CAAC;;wBAAjF,YAAY,GAAG,SAAkE,CAAC;;;;wBAIlF,sBAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;4BAE7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAED;;;;;;;;;;;;;OAaG;IACG,qDAA4B,GAAlC,UAAmC,iBAAyB,EAAE,OAAmC;;;;;;wBAC3F,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACzB,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,iBAAiB,KAAK,IAAI,IAAI,iBAAiB,KAAK,SAAS,IAAI,OAAO,iBAAiB,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACrH,MAAM,IAAI,KAAK,CAAC,8EAA8E,CAAC,CAAC;4BAClG,CAAC;4BACD,EAAE,CAAC,CAAC,iBAAiB,KAAK,IAAI,IAAI,iBAAiB,KAAK,SAAS,CAAC,CAAC,CAAC;gCAClE,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,EAAE,CAAC,CAClC,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,qEAAqE,CAAC,CAAC;gCACzF,CAAC;gCACD,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC,CACjC,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,oEAAoE,CAAC,CAAC;gCACxF,CAAC;gCACD,EAAE,CAAC,CAAC,iBAAiB,CAAC,KAAK,CAAC,iBAAiB,CAAC,KAAK,IAAI,CAAC,CACxD,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,kFAAkF,CAAC,CAAC;gCACtG,CAAC;4BACH,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACpI,MAAM,IAAI,KAAK,CAAC,mFAAmF,CAAC,CAAC;4BACvG,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,uFAAuF,CAAC,CAAC;4BAC3G,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;wBAC9B,UAAU,GAAG,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,mEAAmE,CAAC;wBACpI,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,qBAAqB,EAAE,kBAAkB,CAAC,iBAAiB,CAAC,CAAC,CAAC;wBAC9F,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;wBAChG,gBAAgB,GAAe,EAAE,CAAC;wBACtC,gBAAgB,CAAC,IAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;wBACnF,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAChC,UAAU,IAAI,GAAG,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACjD,CAAC;wBAGG,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,KAAK,CAAC;wBAC3B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;;;;wBAIgB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBACD,uBAAuB;wBACvB,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;4BACvE,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;oCACxD,YAAY,GAAG,8DAAqB,CAAC;oCACzC,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;gCACnH,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACX,oBAAoB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;gCAC1I,oBAAoB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;gCAChE,oBAAoB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;gCAC/D,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAC;4BAC9C,CAAC;wBACH,CAAC;;;;wBAGD,sBAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAED;;;;;;;;;;;;;;;;;;;;OAoBG;IACG,wDAA+B,GAArC,UAAsC,iBAAyB,EAAE,UAAyC,EAAE,OAAmC;;;;;;wBACzI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACzB,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,iBAAiB,KAAK,IAAI,IAAI,iBAAiB,KAAK,SAAS,IAAI,OAAO,iBAAiB,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACrH,MAAM,IAAI,KAAK,CAAC,8EAA8E,CAAC,CAAC;4BAClG,CAAC;4BACD,EAAE,CAAC,CAAC,iBAAiB,KAAK,IAAI,IAAI,iBAAiB,KAAK,SAAS,CAAC,CAAC,CAAC;gCAClE,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,EAAE,CAAC,CAClC,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,qEAAqE,CAAC,CAAC;gCACzF,CAAC;gCACD,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC,CACjC,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,oEAAoE,CAAC,CAAC;gCACxF,CAAC;gCACD,EAAE,CAAC,CAAC,iBAAiB,CAAC,KAAK,CAAC,iBAAiB,CAAC,KAAK,IAAI,CAAC,CACxD,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,kFAAkF,CAAC,CAAC;gCACtG,CAAC;4BACH,CAAC;4BACD,EAAE,CAAC,CAAC,UAAU,KAAK,IAAI,IAAI,UAAU,KAAK,SAAS,CAAC,CAAC,CAAC;gCACpD,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;4BAC7D,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACpI,MAAM,IAAI,KAAK,CAAC,mFAAmF,CAAC,CAAC;4BACvG,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,uFAAuF,CAAC,CAAC;4BAC3G,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;wBAC9B,UAAU,GAAG,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,mEAAmE,CAAC;wBACpI,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,qBAAqB,EAAE,kBAAkB,CAAC,iBAAiB,CAAC,CAAC,CAAC;wBAC9F,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;wBAChG,gBAAgB,GAAe,EAAE,CAAC;wBACtC,gBAAgB,CAAC,IAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;wBACnF,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAChC,UAAU,IAAI,GAAG,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACjD,CAAC;wBAGG,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,OAAO,CAAC;wBAC7B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;wBAEG,cAAc,GAAG,IAAI,CAAC;wBACtB,YAAY,GAAG,IAAI,CAAC;wBACxB,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,UAAU,KAAK,IAAI,IAAI,UAAU,KAAK,SAAS,CAAC,CAAC,CAAC;gCAChD,kBAAkB,GAAG,uEAA8B,CAAC;gCACxD,YAAY,GAAG,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,kBAAkB,EAAE,UAAU,EAAE,YAAY,CAAC,CAAC;gCACzF,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;4BAChD,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACX,kBAAkB,GAAG,IAAI,KAAK,CAAC,aAAU,KAAK,CAAC,OAAO,oCAAgC;iCACtF,eAAa,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC,MAAG,EAAC,CAAC;4BACzD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,kBAAkB,CAAC,EAAC;wBAC5C,CAAC;wBACD,WAAW,CAAC,IAAI,GAAG,cAAc,CAAC;;;;wBAIjB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBACD,uBAAuB;wBACvB,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;4BACvE,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;oCACxD,YAAY,GAAG,8DAAqB,CAAC;oCACzC,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;gCACnH,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACX,oBAAoB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;gCAC1I,oBAAoB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;gCAChE,oBAAoB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;gCAC/D,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAC;4BAC9C,CAAC;wBACH,CAAC;;;;wBAGD,sBAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAED;;;;;;;;;;;;;;;;OAgBG;IACG,gEAAuC,GAA7C,UAA8C,iBAAyB,EAAE,UAAwC,EAAE,OAAmC;;;;;;wBAChJ,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACzB,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,iBAAiB,KAAK,IAAI,IAAI,iBAAiB,KAAK,SAAS,IAAI,OAAO,iBAAiB,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACrH,MAAM,IAAI,KAAK,CAAC,8EAA8E,CAAC,CAAC;4BAClG,CAAC;4BACD,EAAE,CAAC,CAAC,iBAAiB,KAAK,IAAI,IAAI,iBAAiB,KAAK,SAAS,CAAC,CAAC,CAAC;gCAClE,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,EAAE,CAAC,CAClC,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,qEAAqE,CAAC,CAAC;gCACzF,CAAC;gCACD,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC,CACjC,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,oEAAoE,CAAC,CAAC;gCACxF,CAAC;gCACD,EAAE,CAAC,CAAC,iBAAiB,CAAC,KAAK,CAAC,iBAAiB,CAAC,KAAK,IAAI,CAAC,CACxD,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,kFAAkF,CAAC,CAAC;gCACtG,CAAC;4BACH,CAAC;4BACD,EAAE,CAAC,CAAC,UAAU,KAAK,IAAI,IAAI,UAAU,KAAK,SAAS,CAAC,CAAC,CAAC;gCACpD,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;4BAC7D,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACpI,MAAM,IAAI,KAAK,CAAC,mFAAmF,CAAC,CAAC;4BACvG,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,uFAAuF,CAAC,CAAC;4BAC3G,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;wBAC9B,UAAU,GAAG,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,kFAAkF,CAAC;wBACnJ,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,qBAAqB,EAAE,kBAAkB,CAAC,iBAAiB,CAAC,CAAC,CAAC;wBAC9F,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;wBAChG,gBAAgB,GAAe,EAAE,CAAC;wBACtC,gBAAgB,CAAC,IAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;wBACnF,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAChC,UAAU,IAAI,GAAG,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACjD,CAAC;wBAGG,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,MAAM,CAAC;wBAC5B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;wBAEG,cAAc,GAAG,IAAI,CAAC;wBACtB,YAAY,GAAG,IAAI,CAAC;wBACxB,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,UAAU,KAAK,IAAI,IAAI,UAAU,KAAK,SAAS,CAAC,CAAC,CAAC;gCAChD,kBAAkB,GAAG,sEAA6B,CAAC;gCACvD,YAAY,GAAG,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,kBAAkB,EAAE,UAAU,EAAE,YAAY,CAAC,CAAC;gCACzF,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;4BAChD,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACX,kBAAkB,GAAG,IAAI,KAAK,CAAC,aAAU,KAAK,CAAC,OAAO,oCAAgC;iCACtF,eAAa,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC,MAAG,EAAC,CAAC;4BACzD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,kBAAkB,CAAC,EAAC;wBAC5C,CAAC;wBACD,WAAW,CAAC,IAAI,GAAG,cAAc,CAAC;;;;wBAIjB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBACD,uBAAuB;wBACvB,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;4BACvE,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;oCACxD,YAAY,GAAG,0EAAiC,CAAC;oCACrD,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;gCACnH,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACX,oBAAoB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;gCAC1I,oBAAoB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;gCAChE,oBAAoB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;gCAC/D,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAC;4BAC9C,CAAC;wBACH,CAAC;;;;wBAGD,sBAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAED;;;;;;;;;;OAUG;IACG,sDAA6B,GAAnC,UAAoC,OAAiD;;;;;;wBAC/E,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACrB,MAAM,GAAG,CAAC,OAAO,IAAI,OAAO,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC;wBAChF,GAAG,GAAG,CAAC,OAAO,IAAI,OAAO,CAAC,GAAG,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC;wBAC3E,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,MAAM,KAAK,IAAI,IAAI,MAAM,KAAK,SAAS,IAAI,OAAO,MAAM,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACpF,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;4BACpD,CAAC;4BACD,EAAE,CAAC,CAAC,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,SAAS,IAAI,OAAO,GAAG,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACjE,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;4BACjD,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACpI,MAAM,IAAI,KAAK,CAAC,mFAAmF,CAAC,CAAC;4BACvG,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,uFAAuF,CAAC,CAAC;4BAC3G,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;wBAC9B,UAAU,GAAG,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,+CAA+C,CAAC;wBAChH,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;wBAChG,gBAAgB,GAAe,EAAE,CAAC;wBACtC,EAAE,CAAC,CAAC,MAAM,KAAK,IAAI,IAAI,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC;4BAC5C,gBAAgB,CAAC,IAAI,CAAC,UAAU,GAAG,kBAAkB,CAAC,MAAM,CAAC,CAAC,CAAC;wBACjE,CAAC;wBACD,EAAE,CAAC,CAAC,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,SAAS,CAAC,CAAC,CAAC;4BACtC,gBAAgB,CAAC,IAAI,CAAC,OAAO,GAAG,kBAAkB,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;wBACtE,CAAC;wBACD,gBAAgB,CAAC,IAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;wBACnF,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAChC,UAAU,IAAI,GAAG,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACjD,CAAC;wBAGG,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,KAAK,CAAC;wBAC3B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;;;;wBAIgB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBACD,uBAAuB;wBACvB,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;4BACvE,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;oCACxD,YAAY,GAAG,wEAA+B,CAAC;oCACnD,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;gCACnH,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACX,oBAAoB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;gCAC1I,oBAAoB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;gCAChE,oBAAoB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;gCAC/D,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAC;4BAC9C,CAAC;wBACH,CAAC;;;;wBAGD,sBAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAED;;;;;;;;;;;;;;;;;OAiBG;IACG,mEAA0C,GAAhD,UAAiD,iBAAyB,EAAE,OAAmC;;;;;;wBACzG,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACzB,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,iBAAiB,KAAK,IAAI,IAAI,iBAAiB,KAAK,SAAS,IAAI,OAAO,iBAAiB,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACrH,MAAM,IAAI,KAAK,CAAC,8EAA8E,CAAC,CAAC;4BAClG,CAAC;4BACD,EAAE,CAAC,CAAC,iBAAiB,KAAK,IAAI,IAAI,iBAAiB,KAAK,SAAS,CAAC,CAAC,CAAC;gCAClE,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,EAAE,CAAC,CAClC,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,qEAAqE,CAAC,CAAC;gCACzF,CAAC;gCACD,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC,CACjC,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,oEAAoE,CAAC,CAAC;gCACxF,CAAC;gCACD,EAAE,CAAC,CAAC,iBAAiB,CAAC,KAAK,CAAC,iBAAiB,CAAC,KAAK,IAAI,CAAC,CACxD,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,kFAAkF,CAAC,CAAC;gCACtG,CAAC;4BACH,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACpI,MAAM,IAAI,KAAK,CAAC,mFAAmF,CAAC,CAAC;4BACvG,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,uFAAuF,CAAC,CAAC;4BAC3G,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;wBAC9B,UAAU,GAAG,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,mEAAmE,CAAC;wBACpI,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,qBAAqB,EAAE,kBAAkB,CAAC,iBAAiB,CAAC,CAAC,CAAC;wBAC9F,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;wBAChG,gBAAgB,GAAe,EAAE,CAAC;wBACtC,gBAAgB,CAAC,IAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;wBACnF,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAChC,UAAU,IAAI,GAAG,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACjD,CAAC;wBAGG,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,QAAQ,CAAC;wBAC9B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;;;;wBAIgB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,IAAI,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACzC,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;;;;wBAGD,sBAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAED;;;;;;;;;;;;;OAaG;IACG,0DAAiC,GAAvC,UAAwC,YAAoB,EAAE,OAAmC;;;;;;wBAC3F,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACzB,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,YAAY,KAAK,IAAI,IAAI,YAAY,KAAK,SAAS,IAAI,OAAO,YAAY,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACtG,MAAM,IAAI,KAAK,CAAC,yEAAyE,CAAC,CAAC;4BAC7F,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,UAAU,GAAG,YAAY,CAAC;wBAC9B,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;wBAGxD,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,KAAK,CAAC;wBAC3B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;;;;wBAIgB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBACD,uBAAuB;wBACvB,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;4BACvE,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;oCACxD,YAAY,GAAG,wEAA+B,CAAC;oCACnD,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;gCACnH,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACX,oBAAoB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;gCAC1I,oBAAoB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;gCAChE,oBAAoB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;gCAC/D,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAC;4BAC9C,CAAC;wBACH,CAAC;;;;wBAGD,sBAAO,OAAO,CAAC,MAAM,CAAC,MAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IA0BD,uCAAc,GAAd,UAAe,iBAAyB,EAAE,OAAmC,EAAE,QAA0C;QACvH,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAA2C,CAAC;QACrD,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,uCAAuC,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBAC9H,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAqB,CAAC,CAAC;YAC7D,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,uCAAuC,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBAChJ,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAqB,CAAC;gBACxC,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IA8BD,uCAAc,GAAd,UAAe,iBAAyB,EAAE,UAAgC,EAAE,OAAmC,EAAE,QAAuD;QACtK,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAAwD,CAAC;QAClE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,uCAAuC,CAAC,iBAAiB,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBAC1I,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAkC,CAAC,CAAC;YAC1E,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,uCAAuC,CAAC,iBAAiB,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBAC5J,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAkC,CAAC;gBACrD,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IA8BD,qCAAY,GAAZ,UAAa,iBAAyB,EAAE,OAAmC,EAAE,QAAuC;QAClH,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAAwC,CAAC;QAClD,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,qCAAqC,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBAC5H,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAkB,CAAC,CAAC;YAC1D,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,qCAAqC,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBAC9I,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAkB,CAAC;gBACrC,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IA2BD,4BAAG,GAAH,UAAI,iBAAyB,EAAE,OAAmC,EAAE,QAAuD;QACzH,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAAwD,CAAC;QAClE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,4BAA4B,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBACnH,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAkC,CAAC,CAAC;YAC1E,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,4BAA4B,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBACrI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAkC,CAAC;gBACrD,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAkCD,+BAAM,GAAN,UAAO,iBAAyB,EAAE,UAAyC,EAAE,OAAmC,EAAE,QAAuD;QACvK,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAAwD,CAAC;QAClE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,+BAA+B,CAAC,iBAAiB,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBAClI,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAkC,CAAC,CAAC;YAC1E,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,+BAA+B,CAAC,iBAAiB,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBACpJ,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAkC,CAAC;gBACrD,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IA+BD,uCAAc,GAAd,UAAe,iBAAyB,EAAE,UAAwC,EAAE,OAAmC,EAAE,QAAmE;QAC1L,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAAoE,CAAC;QAC9E,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,uCAAuC,CAAC,iBAAiB,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBAC1I,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAA8C,CAAC,CAAC;YACtF,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,uCAAuC,CAAC,iBAAiB,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBAC5J,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAA8C,CAAC;gBACjE,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAyBD,6BAAI,GAAJ,UAAK,OAAiD,EAAE,QAAiE;QACvH,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAAkE,CAAC;QAC5E,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,6BAA6B,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBACjG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAA4C,CAAC,CAAC;YACpF,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,6BAA6B,CAAC,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBACnH,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAA4C,CAAC;gBAC/D,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IA8BD,0CAAiB,GAAjB,UAAkB,iBAAyB,EAAE,OAAmC,EAAE,QAAuC;QACvH,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAAwC,CAAC;QAClD,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,0CAA0C,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBACjI,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAkB,CAAC,CAAC;YAC1D,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,0CAA0C,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBACnJ,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAkB,CAAC;gBACrC,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IA4BD,iCAAQ,GAAR,UAAS,YAAoB,EAAE,OAAmC,EAAE,QAAiE;QACnI,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAAkE,CAAC;QAC5E,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,iCAAiC,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBACnH,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAA4C,CAAC,CAAC;YACpF,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,iCAAiC,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBACrI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAA4C,CAAC;gBAC/D,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAEH,qBAAC;AAAD,CAAC;;;;;;;;;;;;AChjDD;AAAA;;;;GAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEkC;AAEQ;AAG7C,IAAM,WAAW,GAAG,uDAAkB,CAAC;AAEvC,iCAAiC;AACjC;IAEE;;;OAGG;IACH,cAAY,MAAgC;QAC1C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED;;;;;;;;;;;;;;OAcG;IACG,mDAAoC,GAA1C,UAA2C,OAAe,EAAE,QAAgB,EAAE,OAAmC;;;;;;wBAC3G,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACzB,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,OAAO,KAAK,IAAI,IAAI,OAAO,KAAK,SAAS,IAAI,OAAO,OAAO,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACvF,MAAM,IAAI,KAAK,CAAC,oEAAoE,CAAC,CAAC;4BACxF,CAAC;4BACD,EAAE,CAAC,CAAC,QAAQ,KAAK,IAAI,IAAI,QAAQ,KAAK,SAAS,IAAI,OAAO,QAAQ,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAC1F,MAAM,IAAI,KAAK,CAAC,qEAAqE,CAAC,CAAC;4BACzF,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACpI,MAAM,IAAI,KAAK,CAAC,mFAAmF,CAAC,CAAC;4BACvG,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,uFAAuF,CAAC,CAAC;4BAC3G,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;wBAC9B,UAAU,GAAG,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,wEAAwE,CAAC;wBACzI,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,WAAW,EAAE,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAC;wBAC1E,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,YAAY,EAAE,kBAAkB,CAAC,QAAQ,CAAC,CAAC,CAAC;wBAC5E,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;wBAChG,gBAAgB,GAAe,EAAE,CAAC;wBACtC,gBAAgB,CAAC,IAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;wBACnF,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAChC,UAAU,IAAI,GAAG,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACjD,CAAC;wBAGG,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,QAAQ,CAAC;wBAC9B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;;;;wBAIgB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,IAAI,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACzC,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;;;;wBAGD,sBAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAED;;;;;;;;;;;;;;OAcG;IACG,2DAA4C,GAAlD,UAAmD,OAAe,EAAE,QAAgB,EAAE,OAAmC;;;;;;wBACnH,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACzB,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,OAAO,KAAK,IAAI,IAAI,OAAO,KAAK,SAAS,IAAI,OAAO,OAAO,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACvF,MAAM,IAAI,KAAK,CAAC,oEAAoE,CAAC,CAAC;4BACxF,CAAC;4BACD,EAAE,CAAC,CAAC,QAAQ,KAAK,IAAI,IAAI,QAAQ,KAAK,SAAS,IAAI,OAAO,QAAQ,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAC1F,MAAM,IAAI,KAAK,CAAC,qEAAqE,CAAC,CAAC;4BACzF,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACpI,MAAM,IAAI,KAAK,CAAC,mFAAmF,CAAC,CAAC;4BACvG,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,uFAAuF,CAAC,CAAC;4BAC3G,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;wBAC9B,UAAU,GAAG,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,wEAAwE,CAAC;wBACzI,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,WAAW,EAAE,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAC;wBAC1E,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,YAAY,EAAE,kBAAkB,CAAC,QAAQ,CAAC,CAAC,CAAC;wBAC5E,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;wBAChG,gBAAgB,GAAe,EAAE,CAAC;wBACtC,gBAAgB,CAAC,IAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;wBACnF,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAChC,UAAU,IAAI,GAAG,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACjD,CAAC;wBAGG,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,KAAK,CAAC;wBAC3B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;;;;wBAIgB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,IAAI,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACzC,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBACD,uBAAuB;wBACvB,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;4BACvE,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;oCACxD,YAAY,GAAG,yDAAgB,CAAC;oCACpC,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;gCACnH,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACX,oBAAoB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;gCAC1I,oBAAoB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;gCAChE,oBAAoB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;gCAC/D,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAC;4BAC9C,CAAC;wBACH,CAAC;wBACD,uBAAuB;wBACvB,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;4BACvE,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;oCACxD,YAAY,GAAG,yDAAgB,CAAC;oCACpC,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;gCACnH,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACX,qBAAqB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;gCAC3I,qBAAqB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;gCACjE,qBAAqB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;gCAChE,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,qBAAqB,CAAC,EAAC;4BAC/C,CAAC;wBACH,CAAC;;;;wBAGD,sBAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAED;;;;;;;;;;;;;;;;OAgBG;IACG,sDAAuC,GAA7C,UAA8C,OAAe,EAAE,OAAmC;;;;;;wBAC5F,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACzB,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,OAAO,KAAK,IAAI,IAAI,OAAO,KAAK,SAAS,IAAI,OAAO,OAAO,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACvF,MAAM,IAAI,KAAK,CAAC,oEAAoE,CAAC,CAAC;4BACxF,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACpI,MAAM,IAAI,KAAK,CAAC,mFAAmF,CAAC,CAAC;4BACvG,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,uFAAuF,CAAC,CAAC;4BAC3G,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;wBAC9B,UAAU,GAAG,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,mDAAmD,CAAC;wBACpH,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,WAAW,EAAE,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAC;wBAC1E,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;wBAChG,gBAAgB,GAAe,EAAE,CAAC;wBACtC,gBAAgB,CAAC,IAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;wBACnF,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAChC,UAAU,IAAI,GAAG,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACjD,CAAC;wBAGG,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,KAAK,CAAC;wBAC3B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;;;;wBAIgB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,IAAI,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACzC,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBACD,uBAAuB;wBACvB,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;4BACvE,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;oCACxD,YAAY,GAAG,2DAAkB,CAAC;oCACtC,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;gCACnH,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACX,oBAAoB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;gCAC1I,oBAAoB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;gCAChE,oBAAoB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;gCAC/D,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAC;4BAC9C,CAAC;wBACH,CAAC;wBACD,uBAAuB;wBACvB,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;4BACvE,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;oCACxD,YAAY,GAAG,2DAAkB,CAAC;oCACtC,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;gCACnH,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACX,qBAAqB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;gCAC3I,qBAAqB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;gCACjE,qBAAqB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;gCAChE,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,qBAAqB,CAAC,EAAC;4BAC/C,CAAC;wBACH,CAAC;;;;wBAGD,sBAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAED;;;;;;;;;;;;;;OAcG;IACG,oDAAqC,GAA3C,UAA4C,OAAe,EAAE,OAAmC;;;;;;wBAC1F,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACzB,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,OAAO,KAAK,IAAI,IAAI,OAAO,KAAK,SAAS,IAAI,OAAO,OAAO,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACvF,MAAM,IAAI,KAAK,CAAC,oEAAoE,CAAC,CAAC;4BACxF,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACpI,MAAM,IAAI,KAAK,CAAC,mFAAmF,CAAC,CAAC;4BACvG,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,uFAAuF,CAAC,CAAC;4BAC3G,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;wBAC9B,UAAU,GAAG,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,mDAAmD,CAAC;wBACpH,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,WAAW,EAAE,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAC;wBAC1E,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;wBAChG,gBAAgB,GAAe,EAAE,CAAC;wBACtC,gBAAgB,CAAC,IAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;wBACnF,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAChC,UAAU,IAAI,GAAG,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACjD,CAAC;wBAGG,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,QAAQ,CAAC;wBAC9B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;;;;wBAIgB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,IAAI,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACzC,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;;;;wBAGD,sBAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAED;;;;;;;;;;;OAWG;IACG,4CAA6B,GAAnC,UAAoC,OAAmC;;;;;;wBACjE,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACzB,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACpI,MAAM,IAAI,KAAK,CAAC,mFAAmF,CAAC,CAAC;4BACvG,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,uFAAuF,CAAC,CAAC;4BAC3G,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;wBAC9B,UAAU,GAAG,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,yCAAyC,CAAC;wBAC1G,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;wBAChG,gBAAgB,GAAe,EAAE,CAAC;wBACtC,gBAAgB,CAAC,IAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;wBACnF,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAChC,UAAU,IAAI,GAAG,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACjD,CAAC;wBAGG,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,KAAK,CAAC;wBAC3B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;;;;wBAIgB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBACD,uBAAuB;wBACvB,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;4BACvE,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;oCACxD,YAAY,GAAG,+DAAsB,CAAC;oCAC1C,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;gCACnH,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACX,oBAAoB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;gCAC1I,oBAAoB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;gCAChE,oBAAoB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;gCAC/D,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAC;4BAC9C,CAAC;wBACH,CAAC;;;;wBAGD,sBAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAED;;;;;;;;;;;;;;OAcG;IACG,gDAAiC,GAAvC,UAAwC,YAAoB,EAAE,OAAmC;;;;;;wBAC3F,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACzB,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,YAAY,KAAK,IAAI,IAAI,YAAY,KAAK,SAAS,IAAI,OAAO,YAAY,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACtG,MAAM,IAAI,KAAK,CAAC,yEAAyE,CAAC,CAAC;4BAC7F,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,UAAU,GAAG,YAAY,CAAC;wBAC9B,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;wBAGxD,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,KAAK,CAAC;wBAC3B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;;;;wBAIgB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBACD,uBAAuB;wBACvB,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;4BACvE,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;oCACxD,YAAY,GAAG,+DAAsB,CAAC;oCAC1C,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;gCACnH,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACX,oBAAoB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;gCAC1I,oBAAoB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;gCAChE,oBAAoB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;gCAC/D,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAC;4BAC9C,CAAC;wBACH,CAAC;;;;wBAGD,sBAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IA2BD,0BAAW,GAAX,UAAY,OAAe,EAAE,QAAgB,EAAE,OAAmC,EAAE,QAAuC;QACzH,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAAwC,CAAC;QAClD,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,oCAAoC,CAAC,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBAC3H,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAkB,CAAC,CAAC;YAC1D,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,oCAAoC,CAAC,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBAC7I,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAkB,CAAC;gBACrC,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IA4BD,kCAAmB,GAAnB,UAAoB,OAAe,EAAE,QAAgB,EAAE,OAAmC,EAAE,QAAkD;QAC5I,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAAmD,CAAC;QAC7D,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,4CAA4C,CAAC,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBACnI,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAA6B,CAAC,CAAC;YACrE,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,4CAA4C,CAAC,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBACrJ,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAA6B,CAAC;gBAChD,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IA8BD,6BAAc,GAAd,UAAe,OAAe,EAAE,OAAmC,EAAE,QAAoD;QACvH,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAAqD,CAAC;QAC/D,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,uCAAuC,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBACpH,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAA+B,CAAC,CAAC;YACvE,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,uCAAuC,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBACtI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAA+B,CAAC;gBAClD,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IA2BD,2BAAY,GAAZ,UAAa,OAAe,EAAE,OAAmC,EAAE,QAAuC;QACxG,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAAwC,CAAC;QAClD,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,qCAAqC,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBAClH,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAkB,CAAC,CAAC;YAC1D,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,qCAAqC,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBACpI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAkB,CAAC;gBACrC,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAyBD,mBAAI,GAAJ,UAAK,OAAmC,EAAE,QAAwD;QAChG,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAAyD,CAAC;QACnE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,6BAA6B,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBACjG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAmC,CAAC,CAAC;YAC3E,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,6BAA6B,CAAC,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBACnH,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAmC,CAAC;gBACtD,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IA4BD,uBAAQ,GAAR,UAAS,YAAoB,EAAE,OAAmC,EAAE,QAAwD;QAC1H,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAAyD,CAAC;QACnE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,iCAAiC,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBACnH,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAmC,CAAC,CAAC;YAC3E,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,iCAAiC,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBACrI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAmC,CAAC;gBACtD,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAEH,WAAC;AAAD,CAAC;;;;;;;;;;;;ACr/BD;AAAA;;;;GAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEkC;AAEQ;AAG7C,IAAM,WAAW,GAAG,uDAAkB,CAAC;AAEvC,iDAAiD;AACjD;IAEE;;;OAGG;IACH,8BAAY,MAAgC;QAC1C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED;;;;;;;;;;;;;;;;;OAiBG;IACG,2DAA4B,GAAlC,UAAmC,iBAAyB,EAAE,cAAsB,EAAE,WAAmB,EAAE,OAAmC;;;;;;wBACxI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACzB,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,iBAAiB,KAAK,IAAI,IAAI,iBAAiB,KAAK,SAAS,IAAI,OAAO,iBAAiB,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACrH,MAAM,IAAI,KAAK,CAAC,8EAA8E,CAAC,CAAC;4BAClG,CAAC;4BACD,EAAE,CAAC,CAAC,iBAAiB,KAAK,IAAI,IAAI,iBAAiB,KAAK,SAAS,CAAC,CAAC,CAAC;gCAClE,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,EAAE,CAAC,CAClC,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,qEAAqE,CAAC,CAAC;gCACzF,CAAC;gCACD,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC,CACjC,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,oEAAoE,CAAC,CAAC;gCACxF,CAAC;gCACD,EAAE,CAAC,CAAC,iBAAiB,CAAC,KAAK,CAAC,iBAAiB,CAAC,KAAK,IAAI,CAAC,CACxD,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,kFAAkF,CAAC,CAAC;gCACtG,CAAC;4BACH,CAAC;4BACD,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,IAAI,OAAO,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAC5G,MAAM,IAAI,KAAK,CAAC,2EAA2E,CAAC,CAAC;4BAC/F,CAAC;4BACD,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;gCAC5D,EAAE,CAAC,CAAC,cAAc,CAAC,MAAM,GAAG,EAAE,CAAC,CAC/B,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,kEAAkE,CAAC,CAAC;gCACtF,CAAC;gCACD,EAAE,CAAC,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC,CAC9B,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,iEAAiE,CAAC,CAAC;gCACrF,CAAC;gCACD,EAAE,CAAC,CAAC,cAAc,CAAC,KAAK,CAAC,iBAAiB,CAAC,KAAK,IAAI,CAAC,CACrD,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,+EAA+E,CAAC,CAAC;gCACnG,CAAC;4BACH,CAAC;4BACD,EAAE,CAAC,CAAC,WAAW,KAAK,IAAI,IAAI,WAAW,KAAK,SAAS,IAAI,OAAO,WAAW,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACnG,MAAM,IAAI,KAAK,CAAC,wEAAwE,CAAC,CAAC;4BAC5F,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACpI,MAAM,IAAI,KAAK,CAAC,mFAAmF,CAAC,CAAC;4BACvG,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,uFAAuF,CAAC,CAAC;4BAC3G,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;wBAC9B,UAAU,GAAG,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,yHAAyH,CAAC;wBAC1L,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,qBAAqB,EAAE,kBAAkB,CAAC,iBAAiB,CAAC,CAAC,CAAC;wBAC9F,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,cAAc,CAAC,CAAC,CAAC;wBACxF,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,eAAe,EAAE,kBAAkB,CAAC,WAAW,CAAC,CAAC,CAAC;wBAClF,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;wBAChG,gBAAgB,GAAe,EAAE,CAAC;wBACtC,gBAAgB,CAAC,IAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;wBACnF,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAChC,UAAU,IAAI,GAAG,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACjD,CAAC;wBAGG,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,KAAK,CAAC;wBAC3B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;;;;wBAIgB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBACD,uBAAuB;wBACvB,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;4BACvE,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;oCACxD,YAAY,GAAG,oEAA2B,CAAC;oCAC/C,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;gCACnH,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACX,oBAAoB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;gCAC1I,oBAAoB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;gCAChE,oBAAoB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;gCAC/D,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAC;4BAC9C,CAAC;wBACH,CAAC;;;;wBAGD,sBAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAED;;;;;;;;;;;;;;;;;OAiBG;IACG,4DAA6B,GAAnC,UAAoC,iBAAyB,EAAE,cAAsB,EAAE,OAAuD;;;;;;wBACxI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACrB,GAAG,GAAG,CAAC,OAAO,IAAI,OAAO,CAAC,GAAG,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC;wBAC3E,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,iBAAiB,KAAK,IAAI,IAAI,iBAAiB,KAAK,SAAS,IAAI,OAAO,iBAAiB,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACrH,MAAM,IAAI,KAAK,CAAC,8EAA8E,CAAC,CAAC;4BAClG,CAAC;4BACD,EAAE,CAAC,CAAC,iBAAiB,KAAK,IAAI,IAAI,iBAAiB,KAAK,SAAS,CAAC,CAAC,CAAC;gCAClE,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,EAAE,CAAC,CAClC,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,qEAAqE,CAAC,CAAC;gCACzF,CAAC;gCACD,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC,CACjC,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,oEAAoE,CAAC,CAAC;gCACxF,CAAC;gCACD,EAAE,CAAC,CAAC,iBAAiB,CAAC,KAAK,CAAC,iBAAiB,CAAC,KAAK,IAAI,CAAC,CACxD,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,kFAAkF,CAAC,CAAC;gCACtG,CAAC;4BACH,CAAC;4BACD,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,IAAI,OAAO,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAC5G,MAAM,IAAI,KAAK,CAAC,2EAA2E,CAAC,CAAC;4BAC/F,CAAC;4BACD,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;gCAC5D,EAAE,CAAC,CAAC,cAAc,CAAC,MAAM,GAAG,EAAE,CAAC,CAC/B,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,kEAAkE,CAAC,CAAC;gCACtF,CAAC;gCACD,EAAE,CAAC,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC,CAC9B,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,iEAAiE,CAAC,CAAC;gCACrF,CAAC;gCACD,EAAE,CAAC,CAAC,cAAc,CAAC,KAAK,CAAC,iBAAiB,CAAC,KAAK,IAAI,CAAC,CACrD,CAAC;oCACC,MAAM,IAAI,KAAK,CAAC,+EAA+E,CAAC,CAAC;gCACnG,CAAC;4BACH,CAAC;4BACD,EAAE,CAAC,CAAC,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,SAAS,IAAI,OAAO,GAAG,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACjE,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;4BACjD,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACpI,MAAM,IAAI,KAAK,CAAC,mFAAmF,CAAC,CAAC;4BACvG,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,uFAAuF,CAAC,CAAC;4BAC3G,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;wBAC9B,UAAU,GAAG,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,2GAA2G,CAAC;wBAC5K,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,qBAAqB,EAAE,kBAAkB,CAAC,iBAAiB,CAAC,CAAC,CAAC;wBAC9F,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,cAAc,CAAC,CAAC,CAAC;wBACxF,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;wBAChG,gBAAgB,GAAe,EAAE,CAAC;wBACtC,EAAE,CAAC,CAAC,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,SAAS,CAAC,CAAC,CAAC;4BACtC,gBAAgB,CAAC,IAAI,CAAC,OAAO,GAAG,kBAAkB,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;wBACtE,CAAC;wBACD,gBAAgB,CAAC,IAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;wBACnF,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAChC,UAAU,IAAI,GAAG,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACjD,CAAC;wBAGG,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,KAAK,CAAC;wBAC3B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;;;;wBAIgB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBACD,uBAAuB;wBACvB,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;4BACvE,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;oCACxD,YAAY,GAAG,+EAAsC,CAAC;oCAC1D,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;gCACnH,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACX,oBAAoB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;gCAC1I,oBAAoB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;gCAChE,oBAAoB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;gCAC/D,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAC;4BAC9C,CAAC;wBACH,CAAC;;;;wBAGD,sBAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAED;;;;;;;;;;;;;OAaG;IACG,gEAAiC,GAAvC,UAAwC,YAAoB,EAAE,OAAmC;;;;;;wBAC3F,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBACzB,WAAW;wBACX,IAAI,CAAC;4BACH,EAAE,CAAC,CAAC,YAAY,KAAK,IAAI,IAAI,YAAY,KAAK,SAAS,IAAI,OAAO,YAAY,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCACtG,MAAM,IAAI,KAAK,CAAC,yEAAyE,CAAC,CAAC;4BAC7F,CAAC;4BACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;gCAChJ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;4BACxE,CAAC;wBACH,CAAC;wBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BACf,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBAGG,UAAU,GAAG,YAAY,CAAC;wBAC9B,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;wBAGxD,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBACpC,WAAW,CAAC,MAAM,GAAG,KAAK,CAAC;wBAC3B,WAAW,CAAC,GAAG,GAAG,UAAU,CAAC;wBAC7B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;wBACzB,cAAc;wBACd,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,iCAAiC,CAAC;wBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;4BACtC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,wDAAmB,EAAE,CAAC;wBAC1E,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;4BACpF,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;wBACtE,CAAC;wBACD,EAAE,EAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;4BACpC,GAAG,EAAK,UAAU,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gCAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oCACrD,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACtE,CAAC;4BACH,CAAC;wBACH,CAAC;;;;wBAIgB,qBAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC;;wBAAjD,YAAY,GAAG,SAAkC,CAAC;wBAC9C,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;wBACjC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;wBACjC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,KAAK,GAAG,IAAI,qDAAgB,CAAC,YAAY,CAAC,UAAoB,CAAC,CAAC;4BACpE,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;4BACnC,KAAK,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;4BACjD,KAAK,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;4BAC5C,mBAAmB,GAAG,YAAY,CAAC,UAAoC,CAAC;4BAC5E,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oCACxB,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC;wCAAC,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,CAAC;oCAC/E,EAAE,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;wCAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;oCACpE,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC;wCAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC;gCAC/E,CAAC;gCACD,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC;oCAClE,YAAY,GAAG,2DAAkB,CAAC;oCACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;gCAC9F,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gCACtB,KAAK,CAAC,OAAO,GAAG,aAAU,YAAY,CAAC,OAAO,mDAA+C;qCAC5E,SAAM,YAAY,CAAC,UAAU,iCAA6B,EAAC;gCAC5E,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;4BAC/B,CAAC;4BACD,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;wBAC/B,CAAC;wBACD,uBAAuB;wBACvB,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;4BACnB,cAAc,GAAG,YAAY,CAAC,UAAoC,CAAC;4BACvE,IAAI,CAAC;gCACH,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;oCACxD,YAAY,GAAG,+EAAsC,CAAC;oCAC1D,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC;gCACnH,CAAC;4BACH,CAAC;4BAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACX,oBAAoB,GAAG,IAAI,qDAAgB,CAAC,WAAS,KAAK,sDAAiD,YAAY,CAAC,UAAY,CAAC,CAAC;gCAC1I,oBAAoB,CAAC,OAAO,GAAG,wDAAmB,CAAC,WAAW,CAAC,CAAC;gCAChE,oBAAoB,CAAC,QAAQ,GAAG,yDAAoB,CAAC,QAAQ,CAAC,CAAC;gCAC/D,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAC;4BAC9C,CAAC;wBACH,CAAC;;;;wBAGD,sBAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;4BAG7B,sBAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAC;;;;KACtC;IAgCD,kCAAG,GAAH,UAAI,iBAAyB,EAAE,cAAsB,EAAE,WAAmB,EAAE,OAAmC,EAAE,QAA6D;QAC5K,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAA8D,CAAC;QACxE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,4BAA4B,CAAC,iBAAiB,EAAE,cAAc,EAAE,WAAW,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBAChJ,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAwC,CAAC,CAAC;YAChF,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,4BAA4B,CAAC,iBAAiB,EAAE,cAAc,EAAE,WAAW,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBAClK,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAwC,CAAC;gBAC3D,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAgCD,mCAAI,GAAJ,UAAK,iBAAyB,EAAE,cAAsB,EAAE,OAAuD,EAAE,QAAwE;QACvL,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAAyE,CAAC;QACnF,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,6BAA6B,CAAC,iBAAiB,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBACpI,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAmD,CAAC,CAAC;YAC3F,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,6BAA6B,CAAC,iBAAiB,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBACtJ,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAmD,CAAC;gBACtE,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IA4BD,uCAAQ,GAAR,UAAS,YAAoB,EAAE,OAAmC,EAAE,QAAwE;QAC1I,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;QACD,IAAI,EAAE,GAAG,QAAyE,CAAC;QACnF,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,iCAAiC,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,YAA0C;gBACnH,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAmD,CAAC,CAAC;YAC3F,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAU;gBAClB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6DAAwB,CAAC,IAAI,CAAC,iCAAiC,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC,CAAC,UAAC,GAAU,EAAE,IAAkC;gBACrI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;gBACD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAmD,CAAC;gBACtE,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAEH,2BAAC;AAAD,CAAC","file":"resourceManagementClientBundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap b5f010ec06d1f980c42d","module.exports = msRest;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"msRest\"\n// module id = 0\n// module chunks = 0","/*\r\n * Code generated by Microsoft (R) AutoRest Code Generator.\r\n * Changes may cause incorrect behavior and will be lost if the code is\r\n * regenerated.\r\n */\r\n\r\nimport {CloudErrorMapper, BaseResourceMapper } from \"ms-rest-azure-js\";\r\n\r\nexport const CloudError = CloudErrorMapper;\r\nexport const BaseResource = BaseResourceMapper;\r\n\r\nexport const DeploymentExtendedFilter = {\r\n  required: false,\r\n  serializedName: 'DeploymentExtendedFilter',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'DeploymentExtendedFilter',\r\n    modelProperties: {\r\n      provisioningState: {\r\n        required: false,\r\n        serializedName: 'provisioningState',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const GenericResourceFilter = {\r\n  required: false,\r\n  serializedName: 'GenericResourceFilter',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'GenericResourceFilter',\r\n    modelProperties: {\r\n      resourceType: {\r\n        required: false,\r\n        serializedName: 'resourceType',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      tagname: {\r\n        required: false,\r\n        serializedName: 'tagname',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      tagvalue: {\r\n        required: false,\r\n        serializedName: 'tagvalue',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const ResourceGroupFilter = {\r\n  required: false,\r\n  serializedName: 'ResourceGroupFilter',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'ResourceGroupFilter',\r\n    modelProperties: {\r\n      tagName: {\r\n        required: false,\r\n        serializedName: 'tagName',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      tagValue: {\r\n        required: false,\r\n        serializedName: 'tagValue',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const TemplateLink = {\r\n  required: false,\r\n  serializedName: 'TemplateLink',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'TemplateLink',\r\n    modelProperties: {\r\n      uri: {\r\n        required: true,\r\n        serializedName: 'uri',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      contentVersion: {\r\n        required: false,\r\n        serializedName: 'contentVersion',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const ParametersLink = {\r\n  required: false,\r\n  serializedName: 'ParametersLink',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'ParametersLink',\r\n    modelProperties: {\r\n      uri: {\r\n        required: true,\r\n        serializedName: 'uri',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      contentVersion: {\r\n        required: false,\r\n        serializedName: 'contentVersion',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const DebugSetting = {\r\n  required: false,\r\n  serializedName: 'DebugSetting',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'DebugSetting',\r\n    modelProperties: {\r\n      detailLevel: {\r\n        required: false,\r\n        serializedName: 'detailLevel',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const DeploymentProperties = {\r\n  required: false,\r\n  serializedName: 'DeploymentProperties',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'DeploymentProperties',\r\n    modelProperties: {\r\n      template: {\r\n        required: false,\r\n        serializedName: 'template',\r\n        type: {\r\n          name: 'Object'\r\n        }\r\n      },\r\n      templateLink: {\r\n        required: false,\r\n        serializedName: 'templateLink',\r\n        type: {\r\n          name: 'Composite',\r\n          className: 'TemplateLink'\r\n        }\r\n      },\r\n      parameters: {\r\n        required: false,\r\n        serializedName: 'parameters',\r\n        type: {\r\n          name: 'Object'\r\n        }\r\n      },\r\n      parametersLink: {\r\n        required: false,\r\n        serializedName: 'parametersLink',\r\n        type: {\r\n          name: 'Composite',\r\n          className: 'ParametersLink'\r\n        }\r\n      },\r\n      mode: {\r\n        required: true,\r\n        serializedName: 'mode',\r\n        type: {\r\n          name: 'Enum',\r\n          allowedValues: [ 'Incremental', 'Complete' ]\r\n        }\r\n      },\r\n      debugSetting: {\r\n        required: false,\r\n        serializedName: 'debugSetting',\r\n        type: {\r\n          name: 'Composite',\r\n          className: 'DebugSetting'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const Deployment = {\r\n  required: false,\r\n  serializedName: 'Deployment',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'Deployment',\r\n    modelProperties: {\r\n      properties: {\r\n        required: true,\r\n        serializedName: 'properties',\r\n        type: {\r\n          name: 'Composite',\r\n          className: 'DeploymentProperties'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const DeploymentExportResult = {\r\n  required: false,\r\n  serializedName: 'DeploymentExportResult',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'DeploymentExportResult',\r\n    modelProperties: {\r\n      template: {\r\n        required: false,\r\n        serializedName: 'template',\r\n        type: {\r\n          name: 'Object'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const ResourceManagementErrorWithDetails = {\r\n  required: false,\r\n  serializedName: 'ResourceManagementErrorWithDetails',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'ResourceManagementErrorWithDetails',\r\n    modelProperties: {\r\n      code: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'code',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      message: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'message',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      target: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'target',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      details: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'details',\r\n        type: {\r\n          name: 'Sequence',\r\n          element: {\r\n              required: false,\r\n              serializedName: 'ResourceManagementErrorWithDetailsElementType',\r\n              type: {\r\n                name: 'Composite',\r\n                className: 'ResourceManagementErrorWithDetails'\r\n              }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const AliasPathType = {\r\n  required: false,\r\n  serializedName: 'AliasPathType',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'AliasPathType',\r\n    modelProperties: {\r\n      path: {\r\n        required: false,\r\n        serializedName: 'path',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      apiVersions: {\r\n        required: false,\r\n        serializedName: 'apiVersions',\r\n        type: {\r\n          name: 'Sequence',\r\n          element: {\r\n              required: false,\r\n              serializedName: 'stringElementType',\r\n              type: {\r\n                name: 'String'\r\n              }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const AliasType = {\r\n  required: false,\r\n  serializedName: 'AliasType',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'AliasType',\r\n    modelProperties: {\r\n      name: {\r\n        required: false,\r\n        serializedName: 'name',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      paths: {\r\n        required: false,\r\n        serializedName: 'paths',\r\n        type: {\r\n          name: 'Sequence',\r\n          element: {\r\n              required: false,\r\n              serializedName: 'AliasPathTypeElementType',\r\n              type: {\r\n                name: 'Composite',\r\n                className: 'AliasPathType'\r\n              }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const ProviderResourceType = {\r\n  required: false,\r\n  serializedName: 'ProviderResourceType',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'ProviderResourceType',\r\n    modelProperties: {\r\n      resourceType: {\r\n        required: false,\r\n        serializedName: 'resourceType',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      locations: {\r\n        required: false,\r\n        serializedName: 'locations',\r\n        type: {\r\n          name: 'Sequence',\r\n          element: {\r\n              required: false,\r\n              serializedName: 'stringElementType',\r\n              type: {\r\n                name: 'String'\r\n              }\r\n          }\r\n        }\r\n      },\r\n      aliases: {\r\n        required: false,\r\n        serializedName: 'aliases',\r\n        type: {\r\n          name: 'Sequence',\r\n          element: {\r\n              required: false,\r\n              serializedName: 'AliasTypeElementType',\r\n              type: {\r\n                name: 'Composite',\r\n                className: 'AliasType'\r\n              }\r\n          }\r\n        }\r\n      },\r\n      apiVersions: {\r\n        required: false,\r\n        serializedName: 'apiVersions',\r\n        type: {\r\n          name: 'Sequence',\r\n          element: {\r\n              required: false,\r\n              serializedName: 'stringElementType',\r\n              type: {\r\n                name: 'String'\r\n              }\r\n          }\r\n        }\r\n      },\r\n      properties: {\r\n        required: false,\r\n        serializedName: 'properties',\r\n        type: {\r\n          name: 'Dictionary',\r\n          value: {\r\n              required: false,\r\n              serializedName: 'stringElementType',\r\n              type: {\r\n                name: 'String'\r\n              }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const Provider = {\r\n  required: false,\r\n  serializedName: 'Provider',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'Provider',\r\n    modelProperties: {\r\n      id: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'id',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      namespace: {\r\n        required: false,\r\n        serializedName: 'namespace',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      registrationState: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'registrationState',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      resourceTypes: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'resourceTypes',\r\n        type: {\r\n          name: 'Sequence',\r\n          element: {\r\n              required: false,\r\n              serializedName: 'ProviderResourceTypeElementType',\r\n              type: {\r\n                name: 'Composite',\r\n                className: 'ProviderResourceType'\r\n              }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const BasicDependency = {\r\n  required: false,\r\n  serializedName: 'BasicDependency',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'BasicDependency',\r\n    modelProperties: {\r\n      id: {\r\n        required: false,\r\n        serializedName: 'id',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      resourceType: {\r\n        required: false,\r\n        serializedName: 'resourceType',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      resourceName: {\r\n        required: false,\r\n        serializedName: 'resourceName',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const Dependency = {\r\n  required: false,\r\n  serializedName: 'Dependency',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'Dependency',\r\n    modelProperties: {\r\n      dependsOn: {\r\n        required: false,\r\n        serializedName: 'dependsOn',\r\n        type: {\r\n          name: 'Sequence',\r\n          element: {\r\n              required: false,\r\n              serializedName: 'BasicDependencyElementType',\r\n              type: {\r\n                name: 'Composite',\r\n                className: 'BasicDependency'\r\n              }\r\n          }\r\n        }\r\n      },\r\n      id: {\r\n        required: false,\r\n        serializedName: 'id',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      resourceType: {\r\n        required: false,\r\n        serializedName: 'resourceType',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      resourceName: {\r\n        required: false,\r\n        serializedName: 'resourceName',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const DeploymentPropertiesExtended = {\r\n  required: false,\r\n  serializedName: 'DeploymentPropertiesExtended',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'DeploymentPropertiesExtended',\r\n    modelProperties: {\r\n      provisioningState: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'provisioningState',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      correlationId: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'correlationId',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      timestamp: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'timestamp',\r\n        type: {\r\n          name: 'DateTime'\r\n        }\r\n      },\r\n      outputs: {\r\n        required: false,\r\n        serializedName: 'outputs',\r\n        type: {\r\n          name: 'Object'\r\n        }\r\n      },\r\n      providers: {\r\n        required: false,\r\n        serializedName: 'providers',\r\n        type: {\r\n          name: 'Sequence',\r\n          element: {\r\n              required: false,\r\n              serializedName: 'ProviderElementType',\r\n              type: {\r\n                name: 'Composite',\r\n                className: 'Provider'\r\n              }\r\n          }\r\n        }\r\n      },\r\n      dependencies: {\r\n        required: false,\r\n        serializedName: 'dependencies',\r\n        type: {\r\n          name: 'Sequence',\r\n          element: {\r\n              required: false,\r\n              serializedName: 'DependencyElementType',\r\n              type: {\r\n                name: 'Composite',\r\n                className: 'Dependency'\r\n              }\r\n          }\r\n        }\r\n      },\r\n      template: {\r\n        required: false,\r\n        serializedName: 'template',\r\n        type: {\r\n          name: 'Object'\r\n        }\r\n      },\r\n      templateLink: {\r\n        required: false,\r\n        serializedName: 'templateLink',\r\n        type: {\r\n          name: 'Composite',\r\n          className: 'TemplateLink'\r\n        }\r\n      },\r\n      parameters: {\r\n        required: false,\r\n        serializedName: 'parameters',\r\n        type: {\r\n          name: 'Object'\r\n        }\r\n      },\r\n      parametersLink: {\r\n        required: false,\r\n        serializedName: 'parametersLink',\r\n        type: {\r\n          name: 'Composite',\r\n          className: 'ParametersLink'\r\n        }\r\n      },\r\n      mode: {\r\n        required: false,\r\n        serializedName: 'mode',\r\n        type: {\r\n          name: 'Enum',\r\n          allowedValues: [ 'Incremental', 'Complete' ]\r\n        }\r\n      },\r\n      debugSetting: {\r\n        required: false,\r\n        serializedName: 'debugSetting',\r\n        type: {\r\n          name: 'Composite',\r\n          className: 'DebugSetting'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const DeploymentValidateResult = {\r\n  required: false,\r\n  serializedName: 'DeploymentValidateResult',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'DeploymentValidateResult',\r\n    modelProperties: {\r\n      error: {\r\n        required: false,\r\n        serializedName: 'error',\r\n        type: {\r\n          name: 'Composite',\r\n          className: 'ResourceManagementErrorWithDetails'\r\n        }\r\n      },\r\n      properties: {\r\n        required: false,\r\n        serializedName: 'properties',\r\n        type: {\r\n          name: 'Composite',\r\n          className: 'DeploymentPropertiesExtended'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const DeploymentExtended = {\r\n  required: false,\r\n  serializedName: 'DeploymentExtended',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'DeploymentExtended',\r\n    modelProperties: {\r\n      id: {\r\n        required: false,\r\n        serializedName: 'id',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      name: {\r\n        required: true,\r\n        serializedName: 'name',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      properties: {\r\n        required: false,\r\n        serializedName: 'properties',\r\n        type: {\r\n          name: 'Composite',\r\n          className: 'DeploymentPropertiesExtended'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const Plan = {\r\n  required: false,\r\n  serializedName: 'Plan',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'Plan',\r\n    modelProperties: {\r\n      name: {\r\n        required: false,\r\n        serializedName: 'name',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      publisher: {\r\n        required: false,\r\n        serializedName: 'publisher',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      product: {\r\n        required: false,\r\n        serializedName: 'product',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      promotionCode: {\r\n        required: false,\r\n        serializedName: 'promotionCode',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      version: {\r\n        required: false,\r\n        serializedName: 'version',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const Sku = {\r\n  required: false,\r\n  serializedName: 'Sku',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'Sku',\r\n    modelProperties: {\r\n      name: {\r\n        required: false,\r\n        serializedName: 'name',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      tier: {\r\n        required: false,\r\n        serializedName: 'tier',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      size: {\r\n        required: false,\r\n        serializedName: 'size',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      family: {\r\n        required: false,\r\n        serializedName: 'family',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      model: {\r\n        required: false,\r\n        serializedName: 'model',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      capacity: {\r\n        required: false,\r\n        serializedName: 'capacity',\r\n        type: {\r\n          name: 'Number'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const Identity = {\r\n  required: false,\r\n  serializedName: 'Identity',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'Identity',\r\n    modelProperties: {\r\n      principalId: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'principalId',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      tenantId: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'tenantId',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      type: {\r\n        required: false,\r\n        serializedName: 'type',\r\n        type: {\r\n          name: 'Enum',\r\n          allowedValues: [ 'SystemAssigned' ]\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const Resource = {\r\n  required: false,\r\n  serializedName: 'Resource',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'Resource',\r\n    modelProperties: {\r\n      id: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'id',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      name: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'name',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      type: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'type',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      location: {\r\n        required: false,\r\n        serializedName: 'location',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      tags: {\r\n        required: false,\r\n        serializedName: 'tags',\r\n        type: {\r\n          name: 'Dictionary',\r\n          value: {\r\n              required: false,\r\n              serializedName: 'stringElementType',\r\n              type: {\r\n                name: 'String'\r\n              }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const GenericResource = {\r\n  required: false,\r\n  serializedName: 'GenericResource',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'GenericResource',\r\n    modelProperties: {\r\n      id: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'id',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      name: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'name',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      type: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'type',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      location: {\r\n        required: false,\r\n        serializedName: 'location',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      tags: {\r\n        required: false,\r\n        serializedName: 'tags',\r\n        type: {\r\n          name: 'Dictionary',\r\n          value: {\r\n              required: false,\r\n              serializedName: 'stringElementType',\r\n              type: {\r\n                name: 'String'\r\n              }\r\n          }\r\n        }\r\n      },\r\n      plan: {\r\n        required: false,\r\n        serializedName: 'plan',\r\n        type: {\r\n          name: 'Composite',\r\n          className: 'Plan'\r\n        }\r\n      },\r\n      properties: {\r\n        required: false,\r\n        serializedName: 'properties',\r\n        type: {\r\n          name: 'Object'\r\n        }\r\n      },\r\n      kind: {\r\n        required: false,\r\n        serializedName: 'kind',\r\n        constraints: {\r\n          Pattern: '^[-\\w\\._,\\(\\)]+$'\r\n        },\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      managedBy: {\r\n        required: false,\r\n        serializedName: 'managedBy',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      sku: {\r\n        required: false,\r\n        serializedName: 'sku',\r\n        type: {\r\n          name: 'Composite',\r\n          className: 'Sku'\r\n        }\r\n      },\r\n      identity: {\r\n        required: false,\r\n        serializedName: 'identity',\r\n        type: {\r\n          name: 'Composite',\r\n          className: 'Identity'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const ResourceGroupProperties = {\r\n  required: false,\r\n  serializedName: 'ResourceGroupProperties',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'ResourceGroupProperties',\r\n    modelProperties: {\r\n      provisioningState: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'provisioningState',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const ResourceGroup = {\r\n  required: false,\r\n  serializedName: 'ResourceGroup',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'ResourceGroup',\r\n    modelProperties: {\r\n      id: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'id',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      name: {\r\n        required: false,\r\n        serializedName: 'name',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      properties: {\r\n        required: false,\r\n        serializedName: 'properties',\r\n        type: {\r\n          name: 'Composite',\r\n          className: 'ResourceGroupProperties'\r\n        }\r\n      },\r\n      location: {\r\n        required: true,\r\n        serializedName: 'location',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      managedBy: {\r\n        required: false,\r\n        serializedName: 'managedBy',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      tags: {\r\n        required: false,\r\n        serializedName: 'tags',\r\n        type: {\r\n          name: 'Dictionary',\r\n          value: {\r\n              required: false,\r\n              serializedName: 'stringElementType',\r\n              type: {\r\n                name: 'String'\r\n              }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const ResourceGroupPatchable = {\r\n  required: false,\r\n  serializedName: 'ResourceGroupPatchable',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'ResourceGroupPatchable',\r\n    modelProperties: {\r\n      name: {\r\n        required: false,\r\n        serializedName: 'name',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      properties: {\r\n        required: false,\r\n        serializedName: 'properties',\r\n        type: {\r\n          name: 'Composite',\r\n          className: 'ResourceGroupProperties'\r\n        }\r\n      },\r\n      managedBy: {\r\n        required: false,\r\n        serializedName: 'managedBy',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      tags: {\r\n        required: false,\r\n        serializedName: 'tags',\r\n        type: {\r\n          name: 'Dictionary',\r\n          value: {\r\n              required: false,\r\n              serializedName: 'stringElementType',\r\n              type: {\r\n                name: 'String'\r\n              }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const ResourcesMoveInfo = {\r\n  required: false,\r\n  serializedName: 'ResourcesMoveInfo',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'ResourcesMoveInfo',\r\n    modelProperties: {\r\n      resources: {\r\n        required: false,\r\n        serializedName: 'resources',\r\n        type: {\r\n          name: 'Sequence',\r\n          element: {\r\n              required: false,\r\n              serializedName: 'stringElementType',\r\n              type: {\r\n                name: 'String'\r\n              }\r\n          }\r\n        }\r\n      },\r\n      targetResourceGroup: {\r\n        required: false,\r\n        serializedName: 'targetResourceGroup',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const ExportTemplateRequest = {\r\n  required: false,\r\n  serializedName: 'ExportTemplateRequest',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'ExportTemplateRequest',\r\n    modelProperties: {\r\n      resources: {\r\n        required: false,\r\n        serializedName: 'resources',\r\n        type: {\r\n          name: 'Sequence',\r\n          element: {\r\n              required: false,\r\n              serializedName: 'stringElementType',\r\n              type: {\r\n                name: 'String'\r\n              }\r\n          }\r\n        }\r\n      },\r\n      options: {\r\n        required: false,\r\n        serializedName: 'options',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const TagCount = {\r\n  required: false,\r\n  serializedName: 'TagCount',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'TagCount',\r\n    modelProperties: {\r\n      type: {\r\n        required: false,\r\n        serializedName: 'type',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      value: {\r\n        required: false,\r\n        serializedName: 'value',\r\n        type: {\r\n          name: 'Number'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const TagValue = {\r\n  required: false,\r\n  serializedName: 'TagValue',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'TagValue',\r\n    modelProperties: {\r\n      id: {\r\n        required: false,\r\n        serializedName: 'id',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      tagValue: {\r\n        required: false,\r\n        serializedName: 'tagValue',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      count: {\r\n        required: false,\r\n        serializedName: 'count',\r\n        type: {\r\n          name: 'Composite',\r\n          className: 'TagCount'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const TagDetails = {\r\n  required: false,\r\n  serializedName: 'TagDetails',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'TagDetails',\r\n    modelProperties: {\r\n      id: {\r\n        required: false,\r\n        serializedName: 'id',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      tagName: {\r\n        required: false,\r\n        serializedName: 'tagName',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      count: {\r\n        required: false,\r\n        serializedName: 'count',\r\n        type: {\r\n          name: 'Composite',\r\n          className: 'TagCount'\r\n        }\r\n      },\r\n      values: {\r\n        required: false,\r\n        serializedName: 'values',\r\n        type: {\r\n          name: 'Sequence',\r\n          element: {\r\n              required: false,\r\n              serializedName: 'TagValueElementType',\r\n              type: {\r\n                name: 'Composite',\r\n                className: 'TagValue'\r\n              }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const TargetResource = {\r\n  required: false,\r\n  serializedName: 'TargetResource',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'TargetResource',\r\n    modelProperties: {\r\n      id: {\r\n        required: false,\r\n        serializedName: 'id',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      resourceName: {\r\n        required: false,\r\n        serializedName: 'resourceName',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      resourceType: {\r\n        required: false,\r\n        serializedName: 'resourceType',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const HttpMessage = {\r\n  required: false,\r\n  serializedName: 'HttpMessage',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'HttpMessage',\r\n    modelProperties: {\r\n      content: {\r\n        required: false,\r\n        serializedName: 'content',\r\n        type: {\r\n          name: 'Object'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const DeploymentOperationProperties = {\r\n  required: false,\r\n  serializedName: 'DeploymentOperationProperties',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'DeploymentOperationProperties',\r\n    modelProperties: {\r\n      provisioningState: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'provisioningState',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      timestamp: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'timestamp',\r\n        type: {\r\n          name: 'DateTime'\r\n        }\r\n      },\r\n      serviceRequestId: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'serviceRequestId',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      statusCode: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'statusCode',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      statusMessage: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'statusMessage',\r\n        type: {\r\n          name: 'Object'\r\n        }\r\n      },\r\n      targetResource: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'targetResource',\r\n        type: {\r\n          name: 'Composite',\r\n          className: 'TargetResource'\r\n        }\r\n      },\r\n      request: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'request',\r\n        type: {\r\n          name: 'Composite',\r\n          className: 'HttpMessage'\r\n        }\r\n      },\r\n      response: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'response',\r\n        type: {\r\n          name: 'Composite',\r\n          className: 'HttpMessage'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const DeploymentOperation = {\r\n  required: false,\r\n  serializedName: 'DeploymentOperation',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'DeploymentOperation',\r\n    modelProperties: {\r\n      id: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'id',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      operationId: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'operationId',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      properties: {\r\n        required: false,\r\n        serializedName: 'properties',\r\n        type: {\r\n          name: 'Composite',\r\n          className: 'DeploymentOperationProperties'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const ResourceProviderOperationDisplayProperties = {\r\n  required: false,\r\n  serializedName: 'ResourceProviderOperationDisplayProperties',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'ResourceProviderOperationDisplayProperties',\r\n    modelProperties: {\r\n      publisher: {\r\n        required: false,\r\n        serializedName: 'publisher',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      provider: {\r\n        required: false,\r\n        serializedName: 'provider',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      resource: {\r\n        required: false,\r\n        serializedName: 'resource',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      operation: {\r\n        required: false,\r\n        serializedName: 'operation',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      description: {\r\n        required: false,\r\n        serializedName: 'description',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const SubResource = {\r\n  required: false,\r\n  serializedName: 'SubResource',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'SubResource',\r\n    modelProperties: {\r\n      id: {\r\n        required: false,\r\n        serializedName: 'id',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const ResourceGroupExportResult = {\r\n  required: false,\r\n  serializedName: 'ResourceGroupExportResult',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'ResourceGroupExportResult',\r\n    modelProperties: {\r\n      template: {\r\n        required: false,\r\n        serializedName: 'template',\r\n        type: {\r\n          name: 'Object'\r\n        }\r\n      },\r\n      error: {\r\n        required: false,\r\n        serializedName: 'error',\r\n        type: {\r\n          name: 'Composite',\r\n          className: 'ResourceManagementErrorWithDetails'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const DeploymentsListByResourceGroupOptionalParams = {\r\n  required: false,\r\n  serializedName: 'ListByResourceGroupOptions',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'DeploymentsListByResourceGroupOptionalParams',\r\n    modelProperties: {\r\n      filter: {\r\n        required: false,\r\n        serializedName: '$filter',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      top: {\r\n        required: false,\r\n        serializedName: '$top',\r\n        type: {\r\n          name: 'Number'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const ProvidersListOptionalParams = {\r\n  required: false,\r\n  serializedName: 'ListOptions',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'ProvidersListOptionalParams',\r\n    modelProperties: {\r\n      top: {\r\n        required: false,\r\n        serializedName: '$top',\r\n        type: {\r\n          name: 'Number'\r\n        }\r\n      },\r\n      expand: {\r\n        required: false,\r\n        serializedName: '$expand',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const ProvidersGetOptionalParams = {\r\n  required: false,\r\n  serializedName: 'GetOptions',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'ProvidersGetOptionalParams',\r\n    modelProperties: {\r\n      expand: {\r\n        required: false,\r\n        serializedName: '$expand',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const ResourcesListByResourceGroupOptionalParams = {\r\n  required: false,\r\n  serializedName: 'ListByResourceGroupOptions',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'ResourcesListByResourceGroupOptionalParams',\r\n    modelProperties: {\r\n      filter: {\r\n        required: false,\r\n        serializedName: '$filter',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      expand: {\r\n        required: false,\r\n        serializedName: '$expand',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      top: {\r\n        required: false,\r\n        serializedName: '$top',\r\n        type: {\r\n          name: 'Number'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const ResourcesListOptionalParams = {\r\n  required: false,\r\n  serializedName: 'ListOptions',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'ResourcesListOptionalParams',\r\n    modelProperties: {\r\n      filter: {\r\n        required: false,\r\n        serializedName: '$filter',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      expand: {\r\n        required: false,\r\n        serializedName: '$expand',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      top: {\r\n        required: false,\r\n        serializedName: '$top',\r\n        type: {\r\n          name: 'Number'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const ResourceGroupsListOptionalParams = {\r\n  required: false,\r\n  serializedName: 'ListOptions',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'ResourceGroupsListOptionalParams',\r\n    modelProperties: {\r\n      filter: {\r\n        required: false,\r\n        serializedName: '$filter',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      top: {\r\n        required: false,\r\n        serializedName: '$top',\r\n        type: {\r\n          name: 'Number'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const DeploymentOperationsListOptionalParams = {\r\n  required: false,\r\n  serializedName: 'ListOptions',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'DeploymentOperationsListOptionalParams',\r\n    modelProperties: {\r\n      top: {\r\n        required: false,\r\n        serializedName: '$top',\r\n        type: {\r\n          name: 'Number'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const DeploymentListResult = {\r\n  required: false,\r\n  serializedName: 'DeploymentListResult',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'DeploymentListResult',\r\n    modelProperties: {\r\n      value: {\r\n        required: false,\r\n        serializedName: '',\r\n        type: {\r\n          name: 'Sequence',\r\n          element: {\r\n              required: false,\r\n              serializedName: 'DeploymentExtendedElementType',\r\n              type: {\r\n                name: 'Composite',\r\n                className: 'DeploymentExtended'\r\n              }\r\n          }\r\n        }\r\n      },\r\n      nextLink: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'nextLink',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const ProviderListResult = {\r\n  required: false,\r\n  serializedName: 'ProviderListResult',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'ProviderListResult',\r\n    modelProperties: {\r\n      value: {\r\n        required: false,\r\n        serializedName: '',\r\n        type: {\r\n          name: 'Sequence',\r\n          element: {\r\n              required: false,\r\n              serializedName: 'ProviderElementType',\r\n              type: {\r\n                name: 'Composite',\r\n                className: 'Provider'\r\n              }\r\n          }\r\n        }\r\n      },\r\n      nextLink: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'nextLink',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const ResourceListResult = {\r\n  required: false,\r\n  serializedName: 'ResourceListResult',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'ResourceListResult',\r\n    modelProperties: {\r\n      value: {\r\n        required: false,\r\n        serializedName: '',\r\n        type: {\r\n          name: 'Sequence',\r\n          element: {\r\n              required: false,\r\n              serializedName: 'GenericResourceElementType',\r\n              type: {\r\n                name: 'Composite',\r\n                className: 'GenericResource'\r\n              }\r\n          }\r\n        }\r\n      },\r\n      nextLink: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'nextLink',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const ResourceGroupListResult = {\r\n  required: false,\r\n  serializedName: 'ResourceGroupListResult',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'ResourceGroupListResult',\r\n    modelProperties: {\r\n      value: {\r\n        required: false,\r\n        serializedName: '',\r\n        type: {\r\n          name: 'Sequence',\r\n          element: {\r\n              required: false,\r\n              serializedName: 'ResourceGroupElementType',\r\n              type: {\r\n                name: 'Composite',\r\n                className: 'ResourceGroup'\r\n              }\r\n          }\r\n        }\r\n      },\r\n      nextLink: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'nextLink',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const TagsListResult = {\r\n  required: false,\r\n  serializedName: 'TagsListResult',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'TagsListResult',\r\n    modelProperties: {\r\n      value: {\r\n        required: false,\r\n        serializedName: '',\r\n        type: {\r\n          name: 'Sequence',\r\n          element: {\r\n              required: false,\r\n              serializedName: 'TagDetailsElementType',\r\n              type: {\r\n                name: 'Composite',\r\n                className: 'TagDetails'\r\n              }\r\n          }\r\n        }\r\n      },\r\n      nextLink: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'nextLink',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const DeploymentOperationsListResult = {\r\n  required: false,\r\n  serializedName: 'DeploymentOperationsListResult',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'DeploymentOperationsListResult',\r\n    modelProperties: {\r\n      value: {\r\n        required: false,\r\n        serializedName: '',\r\n        type: {\r\n          name: 'Sequence',\r\n          element: {\r\n              required: false,\r\n              serializedName: 'DeploymentOperationElementType',\r\n              type: {\r\n                name: 'Composite',\r\n                className: 'DeploymentOperation'\r\n              }\r\n          }\r\n        }\r\n      },\r\n      nextLink: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'nextLink',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./lib/resource/models/mappers.ts","module.exports = msRestAzure;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"msRestAzure\"\n// module id = 2\n// module chunks = 0","/*\r\n * Code generated by Microsoft (R) AutoRest Code Generator.\r\n * Changes may cause incorrect behavior and will be lost if the code is\r\n * regenerated.\r\n */\r\n\r\nimport {CloudErrorMapper, BaseResourceMapper } from \"ms-rest-azure-js\";\r\n\r\nexport const CloudError = CloudErrorMapper;\r\nexport const BaseResource = BaseResourceMapper;\r\n\r\nexport const Location = {\r\n  required: false,\r\n  serializedName: 'Location',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'Location',\r\n    modelProperties: {\r\n      id: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'id',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      subscriptionId: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'subscriptionId',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      name: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'name',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      displayName: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'displayName',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      latitude: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'latitude',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      longitude: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'longitude',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const SubscriptionPolicies = {\r\n  required: false,\r\n  serializedName: 'SubscriptionPolicies',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'SubscriptionPolicies',\r\n    modelProperties: {\r\n      locationPlacementId: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'locationPlacementId',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      quotaId: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'quotaId',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      spendingLimit: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'spendingLimit',\r\n        type: {\r\n          name: 'Enum',\r\n          allowedValues: [ 'On', 'Off', 'CurrentPeriodOff' ]\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const Subscription = {\r\n  required: false,\r\n  serializedName: 'Subscription',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'Subscription',\r\n    modelProperties: {\r\n      id: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'id',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      subscriptionId: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'subscriptionId',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      displayName: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'displayName',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      state: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'state',\r\n        type: {\r\n          name: 'Enum',\r\n          allowedValues: [ 'Enabled', 'Warned', 'PastDue', 'Disabled', 'Deleted' ]\r\n        }\r\n      },\r\n      subscriptionPolicies: {\r\n        required: false,\r\n        serializedName: 'subscriptionPolicies',\r\n        type: {\r\n          name: 'Composite',\r\n          className: 'SubscriptionPolicies'\r\n        }\r\n      },\r\n      authorizationSource: {\r\n        required: false,\r\n        serializedName: 'authorizationSource',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const TenantIdDescription = {\r\n  required: false,\r\n  serializedName: 'TenantIdDescription',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'TenantIdDescription',\r\n    modelProperties: {\r\n      id: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'id',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      },\r\n      tenantId: {\r\n        required: false,\r\n        readOnly: true,\r\n        serializedName: 'tenantId',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const LocationListResult = {\r\n  required: false,\r\n  serializedName: 'LocationListResult',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'LocationListResult',\r\n    modelProperties: {\r\n      value: {\r\n        required: false,\r\n        serializedName: '',\r\n        type: {\r\n          name: 'Sequence',\r\n          element: {\r\n              required: false,\r\n              serializedName: 'LocationElementType',\r\n              type: {\r\n                name: 'Composite',\r\n                className: 'Location'\r\n              }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const SubscriptionListResult = {\r\n  required: false,\r\n  serializedName: 'SubscriptionListResult',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'SubscriptionListResult',\r\n    modelProperties: {\r\n      value: {\r\n        required: false,\r\n        serializedName: '',\r\n        type: {\r\n          name: 'Sequence',\r\n          element: {\r\n              required: false,\r\n              serializedName: 'SubscriptionElementType',\r\n              type: {\r\n                name: 'Composite',\r\n                className: 'Subscription'\r\n              }\r\n          }\r\n        }\r\n      },\r\n      nextLink: {\r\n        required: true,\r\n        serializedName: 'nextLink',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const TenantListResult = {\r\n  required: false,\r\n  serializedName: 'TenantListResult',\r\n  type: {\r\n    name: 'Composite',\r\n    className: 'TenantListResult',\r\n    modelProperties: {\r\n      value: {\r\n        required: false,\r\n        serializedName: '',\r\n        type: {\r\n          name: 'Sequence',\r\n          element: {\r\n              required: false,\r\n              serializedName: 'TenantIdDescriptionElementType',\r\n              type: {\r\n                name: 'Composite',\r\n                className: 'TenantIdDescription'\r\n              }\r\n          }\r\n        }\r\n      },\r\n      nextLink: {\r\n        required: true,\r\n        serializedName: 'nextLink',\r\n        type: {\r\n          name: 'String'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./lib/subscription/models/mappers.ts","//\r\n// Copyright (c) Microsoft and contributors.  All rights reserved.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n//\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n//\r\n'use strict';\r\n\r\n// exports.ManagementLockClient = require('./lock/managementLockClient');\r\n// exports.FeatureClient = require('./feature/featureClient');\r\nexports.SubscriptionClient = require('./subscription/subscriptionClient');\r\nexports.ResourceManagementClient = require('./resource/resourceManagementClient');\r\n// exports.PolicyClient = require('./policy/policyClient');\r\n// exports.ManagementLinkClient = require('./link/managementLinkClient');\r\n// exports.ManagementGroupsClient = require('./management/managementGroupsClient');\r\nexports = module.exports;\n\n\n// WEBPACK FOOTER //\n// ./lib/resource.ts","/*\r\n * Code generated by Microsoft (R) AutoRest Code Generator.\r\n * Changes may cause incorrect behavior and will be lost if the code is\r\n * regenerated.\r\n */\r\n\r\nimport * as Models from \"./models\";\r\nimport * as Mappers from \"./models/mappers\";\r\nimport * as msRest from \"ms-rest-js\";\r\nimport * as msRestAzure from \"ms-rest-azure-js\";\r\nimport * as operations from \"./operations\";\r\n\r\nconst packageName = \"\";\r\nconst packageVersion = \"\";\r\n\r\nclass SubscriptionClient extends msRestAzure.AzureServiceClient {\r\n\r\n  credentials: msRest.ServiceClientCredentials;\r\n\r\n  apiVersion: string;\r\n\r\n  acceptLanguage: string;\r\n\r\n  longRunningOperationRetryTimeout: number;\r\n\r\n  generateClientRequestId: boolean;\r\n  baseUri: string;\r\n\r\n  // Operation groups\r\n  subscriptions: operations.Subscriptions;\r\n  tenants: operations.Tenants;\r\n  serializer: msRest.Serializer;\r\n\r\n  /**\r\n   * @class\r\n   * Initializes a new instance of the SubscriptionClient class.\r\n   * @constructor\r\n   *\r\n   * @param {msRest.ServiceClientCredentials} credentials - Credentials needed for the client to connect to Azure.\r\n   *\r\n   * @param {string} [baseUri] - The base URI of the service.\r\n   *\r\n   * @param {object} [options] - The parameter options\r\n   *\r\n   * @param {Array} [options.filters] - Filters to be added to the request pipeline\r\n   *\r\n   * @param {object} [options.requestOptions] - The request options. Detailed info can be found at\r\n   * {@link https://github.github.io/fetch/#Request Options doc}\r\n   *\r\n   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy\r\n   *\r\n   * @param {string} [options.acceptLanguage] - Gets or sets the preferred language for the response.\r\n   *\r\n   * @param {number} [options.longRunningOperationRetryTimeout] - Gets or sets the retry timeout in seconds for Long Running Operations. Default value is 30.\r\n   *\r\n   * @param {boolean} [options.generateClientRequestId] - When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true.\r\n   *\r\n   */\r\n  constructor(credentials: msRest.ServiceClientCredentials, baseUri?: string, options?: msRestAzure.AzureServiceClientOptions) {\r\n    if (credentials === null || credentials === undefined) {\r\n      throw new Error('\\'credentials\\' cannot be null.');\r\n    }\r\n\r\n    if (!options) options = {};\r\n\r\n    super(credentials, options);\r\n\r\n    this.apiVersion = '2016-06-01';\r\n    this.acceptLanguage = 'en-US';\r\n    this.longRunningOperationRetryTimeout = 30;\r\n    this.generateClientRequestId = true;\r\n    this.baseUri = baseUri as string;\r\n    if (!this.baseUri) {\r\n      this.baseUri = 'https://management.azure.com';\r\n    }\r\n    this.credentials = credentials;\r\n\r\n    this.addUserAgentInfo(`${packageName}/${packageVersion}`);\r\n    if(options.acceptLanguage !== null && options.acceptLanguage !== undefined) {\r\n      this.acceptLanguage = options.acceptLanguage;\r\n    }\r\n    if(options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {\r\n      this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;\r\n    }\r\n    if(options.generateClientRequestId !== null && options.generateClientRequestId !== undefined) {\r\n      this.generateClientRequestId = options.generateClientRequestId;\r\n    }\r\n    this.subscriptions = new operations.Subscriptions(this);\r\n    this.tenants = new operations.Tenants(this);\r\n    this.serializer = new msRest.Serializer(Mappers);\r\n  }\r\n}\r\n\r\nexport { SubscriptionClient, Models as SubscriptionModels, Mappers as SubscriptionMappers };\r\n\n\n\n// WEBPACK FOOTER //\n// ./lib/subscription/subscriptionClient.ts","/*\r\n * Code generated by Microsoft (R) AutoRest Code Generator.\r\n * Changes may cause incorrect behavior and will be lost if the code is\r\n * regenerated.\r\n */\r\n\r\nimport { BaseResource, CloudError } from \"ms-rest-azure-js\";\r\n\r\nexport { BaseResource, CloudError };\r\n\r\n\r\n/**\r\n * @interface\r\n * An interface representing Location.\r\n * Location information.\r\n *\r\n */\r\nexport interface Location {\r\n  /**\r\n   * @member {string} [id] The fully qualified ID of the location. For example,\r\n   * /subscriptions/00000000-0000-0000-0000-000000000000/locations/westus.\r\n   */\r\n  readonly id?: string;\r\n  /**\r\n   * @member {string} [subscriptionId] The subscription ID.\r\n   */\r\n  readonly subscriptionId?: string;\r\n  /**\r\n   * @member {string} [name] The location name.\r\n   */\r\n  readonly name?: string;\r\n  /**\r\n   * @member {string} [displayName] The display name of the location.\r\n   */\r\n  readonly displayName?: string;\r\n  /**\r\n   * @member {string} [latitude] The latitude of the location.\r\n   */\r\n  readonly latitude?: string;\r\n  /**\r\n   * @member {string} [longitude] The longitude of the location.\r\n   */\r\n  readonly longitude?: string;\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing SubscriptionPolicies.\r\n * Subscription policies.\r\n *\r\n */\r\nexport interface SubscriptionPolicies {\r\n  /**\r\n   * @member {string} [locationPlacementId] The subscription location placement\r\n   * ID. The ID indicates which regions are visible for a subscription. For\r\n   * example, a subscription with a location placement Id of Public_2014-09-01\r\n   * has access to Azure public regions.\r\n   */\r\n  readonly locationPlacementId?: string;\r\n  /**\r\n   * @member {string} [quotaId] The subscription quota ID.\r\n   */\r\n  readonly quotaId?: string;\r\n  /**\r\n   * @member {SpendingLimit} [spendingLimit] The subscription spending limit.\r\n   * Possible values include: 'On', 'Off', 'CurrentPeriodOff'\r\n   */\r\n  readonly spendingLimit?: SpendingLimit;\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing Subscription.\r\n * Subscription information.\r\n *\r\n */\r\nexport interface Subscription {\r\n  /**\r\n   * @member {string} [id] The fully qualified ID for the subscription. For\r\n   * example, /subscriptions/00000000-0000-0000-0000-000000000000.\r\n   */\r\n  readonly id?: string;\r\n  /**\r\n   * @member {string} [subscriptionId] The subscription ID.\r\n   */\r\n  readonly subscriptionId?: string;\r\n  /**\r\n   * @member {string} [displayName] The subscription display name.\r\n   */\r\n  readonly displayName?: string;\r\n  /**\r\n   * @member {SubscriptionState} [state] The subscription state. Possible\r\n   * values are Enabled, Warned, PastDue, Disabled, and Deleted. Possible\r\n   * values include: 'Enabled', 'Warned', 'PastDue', 'Disabled', 'Deleted'\r\n   */\r\n  readonly state?: SubscriptionState;\r\n  /**\r\n   * @member {SubscriptionPolicies} [subscriptionPolicies] The subscription\r\n   * policies.\r\n   */\r\n  subscriptionPolicies?: SubscriptionPolicies;\r\n  /**\r\n   * @member {string} [authorizationSource] The authorization source of the\r\n   * request. Valid values are one or more combinations of Legacy, RoleBased,\r\n   * Bypassed, Direct and Management. For example, 'Legacy, RoleBased'.\r\n   */\r\n  authorizationSource?: string;\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing TenantIdDescription.\r\n * Tenant Id information.\r\n *\r\n */\r\nexport interface TenantIdDescription {\r\n  /**\r\n   * @member {string} [id] The fully qualified ID of the tenant. For example,\r\n   * /tenants/00000000-0000-0000-0000-000000000000.\r\n   */\r\n  readonly id?: string;\r\n  /**\r\n   * @member {string} [tenantId] The tenant ID. For example,\r\n   * 00000000-0000-0000-0000-000000000000.\r\n   */\r\n  readonly tenantId?: string;\r\n}\r\n\r\n\r\n/**\r\n * @interface\r\n * An interface representing the LocationListResult.\r\n * Location list operation response.\r\n *\r\n * @extends Array<Location>\r\n */\r\nexport interface LocationListResult extends Array<Location> {\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing the SubscriptionListResult.\r\n * Subscription list operation response.\r\n *\r\n * @extends Array<Subscription>\r\n */\r\nexport interface SubscriptionListResult extends Array<Subscription> {\r\n  /**\r\n   * @member {string} nextLink The URL to get the next set of results.\r\n   */\r\n  nextLink: string;\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing the TenantListResult.\r\n * Tenant Ids information.\r\n *\r\n * @extends Array<TenantIdDescription>\r\n */\r\nexport interface TenantListResult extends Array<TenantIdDescription> {\r\n  /**\r\n   * @member {string} nextLink The URL to use for getting the next set of\r\n   * results.\r\n   */\r\n  nextLink: string;\r\n}\r\n\r\n/**\r\n * Defines values for SubscriptionState.\r\n * Possible values include: 'Enabled', 'Warned', 'PastDue', 'Disabled',\r\n * 'Deleted'\r\n * @readonly\r\n * @enum {string}\r\n */\r\nexport enum SubscriptionState {\r\n  Enabled = 'Enabled',\r\n  Warned = 'Warned',\r\n  PastDue = 'PastDue',\r\n  Disabled = 'Disabled',\r\n  Deleted = 'Deleted',\r\n}\r\n\r\n/**\r\n * Defines values for SpendingLimit.\r\n * Possible values include: 'On', 'Off', 'CurrentPeriodOff'\r\n * @readonly\r\n * @enum {string}\r\n */\r\nexport enum SpendingLimit {\r\n  On = 'On',\r\n  Off = 'Off',\r\n  CurrentPeriodOff = 'CurrentPeriodOff',\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./lib/subscription/models/index.ts","/*\r\n * Code generated by Microsoft (R) AutoRest Code Generator.\r\n * Changes may cause incorrect behavior and will be lost if the code is\r\n * regenerated.\r\n */\r\n\r\nimport { Subscriptions } from \"./subscriptions\";\r\nimport { Tenants } from \"./tenants\";\r\n\r\nexport { Subscriptions, Tenants };\r\n\n\n\n// WEBPACK FOOTER //\n// ./lib/subscription/operations/index.ts","/*\r\n * Code generated by Microsoft (R) AutoRest Code Generator.\r\n * Changes may cause incorrect behavior and will be lost if the code is\r\n * regenerated.\r\n */\r\n\r\nimport * as msRest from \"ms-rest-js\";\r\nimport * as Models from \"../models\";\r\nimport * as Mappers from \"../models/mappers\";\r\nimport { SubscriptionClient } from \"../subscriptionClient\";\r\n\r\nconst WebResource = msRest.WebResource;\r\n\r\n/** Class representing a Subscriptions. */\r\nexport class Subscriptions {\r\n  private readonly client: SubscriptionClient;\r\n  /**\r\n   * Create a Subscriptions.\r\n   * @param {SubscriptionClient} client Reference to the service client.\r\n   */\r\n  constructor(client: SubscriptionClient) {\r\n    this.client = client;\r\n  }\r\n\r\n  /**\r\n   * @summary Gets all available geo-locations.\r\n   *\r\n   * This operation provides all the locations that are available for resource\r\n   * providers; however, each resource provider may support a subset of this\r\n   * list.\r\n   *\r\n   * @param {string} subscriptionId The ID of the target subscription.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async listLocationsWithHttpOperationResponse(subscriptionId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Validate\r\n    try {\r\n      if (subscriptionId === null || subscriptionId === undefined || typeof subscriptionId.valueOf() !== 'string') {\r\n        throw new Error('subscriptionId cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\r\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let baseUrl = this.client.baseUri;\r\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/locations';\r\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(subscriptionId));\r\n    let queryParamsArray: Array<any> = [];\r\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\r\n    if (queryParamsArray.length > 0) {\r\n      requestUrl += '?' + queryParamsArray.join('&');\r\n    }\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'GET';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 200) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n      // Deserialize Response\r\n      if (statusCode === 200) {\r\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedResponse !== null && parsedResponse !== undefined) {\r\n            let resultMapper = Mappers.LocationListResult;\r\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n          }\r\n        } catch (error) {\r\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n          deserializationError.request = msRest.stripRequest(httpRequest);\r\n          deserializationError.response = msRest.stripResponse(response);\r\n          return Promise.reject(deserializationError);\r\n        }\r\n      }\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * Gets details about a specified subscription.\r\n   *\r\n   * @param {string} subscriptionId The ID of the target subscription.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async getWithHttpOperationResponse(subscriptionId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Validate\r\n    try {\r\n      if (subscriptionId === null || subscriptionId === undefined || typeof subscriptionId.valueOf() !== 'string') {\r\n        throw new Error('subscriptionId cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\r\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let baseUrl = this.client.baseUri;\r\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}';\r\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(subscriptionId));\r\n    let queryParamsArray: Array<any> = [];\r\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\r\n    if (queryParamsArray.length > 0) {\r\n      requestUrl += '?' + queryParamsArray.join('&');\r\n    }\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'GET';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 200) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n      // Deserialize Response\r\n      if (statusCode === 200) {\r\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedResponse !== null && parsedResponse !== undefined) {\r\n            let resultMapper = Mappers.Subscription;\r\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n          }\r\n        } catch (error) {\r\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n          deserializationError.request = msRest.stripRequest(httpRequest);\r\n          deserializationError.response = msRest.stripResponse(response);\r\n          return Promise.reject(deserializationError);\r\n        }\r\n      }\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * Gets all subscriptions for a tenant.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async listWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Validate\r\n    try {\r\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\r\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let baseUrl = this.client.baseUri;\r\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions';\r\n    let queryParamsArray: Array<any> = [];\r\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\r\n    if (queryParamsArray.length > 0) {\r\n      requestUrl += '?' + queryParamsArray.join('&');\r\n    }\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'GET';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 200) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n      // Deserialize Response\r\n      if (statusCode === 200) {\r\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedResponse !== null && parsedResponse !== undefined) {\r\n            let resultMapper = Mappers.SubscriptionListResult;\r\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n          }\r\n        } catch (error) {\r\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n          deserializationError.request = msRest.stripRequest(httpRequest);\r\n          deserializationError.response = msRest.stripResponse(response);\r\n          return Promise.reject(deserializationError);\r\n        }\r\n      }\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * Gets all subscriptions for a tenant.\r\n   *\r\n   * @param {string} nextPageLink The NextLink from the previous successful call\r\n   * to List operation.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async listNextWithHttpOperationResponse(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Validate\r\n    try {\r\n      if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {\r\n        throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let requestUrl = '{nextLink}';\r\n    requestUrl = requestUrl.replace('{nextLink}', nextPageLink);\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'GET';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 200) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n      // Deserialize Response\r\n      if (statusCode === 200) {\r\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedResponse !== null && parsedResponse !== undefined) {\r\n            let resultMapper = Mappers.SubscriptionListResult;\r\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n          }\r\n        } catch (error) {\r\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n          deserializationError.request = msRest.stripRequest(httpRequest);\r\n          deserializationError.response = msRest.stripResponse(response);\r\n          return Promise.reject(deserializationError);\r\n        }\r\n      }\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * @summary Gets all available geo-locations.\r\n   *\r\n   * This operation provides all the locations that are available for resource\r\n   * providers; however, each resource provider may support a subset of this\r\n   * list.\r\n   *\r\n   * @param {string} subscriptionId The ID of the target subscription.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {Models.LocationListResult} [result]   - The deserialized result object if an error did not occur.\r\n   *                      See {@link Models.LocationListResult} for more\r\n   *                      information.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  listLocations(subscriptionId: string): Promise<Models.LocationListResult>;\r\n  listLocations(subscriptionId: string, options: msRest.RequestOptionsBase): Promise<Models.LocationListResult>;\r\n  listLocations(subscriptionId: string, callback: msRest.ServiceCallback<Models.LocationListResult>): void;\r\n  listLocations(subscriptionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LocationListResult>): void;\r\n  listLocations(subscriptionId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.LocationListResult>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<Models.LocationListResult>;\r\n    if (!callback) {\r\n      return this.listLocationsWithHttpOperationResponse(subscriptionId, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as Models.LocationListResult);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.listLocationsWithHttpOperationResponse(subscriptionId, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as Models.LocationListResult;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets details about a specified subscription.\r\n   *\r\n   * @param {string} subscriptionId The ID of the target subscription.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {Models.Subscription} [result]   - The deserialized result object if an error did not occur.\r\n   *                      See {@link Models.Subscription} for more information.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  get(subscriptionId: string): Promise<Models.Subscription>;\r\n  get(subscriptionId: string, options: msRest.RequestOptionsBase): Promise<Models.Subscription>;\r\n  get(subscriptionId: string, callback: msRest.ServiceCallback<Models.Subscription>): void;\r\n  get(subscriptionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Subscription>): void;\r\n  get(subscriptionId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.Subscription>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<Models.Subscription>;\r\n    if (!callback) {\r\n      return this.getWithHttpOperationResponse(subscriptionId, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as Models.Subscription);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.getWithHttpOperationResponse(subscriptionId, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as Models.Subscription;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets all subscriptions for a tenant.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {Models.SubscriptionListResult} [result]   - The deserialized result object if an error did not occur.\r\n   *                      See {@link Models.SubscriptionListResult} for more\r\n   *                      information.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  list(): Promise<Models.SubscriptionListResult>;\r\n  list(options: msRest.RequestOptionsBase): Promise<Models.SubscriptionListResult>;\r\n  list(callback: msRest.ServiceCallback<Models.SubscriptionListResult>): void;\r\n  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SubscriptionListResult>): void;\r\n  list(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.SubscriptionListResult>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<Models.SubscriptionListResult>;\r\n    if (!callback) {\r\n      return this.listWithHttpOperationResponse(options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as Models.SubscriptionListResult);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.listWithHttpOperationResponse(options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as Models.SubscriptionListResult;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets all subscriptions for a tenant.\r\n   *\r\n   * @param {string} nextPageLink The NextLink from the previous successful call\r\n   * to List operation.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {Models.SubscriptionListResult} [result]   - The deserialized result object if an error did not occur.\r\n   *                      See {@link Models.SubscriptionListResult} for more\r\n   *                      information.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  listNext(nextPageLink: string): Promise<Models.SubscriptionListResult>;\r\n  listNext(nextPageLink: string, options: msRest.RequestOptionsBase): Promise<Models.SubscriptionListResult>;\r\n  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SubscriptionListResult>): void;\r\n  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SubscriptionListResult>): void;\r\n  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.SubscriptionListResult>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<Models.SubscriptionListResult>;\r\n    if (!callback) {\r\n      return this.listNextWithHttpOperationResponse(nextPageLink, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as Models.SubscriptionListResult);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.listNextWithHttpOperationResponse(nextPageLink, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as Models.SubscriptionListResult;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./lib/subscription/operations/subscriptions.ts","/*\r\n * Code generated by Microsoft (R) AutoRest Code Generator.\r\n * Changes may cause incorrect behavior and will be lost if the code is\r\n * regenerated.\r\n */\r\n\r\nimport * as msRest from \"ms-rest-js\";\r\nimport * as Models from \"../models\";\r\nimport * as Mappers from \"../models/mappers\";\r\nimport { SubscriptionClient } from \"../subscriptionClient\";\r\n\r\nconst WebResource = msRest.WebResource;\r\n\r\n/** Class representing a Tenants. */\r\nexport class Tenants {\r\n  private readonly client: SubscriptionClient;\r\n  /**\r\n   * Create a Tenants.\r\n   * @param {SubscriptionClient} client Reference to the service client.\r\n   */\r\n  constructor(client: SubscriptionClient) {\r\n    this.client = client;\r\n  }\r\n\r\n  /**\r\n   * Gets the tenants for your account.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async listWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Validate\r\n    try {\r\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\r\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let baseUrl = this.client.baseUri;\r\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'tenants';\r\n    let queryParamsArray: Array<any> = [];\r\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\r\n    if (queryParamsArray.length > 0) {\r\n      requestUrl += '?' + queryParamsArray.join('&');\r\n    }\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'GET';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 200) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n      // Deserialize Response\r\n      if (statusCode === 200) {\r\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedResponse !== null && parsedResponse !== undefined) {\r\n            let resultMapper = Mappers.TenantListResult;\r\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n          }\r\n        } catch (error) {\r\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n          deserializationError.request = msRest.stripRequest(httpRequest);\r\n          deserializationError.response = msRest.stripResponse(response);\r\n          return Promise.reject(deserializationError);\r\n        }\r\n      }\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * Gets the tenants for your account.\r\n   *\r\n   * @param {string} nextPageLink The NextLink from the previous successful call\r\n   * to List operation.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async listNextWithHttpOperationResponse(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Validate\r\n    try {\r\n      if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {\r\n        throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let requestUrl = '{nextLink}';\r\n    requestUrl = requestUrl.replace('{nextLink}', nextPageLink);\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'GET';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 200) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n      // Deserialize Response\r\n      if (statusCode === 200) {\r\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedResponse !== null && parsedResponse !== undefined) {\r\n            let resultMapper = Mappers.TenantListResult;\r\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n          }\r\n        } catch (error) {\r\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n          deserializationError.request = msRest.stripRequest(httpRequest);\r\n          deserializationError.response = msRest.stripResponse(response);\r\n          return Promise.reject(deserializationError);\r\n        }\r\n      }\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * Gets the tenants for your account.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {Models.TenantListResult} [result]   - The deserialized result object if an error did not occur.\r\n   *                      See {@link Models.TenantListResult} for more\r\n   *                      information.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  list(): Promise<Models.TenantListResult>;\r\n  list(options: msRest.RequestOptionsBase): Promise<Models.TenantListResult>;\r\n  list(callback: msRest.ServiceCallback<Models.TenantListResult>): void;\r\n  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TenantListResult>): void;\r\n  list(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.TenantListResult>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<Models.TenantListResult>;\r\n    if (!callback) {\r\n      return this.listWithHttpOperationResponse(options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as Models.TenantListResult);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.listWithHttpOperationResponse(options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as Models.TenantListResult;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the tenants for your account.\r\n   *\r\n   * @param {string} nextPageLink The NextLink from the previous successful call\r\n   * to List operation.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {Models.TenantListResult} [result]   - The deserialized result object if an error did not occur.\r\n   *                      See {@link Models.TenantListResult} for more\r\n   *                      information.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  listNext(nextPageLink: string): Promise<Models.TenantListResult>;\r\n  listNext(nextPageLink: string, options: msRest.RequestOptionsBase): Promise<Models.TenantListResult>;\r\n  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.TenantListResult>): void;\r\n  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TenantListResult>): void;\r\n  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.TenantListResult>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<Models.TenantListResult>;\r\n    if (!callback) {\r\n      return this.listNextWithHttpOperationResponse(nextPageLink, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as Models.TenantListResult);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.listNextWithHttpOperationResponse(nextPageLink, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as Models.TenantListResult;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./lib/subscription/operations/tenants.ts","/*\r\n * Code generated by Microsoft (R) AutoRest Code Generator.\r\n * Changes may cause incorrect behavior and will be lost if the code is\r\n * regenerated.\r\n */\r\n\r\nimport * as Models from \"./models\";\r\nimport * as Mappers from \"./models/mappers\";\r\nimport * as msRest from \"ms-rest-js\";\r\nimport * as msRestAzure from \"ms-rest-azure-js\";\r\nimport * as operations from \"./operations\";\r\n\r\nconst packageName = \"\";\r\nconst packageVersion = \"\";\r\n\r\nclass ResourceManagementClient extends msRestAzure.AzureServiceClient {\r\n\r\n  credentials: msRest.ServiceClientCredentials;\r\n\r\n  subscriptionId: string;\r\n\r\n  apiVersion: string;\r\n\r\n  acceptLanguage: string;\r\n\r\n  longRunningOperationRetryTimeout: number;\r\n\r\n  generateClientRequestId: boolean;\r\n  baseUri: string;\r\n\r\n  // Operation groups\r\n  deployments: operations.Deployments;\r\n  providers: operations.Providers;\r\n  resources: operations.Resources;\r\n  resourceGroups: operations.ResourceGroups;\r\n  tags: operations.Tags;\r\n  deploymentOperations: operations.DeploymentOperations;\r\n  serializer: msRest.Serializer;\r\n\r\n  /**\r\n   * @class\r\n   * Initializes a new instance of the ResourceManagementClient class.\r\n   * @constructor\r\n   *\r\n   * @param {msRest.ServiceClientCredentials} credentials - Credentials needed for the client to connect to Azure.\r\n   *\r\n   * @param {string} subscriptionId - The ID of the target subscription.\r\n   *\r\n   * @param {string} [baseUri] - The base URI of the service.\r\n   *\r\n   * @param {object} [options] - The parameter options\r\n   *\r\n   * @param {Array} [options.filters] - Filters to be added to the request pipeline\r\n   *\r\n   * @param {object} [options.requestOptions] - The request options. Detailed info can be found at\r\n   * {@link https://github.github.io/fetch/#Request Options doc}\r\n   *\r\n   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy\r\n   *\r\n   * @param {string} [options.acceptLanguage] - Gets or sets the preferred language for the response.\r\n   *\r\n   * @param {number} [options.longRunningOperationRetryTimeout] - Gets or sets the retry timeout in seconds for Long Running Operations. Default value is 30.\r\n   *\r\n   * @param {boolean} [options.generateClientRequestId] - When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true.\r\n   *\r\n   */\r\n  constructor(credentials: msRest.ServiceClientCredentials, subscriptionId: string, baseUri?: string, options?: msRestAzure.AzureServiceClientOptions) {\r\n    console.log(msRest);\r\n    console.log(msRestAzure);\r\n    if (credentials === null || credentials === undefined) {\r\n      throw new Error('\\'credentials\\' cannot be null.');\r\n    }\r\n    if (subscriptionId === null || subscriptionId === undefined) {\r\n      throw new Error('\\'subscriptionId\\' cannot be null.');\r\n    }\r\n\r\n    if (!options) options = {};\r\n\r\n    super(credentials, options);\r\n\r\n    this.apiVersion = '2017-05-10';\r\n    this.acceptLanguage = 'en-US';\r\n    this.longRunningOperationRetryTimeout = 30;\r\n    this.generateClientRequestId = true;\r\n    this.baseUri = baseUri as string;\r\n    if (!this.baseUri) {\r\n      this.baseUri = 'https://management.azure.com';\r\n    }\r\n    this.credentials = credentials;\r\n    this.subscriptionId = subscriptionId;\r\n\r\n    this.addUserAgentInfo(`${packageName}/${packageVersion}`);\r\n    if(options.acceptLanguage !== null && options.acceptLanguage !== undefined) {\r\n      this.acceptLanguage = options.acceptLanguage;\r\n    }\r\n    if(options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {\r\n      this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;\r\n    }\r\n    if(options.generateClientRequestId !== null && options.generateClientRequestId !== undefined) {\r\n      this.generateClientRequestId = options.generateClientRequestId;\r\n    }\r\n    this.deployments = new operations.Deployments(this);\r\n    this.providers = new operations.Providers(this);\r\n    this.resources = new operations.Resources(this);\r\n    this.resourceGroups = new operations.ResourceGroups(this);\r\n    this.tags = new operations.Tags(this);\r\n    this.deploymentOperations = new operations.DeploymentOperations(this);\r\n    this.serializer = new msRest.Serializer(Mappers);\r\n  }\r\n}\r\n\r\nexport { ResourceManagementClient, Models as ResourceManagementModels, Mappers as ResourceManagementMappers };\r\n\n\n\n// WEBPACK FOOTER //\n// ./lib/resource/resourceManagementClient.ts","/*\r\n * Code generated by Microsoft (R) AutoRest Code Generator.\r\n * Changes may cause incorrect behavior and will be lost if the code is\r\n * regenerated.\r\n */\r\n\r\nimport { BaseResource, CloudError } from \"ms-rest-azure-js\";\r\nimport { RequestOptionsBase } from \"ms-rest-js\";\r\n\r\nexport { BaseResource, CloudError };\r\n\r\n\r\n/**\r\n * @interface\r\n * An interface representing DeploymentExtendedFilter.\r\n * Deployment filter.\r\n *\r\n */\r\nexport interface DeploymentExtendedFilter {\r\n  /**\r\n   * @member {string} [provisioningState] The provisioning state.\r\n   */\r\n  provisioningState?: string;\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing GenericResourceFilter.\r\n * Resource filter.\r\n *\r\n */\r\nexport interface GenericResourceFilter {\r\n  /**\r\n   * @member {string} [resourceType] The resource type.\r\n   */\r\n  resourceType?: string;\r\n  /**\r\n   * @member {string} [tagname] The tag name.\r\n   */\r\n  tagname?: string;\r\n  /**\r\n   * @member {string} [tagvalue] The tag value.\r\n   */\r\n  tagvalue?: string;\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing ResourceGroupFilter.\r\n * Resource group filter.\r\n *\r\n */\r\nexport interface ResourceGroupFilter {\r\n  /**\r\n   * @member {string} [tagName] The tag name.\r\n   */\r\n  tagName?: string;\r\n  /**\r\n   * @member {string} [tagValue] The tag value.\r\n   */\r\n  tagValue?: string;\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing TemplateLink.\r\n * Entity representing the reference to the template.\r\n *\r\n */\r\nexport interface TemplateLink {\r\n  /**\r\n   * @member {string} uri The URI of the template to deploy.\r\n   */\r\n  uri: string;\r\n  /**\r\n   * @member {string} [contentVersion] If included, must match the\r\n   * ContentVersion in the template.\r\n   */\r\n  contentVersion?: string;\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing ParametersLink.\r\n * Entity representing the reference to the deployment paramaters.\r\n *\r\n */\r\nexport interface ParametersLink {\r\n  /**\r\n   * @member {string} uri The URI of the parameters file.\r\n   */\r\n  uri: string;\r\n  /**\r\n   * @member {string} [contentVersion] If included, must match the\r\n   * ContentVersion in the template.\r\n   */\r\n  contentVersion?: string;\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing DebugSetting.\r\n */\r\nexport interface DebugSetting {\r\n  /**\r\n   * @member {string} [detailLevel] Specifies the type of information to log\r\n   * for debugging. The permitted values are none, requestContent,\r\n   * responseContent, or both requestContent and responseContent separated by a\r\n   * comma. The default is none. When setting this value, carefully consider\r\n   * the type of information you are passing in during deployment. By logging\r\n   * information about the request or response, you could potentially expose\r\n   * sensitive data that is retrieved through the deployment operations.\r\n   */\r\n  detailLevel?: string;\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing DeploymentProperties.\r\n * Deployment properties.\r\n *\r\n */\r\nexport interface DeploymentProperties {\r\n  /**\r\n   * @member {any} [template] The template content. You use this element when\r\n   * you want to pass the template syntax directly in the request rather than\r\n   * link to an existing template. It can be a JObject or well-formed JSON\r\n   * string. Use either the templateLink property or the template property, but\r\n   * not both.\r\n   */\r\n  template?: any;\r\n  /**\r\n   * @member {TemplateLink} [templateLink] The URI of the template. Use either\r\n   * the templateLink property or the template property, but not both.\r\n   */\r\n  templateLink?: TemplateLink;\r\n  /**\r\n   * @member {any} [parameters] Name and value pairs that define the deployment\r\n   * parameters for the template. You use this element when you want to provide\r\n   * the parameter values directly in the request rather than link to an\r\n   * existing parameter file. Use either the parametersLink property or the\r\n   * parameters property, but not both. It can be a JObject or a well formed\r\n   * JSON string.\r\n   */\r\n  parameters?: any;\r\n  /**\r\n   * @member {ParametersLink} [parametersLink] The URI of parameters file. You\r\n   * use this element to link to an existing parameters file. Use either the\r\n   * parametersLink property or the parameters property, but not both.\r\n   */\r\n  parametersLink?: ParametersLink;\r\n  /**\r\n   * @member {DeploymentMode} mode The mode that is used to deploy resources.\r\n   * This value can be either Incremental or Complete. In Incremental mode,\r\n   * resources are deployed without deleting existing resources that are not\r\n   * included in the template. In Complete mode, resources are deployed and\r\n   * existing resources in the resource group that are not included in the\r\n   * template are deleted. Be careful when using Complete mode as you may\r\n   * unintentionally delete resources. Possible values include: 'Incremental',\r\n   * 'Complete'\r\n   */\r\n  mode: DeploymentMode;\r\n  /**\r\n   * @member {DebugSetting} [debugSetting] The debug setting of the deployment.\r\n   */\r\n  debugSetting?: DebugSetting;\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing Deployment.\r\n * Deployment operation parameters.\r\n *\r\n */\r\nexport interface Deployment {\r\n  /**\r\n   * @member {DeploymentProperties} properties The deployment properties.\r\n   */\r\n  properties: DeploymentProperties;\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing DeploymentExportResult.\r\n * The deployment export result.\r\n *\r\n */\r\nexport interface DeploymentExportResult {\r\n  /**\r\n   * @member {any} [template] The template content.\r\n   */\r\n  template?: any;\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing ResourceManagementErrorWithDetails.\r\n * The detailed error message of resource management.\r\n *\r\n */\r\nexport interface ResourceManagementErrorWithDetails {\r\n  /**\r\n   * @member {string} [code] The error code returned when exporting the\r\n   * template.\r\n   */\r\n  readonly code?: string;\r\n  /**\r\n   * @member {string} [message] The error message describing the export error.\r\n   */\r\n  readonly message?: string;\r\n  /**\r\n   * @member {string} [target] The target of the error.\r\n   */\r\n  readonly target?: string;\r\n  /**\r\n   * @member {ResourceManagementErrorWithDetails[]} [details] Validation error.\r\n   */\r\n  readonly details?: ResourceManagementErrorWithDetails[];\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing AliasPathType.\r\n * The type of the paths for alias.\r\n *\r\n */\r\nexport interface AliasPathType {\r\n  /**\r\n   * @member {string} [path] The path of an alias.\r\n   */\r\n  path?: string;\r\n  /**\r\n   * @member {string[]} [apiVersions] The API versions.\r\n   */\r\n  apiVersions?: string[];\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing AliasType.\r\n * The alias type.\r\n *\r\n */\r\nexport interface AliasType {\r\n  /**\r\n   * @member {string} [name] The alias name.\r\n   */\r\n  name?: string;\r\n  /**\r\n   * @member {AliasPathType[]} [paths] The paths for an alias.\r\n   */\r\n  paths?: AliasPathType[];\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing ProviderResourceType.\r\n * Resource type managed by the resource provider.\r\n *\r\n */\r\nexport interface ProviderResourceType {\r\n  /**\r\n   * @member {string} [resourceType] The resource type.\r\n   */\r\n  resourceType?: string;\r\n  /**\r\n   * @member {string[]} [locations] The collection of locations where this\r\n   * resource type can be created.\r\n   */\r\n  locations?: string[];\r\n  /**\r\n   * @member {AliasType[]} [aliases] The aliases that are supported by this\r\n   * resource type.\r\n   */\r\n  aliases?: AliasType[];\r\n  /**\r\n   * @member {string[]} [apiVersions] The API version.\r\n   */\r\n  apiVersions?: string[];\r\n  /**\r\n   * @member {{ [propertyName: string]: string }} [properties] The properties.\r\n   */\r\n  properties?: { [propertyName: string]: string };\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing Provider.\r\n * Resource provider information.\r\n *\r\n */\r\nexport interface Provider {\r\n  /**\r\n   * @member {string} [id] The provider ID.\r\n   */\r\n  readonly id?: string;\r\n  /**\r\n   * @member {string} [namespace] The namespace of the resource provider.\r\n   */\r\n  namespace?: string;\r\n  /**\r\n   * @member {string} [registrationState] The registration state of the\r\n   * provider.\r\n   */\r\n  readonly registrationState?: string;\r\n  /**\r\n   * @member {ProviderResourceType[]} [resourceTypes] The collection of\r\n   * provider resource types.\r\n   */\r\n  readonly resourceTypes?: ProviderResourceType[];\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing BasicDependency.\r\n * Deployment dependency information.\r\n *\r\n */\r\nexport interface BasicDependency {\r\n  /**\r\n   * @member {string} [id] The ID of the dependency.\r\n   */\r\n  id?: string;\r\n  /**\r\n   * @member {string} [resourceType] The dependency resource type.\r\n   */\r\n  resourceType?: string;\r\n  /**\r\n   * @member {string} [resourceName] The dependency resource name.\r\n   */\r\n  resourceName?: string;\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing Dependency.\r\n * Deployment dependency information.\r\n *\r\n */\r\nexport interface Dependency {\r\n  /**\r\n   * @member {BasicDependency[]} [dependsOn] The list of dependencies.\r\n   */\r\n  dependsOn?: BasicDependency[];\r\n  /**\r\n   * @member {string} [id] The ID of the dependency.\r\n   */\r\n  id?: string;\r\n  /**\r\n   * @member {string} [resourceType] The dependency resource type.\r\n   */\r\n  resourceType?: string;\r\n  /**\r\n   * @member {string} [resourceName] The dependency resource name.\r\n   */\r\n  resourceName?: string;\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing DeploymentPropertiesExtended.\r\n * Deployment properties with additional details.\r\n *\r\n */\r\nexport interface DeploymentPropertiesExtended {\r\n  /**\r\n   * @member {string} [provisioningState] The state of the provisioning.\r\n   */\r\n  readonly provisioningState?: string;\r\n  /**\r\n   * @member {string} [correlationId] The correlation ID of the deployment.\r\n   */\r\n  readonly correlationId?: string;\r\n  /**\r\n   * @member {Date} [timestamp] The timestamp of the template deployment.\r\n   */\r\n  readonly timestamp?: Date;\r\n  /**\r\n   * @member {any} [outputs] Key/value pairs that represent deploymentoutput.\r\n   */\r\n  outputs?: any;\r\n  /**\r\n   * @member {Provider[]} [providers] The list of resource providers needed for\r\n   * the deployment.\r\n   */\r\n  providers?: Provider[];\r\n  /**\r\n   * @member {Dependency[]} [dependencies] The list of deployment dependencies.\r\n   */\r\n  dependencies?: Dependency[];\r\n  /**\r\n   * @member {any} [template] The template content. Use only one of Template or\r\n   * TemplateLink.\r\n   */\r\n  template?: any;\r\n  /**\r\n   * @member {TemplateLink} [templateLink] The URI referencing the template.\r\n   * Use only one of Template or TemplateLink.\r\n   */\r\n  templateLink?: TemplateLink;\r\n  /**\r\n   * @member {any} [parameters] Deployment parameters. Use only one of\r\n   * Parameters or ParametersLink.\r\n   */\r\n  parameters?: any;\r\n  /**\r\n   * @member {ParametersLink} [parametersLink] The URI referencing the\r\n   * parameters. Use only one of Parameters or ParametersLink.\r\n   */\r\n  parametersLink?: ParametersLink;\r\n  /**\r\n   * @member {DeploymentMode} [mode] The deployment mode. Possible values are\r\n   * Incremental and Complete. Possible values include: 'Incremental',\r\n   * 'Complete'\r\n   */\r\n  mode?: DeploymentMode;\r\n  /**\r\n   * @member {DebugSetting} [debugSetting] The debug setting of the deployment.\r\n   */\r\n  debugSetting?: DebugSetting;\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing DeploymentValidateResult.\r\n * Information from validate template deployment response.\r\n *\r\n */\r\nexport interface DeploymentValidateResult {\r\n  /**\r\n   * @member {ResourceManagementErrorWithDetails} [error] Validation error.\r\n   */\r\n  error?: ResourceManagementErrorWithDetails;\r\n  /**\r\n   * @member {DeploymentPropertiesExtended} [properties] The template\r\n   * deployment properties.\r\n   */\r\n  properties?: DeploymentPropertiesExtended;\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing DeploymentExtended.\r\n * Deployment information.\r\n *\r\n */\r\nexport interface DeploymentExtended {\r\n  /**\r\n   * @member {string} [id] The ID of the deployment.\r\n   */\r\n  id?: string;\r\n  /**\r\n   * @member {string} name The name of the deployment.\r\n   */\r\n  name: string;\r\n  /**\r\n   * @member {DeploymentPropertiesExtended} [properties] Deployment properties.\r\n   */\r\n  properties?: DeploymentPropertiesExtended;\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing Plan.\r\n * Plan for the resource.\r\n *\r\n */\r\nexport interface Plan {\r\n  /**\r\n   * @member {string} [name] The plan ID.\r\n   */\r\n  name?: string;\r\n  /**\r\n   * @member {string} [publisher] The publisher ID.\r\n   */\r\n  publisher?: string;\r\n  /**\r\n   * @member {string} [product] The offer ID.\r\n   */\r\n  product?: string;\r\n  /**\r\n   * @member {string} [promotionCode] The promotion code.\r\n   */\r\n  promotionCode?: string;\r\n  /**\r\n   * @member {string} [version] The plan's version.\r\n   */\r\n  version?: string;\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing Sku.\r\n * SKU for the resource.\r\n *\r\n */\r\nexport interface Sku {\r\n  /**\r\n   * @member {string} [name] The SKU name.\r\n   */\r\n  name?: string;\r\n  /**\r\n   * @member {string} [tier] The SKU tier.\r\n   */\r\n  tier?: string;\r\n  /**\r\n   * @member {string} [size] The SKU size.\r\n   */\r\n  size?: string;\r\n  /**\r\n   * @member {string} [family] The SKU family.\r\n   */\r\n  family?: string;\r\n  /**\r\n   * @member {string} [model] The SKU model.\r\n   */\r\n  model?: string;\r\n  /**\r\n   * @member {number} [capacity] The SKU capacity.\r\n   */\r\n  capacity?: number;\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing Identity.\r\n * Identity for the resource.\r\n *\r\n */\r\nexport interface Identity {\r\n  /**\r\n   * @member {string} [principalId] The principal ID of resource identity.\r\n   */\r\n  readonly principalId?: string;\r\n  /**\r\n   * @member {string} [tenantId] The tenant ID of resource.\r\n   */\r\n  readonly tenantId?: string;\r\n  /**\r\n   * @member {ResourceIdentityType} [type] The identity type. Possible values\r\n   * include: 'SystemAssigned'\r\n   */\r\n  type?: ResourceIdentityType;\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing Resource.\r\n * Resource.\r\n *\r\n * @extends BaseResource\r\n */\r\nexport interface Resource extends BaseResource {\r\n  /**\r\n   * @member {string} [id] Resource ID\r\n   */\r\n  readonly id?: string;\r\n  /**\r\n   * @member {string} [name] Resource name\r\n   */\r\n  readonly name?: string;\r\n  /**\r\n   * @member {string} [type] Resource type\r\n   */\r\n  readonly type?: string;\r\n  /**\r\n   * @member {string} [location] Resource location\r\n   */\r\n  location?: string;\r\n  /**\r\n   * @member {{ [propertyName: string]: string }} [tags] Resource tags\r\n   */\r\n  tags?: { [propertyName: string]: string };\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing GenericResource.\r\n * Resource information.\r\n *\r\n * @extends Resource\r\n */\r\nexport interface GenericResource extends Resource {\r\n  /**\r\n   * @member {Plan} [plan] The plan of the resource.\r\n   */\r\n  plan?: Plan;\r\n  /**\r\n   * @member {any} [properties] The resource properties.\r\n   */\r\n  properties?: any;\r\n  /**\r\n   * @member {string} [kind] The kind of the resource.\r\n   */\r\n  kind?: string;\r\n  /**\r\n   * @member {string} [managedBy] ID of the resource that manages this\r\n   * resource.\r\n   */\r\n  managedBy?: string;\r\n  /**\r\n   * @member {Sku} [sku] The SKU of the resource.\r\n   */\r\n  sku?: Sku;\r\n  /**\r\n   * @member {Identity} [identity] The identity of the resource.\r\n   */\r\n  identity?: Identity;\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing ResourceGroupProperties.\r\n * The resource group properties.\r\n *\r\n */\r\nexport interface ResourceGroupProperties {\r\n  /**\r\n   * @member {string} [provisioningState] The provisioning state.\r\n   */\r\n  readonly provisioningState?: string;\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing ResourceGroup.\r\n * Resource group information.\r\n *\r\n */\r\nexport interface ResourceGroup {\r\n  /**\r\n   * @member {string} [id] The ID of the resource group.\r\n   */\r\n  readonly id?: string;\r\n  /**\r\n   * @member {string} [name] The name of the resource group.\r\n   */\r\n  name?: string;\r\n  /**\r\n   * @member {ResourceGroupProperties} [properties]\r\n   */\r\n  properties?: ResourceGroupProperties;\r\n  /**\r\n   * @member {string} location The location of the resource group. It cannot be\r\n   * changed after the resource group has been created. It must be one of the\r\n   * supported Azure locations.\r\n   */\r\n  location: string;\r\n  /**\r\n   * @member {string} [managedBy] The ID of the resource that manages this\r\n   * resource group.\r\n   */\r\n  managedBy?: string;\r\n  /**\r\n   * @member {{ [propertyName: string]: string }} [tags] The tags attached to\r\n   * the resource group.\r\n   */\r\n  tags?: { [propertyName: string]: string };\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing ResourceGroupPatchable.\r\n * Resource group information.\r\n *\r\n */\r\nexport interface ResourceGroupPatchable {\r\n  /**\r\n   * @member {string} [name] The name of the resource group.\r\n   */\r\n  name?: string;\r\n  /**\r\n   * @member {ResourceGroupProperties} [properties]\r\n   */\r\n  properties?: ResourceGroupProperties;\r\n  /**\r\n   * @member {string} [managedBy] The ID of the resource that manages this\r\n   * resource group.\r\n   */\r\n  managedBy?: string;\r\n  /**\r\n   * @member {{ [propertyName: string]: string }} [tags] The tags attached to\r\n   * the resource group.\r\n   */\r\n  tags?: { [propertyName: string]: string };\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing ResourcesMoveInfo.\r\n * Parameters of move resources.\r\n *\r\n */\r\nexport interface ResourcesMoveInfo {\r\n  /**\r\n   * @member {string[]} [resources] The IDs of the resources.\r\n   */\r\n  resources?: string[];\r\n  /**\r\n   * @member {string} [targetResourceGroup] The target resource group.\r\n   */\r\n  targetResourceGroup?: string;\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing ExportTemplateRequest.\r\n * Export resource group template request parameters.\r\n *\r\n */\r\nexport interface ExportTemplateRequest {\r\n  /**\r\n   * @member {string[]} [resources] The IDs of the resources. The only\r\n   * supported string currently is '*' (all resources). Future updates will\r\n   * support exporting specific resources.\r\n   */\r\n  resources?: string[];\r\n  /**\r\n   * @member {string} [options] The export template options. Supported values\r\n   * include 'IncludeParameterDefaultValue', 'IncludeComments' or\r\n   * 'IncludeParameterDefaultValue, IncludeComments\r\n   */\r\n  options?: string;\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing TagCount.\r\n * Tag count.\r\n *\r\n */\r\nexport interface TagCount {\r\n  /**\r\n   * @member {string} [type] Type of count.\r\n   */\r\n  type?: string;\r\n  /**\r\n   * @member {number} [value] Value of count.\r\n   */\r\n  value?: number;\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing TagValue.\r\n * Tag information.\r\n *\r\n */\r\nexport interface TagValue {\r\n  /**\r\n   * @member {string} [id] The tag ID.\r\n   */\r\n  id?: string;\r\n  /**\r\n   * @member {string} [tagValue] The tag value.\r\n   */\r\n  tagValue?: string;\r\n  /**\r\n   * @member {TagCount} [count] The tag value count.\r\n   */\r\n  count?: TagCount;\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing TagDetails.\r\n * Tag details.\r\n *\r\n */\r\nexport interface TagDetails {\r\n  /**\r\n   * @member {string} [id] The tag ID.\r\n   */\r\n  id?: string;\r\n  /**\r\n   * @member {string} [tagName] The tag name.\r\n   */\r\n  tagName?: string;\r\n  /**\r\n   * @member {TagCount} [count] The total number of resources that use the\r\n   * resource tag. When a tag is initially created and has no associated\r\n   * resources, the value is 0.\r\n   */\r\n  count?: TagCount;\r\n  /**\r\n   * @member {TagValue[]} [values] The list of tag values.\r\n   */\r\n  values?: TagValue[];\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing TargetResource.\r\n * Target resource.\r\n *\r\n */\r\nexport interface TargetResource {\r\n  /**\r\n   * @member {string} [id] The ID of the resource.\r\n   */\r\n  id?: string;\r\n  /**\r\n   * @member {string} [resourceName] The name of the resource.\r\n   */\r\n  resourceName?: string;\r\n  /**\r\n   * @member {string} [resourceType] The type of the resource.\r\n   */\r\n  resourceType?: string;\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing HttpMessage.\r\n * HTTP message.\r\n *\r\n */\r\nexport interface HttpMessage {\r\n  /**\r\n   * @member {any} [content] HTTP message content.\r\n   */\r\n  content?: any;\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing DeploymentOperationProperties.\r\n * Deployment operation properties.\r\n *\r\n */\r\nexport interface DeploymentOperationProperties {\r\n  /**\r\n   * @member {string} [provisioningState] The state of the provisioning.\r\n   */\r\n  readonly provisioningState?: string;\r\n  /**\r\n   * @member {Date} [timestamp] The date and time of the operation.\r\n   */\r\n  readonly timestamp?: Date;\r\n  /**\r\n   * @member {string} [serviceRequestId] Deployment operation service request\r\n   * id.\r\n   */\r\n  readonly serviceRequestId?: string;\r\n  /**\r\n   * @member {string} [statusCode] Operation status code.\r\n   */\r\n  readonly statusCode?: string;\r\n  /**\r\n   * @member {any} [statusMessage] Operation status message.\r\n   */\r\n  readonly statusMessage?: any;\r\n  /**\r\n   * @member {TargetResource} [targetResource] The target resource.\r\n   */\r\n  readonly targetResource?: TargetResource;\r\n  /**\r\n   * @member {HttpMessage} [request] The HTTP request message.\r\n   */\r\n  readonly request?: HttpMessage;\r\n  /**\r\n   * @member {HttpMessage} [response] The HTTP response message.\r\n   */\r\n  readonly response?: HttpMessage;\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing DeploymentOperation.\r\n * Deployment operation information.\r\n *\r\n */\r\nexport interface DeploymentOperation {\r\n  /**\r\n   * @member {string} [id] Full deployment operation ID.\r\n   */\r\n  readonly id?: string;\r\n  /**\r\n   * @member {string} [operationId] Deployment operation ID.\r\n   */\r\n  readonly operationId?: string;\r\n  /**\r\n   * @member {DeploymentOperationProperties} [properties] Deployment\r\n   * properties.\r\n   */\r\n  properties?: DeploymentOperationProperties;\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing ResourceProviderOperationDisplayProperties.\r\n * Resource provider operation's display properties.\r\n *\r\n */\r\nexport interface ResourceProviderOperationDisplayProperties {\r\n  /**\r\n   * @member {string} [publisher] Operation description.\r\n   */\r\n  publisher?: string;\r\n  /**\r\n   * @member {string} [provider] Operation provider.\r\n   */\r\n  provider?: string;\r\n  /**\r\n   * @member {string} [resource] Operation resource.\r\n   */\r\n  resource?: string;\r\n  /**\r\n   * @member {string} [operation] Operation.\r\n   */\r\n  operation?: string;\r\n  /**\r\n   * @member {string} [description] Operation description.\r\n   */\r\n  description?: string;\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing SubResource.\r\n * Sub-resource.\r\n *\r\n * @extends BaseResource\r\n */\r\nexport interface SubResource extends BaseResource {\r\n  /**\r\n   * @member {string} [id] Resource ID\r\n   */\r\n  id?: string;\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing ResourceGroupExportResult.\r\n * Resource group export result.\r\n *\r\n */\r\nexport interface ResourceGroupExportResult {\r\n  /**\r\n   * @member {any} [template] The template content.\r\n   */\r\n  template?: any;\r\n  /**\r\n   * @member {ResourceManagementErrorWithDetails} [error] The error.\r\n   */\r\n  error?: ResourceManagementErrorWithDetails;\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing DeploymentsListByResourceGroupOptionalParams.\r\n * Optional Parameters.\r\n *\r\n * @extends RequestOptionsBase\r\n */\r\nexport interface DeploymentsListByResourceGroupOptionalParams extends RequestOptionsBase {\r\n  /**\r\n   * @member {string} [filter] The filter to apply on the operation. For\r\n   * example, you can use $filter=provisioningState eq '{state}'.\r\n   */\r\n  filter?: string;\r\n  /**\r\n   * @member {number} [top] The number of results to get. If null is passed,\r\n   * returns all deployments.\r\n   */\r\n  top?: number;\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing ProvidersListOptionalParams.\r\n * Optional Parameters.\r\n *\r\n * @extends RequestOptionsBase\r\n */\r\nexport interface ProvidersListOptionalParams extends RequestOptionsBase {\r\n  /**\r\n   * @member {number} [top] The number of results to return. If null is passed\r\n   * returns all deployments.\r\n   */\r\n  top?: number;\r\n  /**\r\n   * @member {string} [expand] The properties to include in the results. For\r\n   * example, use &$expand=metadata in the query string to retrieve resource\r\n   * provider metadata. To include property aliases in response, use\r\n   * $expand=resourceTypes/aliases.\r\n   */\r\n  expand?: string;\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing ProvidersGetOptionalParams.\r\n * Optional Parameters.\r\n *\r\n * @extends RequestOptionsBase\r\n */\r\nexport interface ProvidersGetOptionalParams extends RequestOptionsBase {\r\n  /**\r\n   * @member {string} [expand] The $expand query parameter. For example, to\r\n   * include property aliases in response, use $expand=resourceTypes/aliases.\r\n   */\r\n  expand?: string;\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing ResourcesListByResourceGroupOptionalParams.\r\n * Optional Parameters.\r\n *\r\n * @extends RequestOptionsBase\r\n */\r\nexport interface ResourcesListByResourceGroupOptionalParams extends RequestOptionsBase {\r\n  /**\r\n   * @member {string} [filter] The filter to apply on the operation.\r\n   */\r\n  filter?: string;\r\n  /**\r\n   * @member {string} [expand] The $expand query parameter\r\n   */\r\n  expand?: string;\r\n  /**\r\n   * @member {number} [top] The number of results to return. If null is passed,\r\n   * returns all resources.\r\n   */\r\n  top?: number;\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing ResourcesListOptionalParams.\r\n * Optional Parameters.\r\n *\r\n * @extends RequestOptionsBase\r\n */\r\nexport interface ResourcesListOptionalParams extends RequestOptionsBase {\r\n  /**\r\n   * @member {string} [filter] The filter to apply on the operation.\r\n   */\r\n  filter?: string;\r\n  /**\r\n   * @member {string} [expand] The $expand query parameter.\r\n   */\r\n  expand?: string;\r\n  /**\r\n   * @member {number} [top] The number of results to return. If null is passed,\r\n   * returns all resource groups.\r\n   */\r\n  top?: number;\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing ResourceGroupsListOptionalParams.\r\n * Optional Parameters.\r\n *\r\n * @extends RequestOptionsBase\r\n */\r\nexport interface ResourceGroupsListOptionalParams extends RequestOptionsBase {\r\n  /**\r\n   * @member {string} [filter] The filter to apply on the operation.\r\n   */\r\n  filter?: string;\r\n  /**\r\n   * @member {number} [top] The number of results to return. If null is passed,\r\n   * returns all resource groups.\r\n   */\r\n  top?: number;\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing DeploymentOperationsListOptionalParams.\r\n * Optional Parameters.\r\n *\r\n * @extends RequestOptionsBase\r\n */\r\nexport interface DeploymentOperationsListOptionalParams extends RequestOptionsBase {\r\n  /**\r\n   * @member {number} [top] The number of results to return.\r\n   */\r\n  top?: number;\r\n}\r\n\r\n\r\n/**\r\n * @interface\r\n * An interface representing the DeploymentListResult.\r\n * List of deployments.\r\n *\r\n * @extends Array<DeploymentExtended>\r\n */\r\nexport interface DeploymentListResult extends Array<DeploymentExtended> {\r\n  /**\r\n   * @member {string} [nextLink] The URL to use for getting the next set of\r\n   * results.\r\n   */\r\n  readonly nextLink?: string;\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing the ProviderListResult.\r\n * List of resource providers.\r\n *\r\n * @extends Array<Provider>\r\n */\r\nexport interface ProviderListResult extends Array<Provider> {\r\n  /**\r\n   * @member {string} [nextLink] The URL to use for getting the next set of\r\n   * results.\r\n   */\r\n  readonly nextLink?: string;\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing the ResourceListResult.\r\n * List of resource groups.\r\n *\r\n * @extends Array<GenericResource>\r\n */\r\nexport interface ResourceListResult extends Array<GenericResource> {\r\n  /**\r\n   * @member {string} [nextLink] The URL to use for getting the next set of\r\n   * results.\r\n   */\r\n  readonly nextLink?: string;\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing the ResourceGroupListResult.\r\n * List of resource groups.\r\n *\r\n * @extends Array<ResourceGroup>\r\n */\r\nexport interface ResourceGroupListResult extends Array<ResourceGroup> {\r\n  /**\r\n   * @member {string} [nextLink] The URL to use for getting the next set of\r\n   * results.\r\n   */\r\n  readonly nextLink?: string;\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing the TagsListResult.\r\n * List of subscription tags.\r\n *\r\n * @extends Array<TagDetails>\r\n */\r\nexport interface TagsListResult extends Array<TagDetails> {\r\n  /**\r\n   * @member {string} [nextLink] The URL to use for getting the next set of\r\n   * results.\r\n   */\r\n  readonly nextLink?: string;\r\n}\r\n\r\n/**\r\n * @interface\r\n * An interface representing the DeploymentOperationsListResult.\r\n * List of deployment operations.\r\n *\r\n * @extends Array<DeploymentOperation>\r\n */\r\nexport interface DeploymentOperationsListResult extends Array<DeploymentOperation> {\r\n  /**\r\n   * @member {string} [nextLink] The URL to use for getting the next set of\r\n   * results.\r\n   */\r\n  readonly nextLink?: string;\r\n}\r\n\r\n/**\r\n * Defines values for DeploymentMode.\r\n * Possible values include: 'Incremental', 'Complete'\r\n * @readonly\r\n * @enum {string}\r\n */\r\nexport enum DeploymentMode {\r\n  Incremental = 'Incremental',\r\n  Complete = 'Complete',\r\n}\r\n\r\n/**\r\n * Defines values for ResourceIdentityType.\r\n * Possible values include: 'SystemAssigned'\r\n * @readonly\r\n * @enum {string}\r\n */\r\nexport enum ResourceIdentityType {\r\n  SystemAssigned = 'SystemAssigned',\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./lib/resource/models/index.ts","/*\r\n * Code generated by Microsoft (R) AutoRest Code Generator.\r\n * Changes may cause incorrect behavior and will be lost if the code is\r\n * regenerated.\r\n */\r\n\r\nimport { Deployments } from \"./deployments\";\r\nimport { Providers } from \"./providers\";\r\nimport { Resources } from \"./resources\";\r\nimport { ResourceGroups } from \"./resourceGroups\";\r\nimport { Tags } from \"./tags\";\r\nimport { DeploymentOperations } from \"./deploymentOperations\";\r\n\r\nexport { Deployments, Providers, Resources, ResourceGroups, Tags, DeploymentOperations };\r\n\n\n\n// WEBPACK FOOTER //\n// ./lib/resource/operations/index.ts","/*\r\n * Code generated by Microsoft (R) AutoRest Code Generator.\r\n * Changes may cause incorrect behavior and will be lost if the code is\r\n * regenerated.\r\n */\r\n\r\nimport * as msRest from \"ms-rest-js\";\r\nimport * as Models from \"../models\";\r\nimport * as Mappers from \"../models/mappers\";\r\nimport { ResourceManagementClient } from \"../resourceManagementClient\";\r\n\r\nconst WebResource = msRest.WebResource;\r\n\r\n/** Class representing a Deployments. */\r\nexport class Deployments {\r\n  private readonly client: ResourceManagementClient;\r\n  /**\r\n   * Create a Deployments.\r\n   * @param {ResourceManagementClient} client Reference to the service client.\r\n   */\r\n  constructor(client: ResourceManagementClient) {\r\n    this.client = client;\r\n  }\r\n\r\n\r\n  /**\r\n   * @summary Deletes a deployment from the deployment history.\r\n   *\r\n   * A template deployment that is currently running cannot be deleted. Deleting\r\n   * a template deployment removes the associated deployment operations. Deleting\r\n   * a template deployment does not affect the state of the resource group. This\r\n   * is an asynchronous operation that returns a status of 202 until the template\r\n   * deployment is successfully deleted. The Location response header contains\r\n   * the URI that is used to obtain the status of the process. While the process\r\n   * is running, a call to the URI in the Location header returns a status of\r\n   * 202. When the process finishes, the URI in the Location header returns a\r\n   * status of 204 on success. If the asynchronous request failed, the URI in the\r\n   * Location header returns an error-level status code.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group with the\r\n   * deployment to delete. The name is case insensitive.\r\n   *\r\n   * @param {string} deploymentName The name of the deployment to delete.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async deleteMethodWithHttpOperationResponse(resourceGroupName: string, deploymentName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Send request\r\n    let initialResult: msRest.HttpOperationResponse;\r\n    try {\r\n      initialResult = await this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, deploymentName, options);\r\n    } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.getLongRunningOperationResult(initialResult, options);\r\n\r\n      // Deserialize Response\r\n  } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * Checks whether the deployment exists.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group with the\r\n   * deployment to check. The name is case insensitive.\r\n   *\r\n   * @param {string} deploymentName The name of the deployment to check.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async checkExistenceWithHttpOperationResponse(resourceGroupName: string, deploymentName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Validate\r\n    try {\r\n      if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {\r\n        throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (resourceGroupName !== null && resourceGroupName !== undefined) {\r\n        if (resourceGroupName.length > 90)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"MaxLength\": 90');\r\n        }\r\n        if (resourceGroupName.length < 1)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"MinLength\": 1');\r\n        }\r\n        if (resourceGroupName.match(/^[-\\w\\._\\(\\)]+$/) === null)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._\\(\\)]+$/');\r\n        }\r\n      }\r\n      if (deploymentName === null || deploymentName === undefined || typeof deploymentName.valueOf() !== 'string') {\r\n        throw new Error('deploymentName cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (deploymentName !== null && deploymentName !== undefined) {\r\n        if (deploymentName.length > 64)\r\n        {\r\n          throw new Error('\"deploymentName\" should satisfy the constraint - \"MaxLength\": 64');\r\n        }\r\n        if (deploymentName.length < 1)\r\n        {\r\n          throw new Error('\"deploymentName\" should satisfy the constraint - \"MinLength\": 1');\r\n        }\r\n        if (deploymentName.match(/^[-\\w\\._\\(\\)]+$/) === null)\r\n        {\r\n          throw new Error('\"deploymentName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._\\(\\)]+$/');\r\n        }\r\n      }\r\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\r\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\r\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let baseUrl = this.client.baseUri;\r\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}';\r\n    requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));\r\n    requestUrl = requestUrl.replace('{deploymentName}', encodeURIComponent(deploymentName));\r\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\r\n    let queryParamsArray: Array<any> = [];\r\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\r\n    if (queryParamsArray.length > 0) {\r\n      requestUrl += '?' + queryParamsArray.join('&');\r\n    }\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'HEAD';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 204 && statusCode !== 404) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n      operationRes.bodyAsJson = (statusCode === 204);\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n\r\n  /**\r\n   * @summary Deploys resources to a resource group.\r\n   *\r\n   * You can provide the template and parameters directly in the request or link\r\n   * to JSON files.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group to deploy\r\n   * the resources to. The name is case insensitive. The resource group must\r\n   * already exist.\r\n   *\r\n   * @param {string} deploymentName The name of the deployment.\r\n   *\r\n   * @param {Deployment} parameters Additional parameters supplied to the\r\n   * operation.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async createOrUpdateWithHttpOperationResponse(resourceGroupName: string, deploymentName: string, parameters: Models.Deployment, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Send request\r\n    let initialResult: msRest.HttpOperationResponse;\r\n    try {\r\n      initialResult = await this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, deploymentName, parameters, options);\r\n    } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.getLongRunningOperationResult(initialResult, options);\r\n      let httpRequest = operationRes.request;\r\n      let response = operationRes.response;\r\n\r\n      // Deserialize Response\r\n      let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n      try {\r\n        if (parsedResponse !== null && parsedResponse !== undefined) {\r\n          let resultMapper = Mappers.DeploymentExtended;\r\n          operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n        }\r\n      } catch (error) {\r\n        let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n        deserializationError.request = msRest.stripRequest(httpRequest);\r\n        deserializationError.response = msRest.stripResponse(response);\r\n        return Promise.reject(deserializationError);\r\n      }\r\n  } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * Gets a deployment.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group. The name\r\n   * is case insensitive.\r\n   *\r\n   * @param {string} deploymentName The name of the deployment to get.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async getWithHttpOperationResponse(resourceGroupName: string, deploymentName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Validate\r\n    try {\r\n      if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {\r\n        throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (resourceGroupName !== null && resourceGroupName !== undefined) {\r\n        if (resourceGroupName.length > 90)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"MaxLength\": 90');\r\n        }\r\n        if (resourceGroupName.length < 1)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"MinLength\": 1');\r\n        }\r\n        if (resourceGroupName.match(/^[-\\w\\._\\(\\)]+$/) === null)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._\\(\\)]+$/');\r\n        }\r\n      }\r\n      if (deploymentName === null || deploymentName === undefined || typeof deploymentName.valueOf() !== 'string') {\r\n        throw new Error('deploymentName cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (deploymentName !== null && deploymentName !== undefined) {\r\n        if (deploymentName.length > 64)\r\n        {\r\n          throw new Error('\"deploymentName\" should satisfy the constraint - \"MaxLength\": 64');\r\n        }\r\n        if (deploymentName.length < 1)\r\n        {\r\n          throw new Error('\"deploymentName\" should satisfy the constraint - \"MinLength\": 1');\r\n        }\r\n        if (deploymentName.match(/^[-\\w\\._\\(\\)]+$/) === null)\r\n        {\r\n          throw new Error('\"deploymentName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._\\(\\)]+$/');\r\n        }\r\n      }\r\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\r\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\r\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let baseUrl = this.client.baseUri;\r\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}';\r\n    requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));\r\n    requestUrl = requestUrl.replace('{deploymentName}', encodeURIComponent(deploymentName));\r\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\r\n    let queryParamsArray: Array<any> = [];\r\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\r\n    if (queryParamsArray.length > 0) {\r\n      requestUrl += '?' + queryParamsArray.join('&');\r\n    }\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'GET';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 200) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n      // Deserialize Response\r\n      if (statusCode === 200) {\r\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedResponse !== null && parsedResponse !== undefined) {\r\n            let resultMapper = Mappers.DeploymentExtended;\r\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n          }\r\n        } catch (error) {\r\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n          deserializationError.request = msRest.stripRequest(httpRequest);\r\n          deserializationError.response = msRest.stripResponse(response);\r\n          return Promise.reject(deserializationError);\r\n        }\r\n      }\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * @summary Cancels a currently running template deployment.\r\n   *\r\n   * You can cancel a deployment only if the provisioningState is Accepted or\r\n   * Running. After the deployment is canceled, the provisioningState is set to\r\n   * Canceled. Canceling a template deployment stops the currently running\r\n   * template deployment and leaves the resource group partially deployed.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group. The name\r\n   * is case insensitive.\r\n   *\r\n   * @param {string} deploymentName The name of the deployment to cancel.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async cancelWithHttpOperationResponse(resourceGroupName: string, deploymentName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Validate\r\n    try {\r\n      if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {\r\n        throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (resourceGroupName !== null && resourceGroupName !== undefined) {\r\n        if (resourceGroupName.length > 90)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"MaxLength\": 90');\r\n        }\r\n        if (resourceGroupName.length < 1)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"MinLength\": 1');\r\n        }\r\n        if (resourceGroupName.match(/^[-\\w\\._\\(\\)]+$/) === null)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._\\(\\)]+$/');\r\n        }\r\n      }\r\n      if (deploymentName === null || deploymentName === undefined || typeof deploymentName.valueOf() !== 'string') {\r\n        throw new Error('deploymentName cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (deploymentName !== null && deploymentName !== undefined) {\r\n        if (deploymentName.length > 64)\r\n        {\r\n          throw new Error('\"deploymentName\" should satisfy the constraint - \"MaxLength\": 64');\r\n        }\r\n        if (deploymentName.length < 1)\r\n        {\r\n          throw new Error('\"deploymentName\" should satisfy the constraint - \"MinLength\": 1');\r\n        }\r\n        if (deploymentName.match(/^[-\\w\\._\\(\\)]+$/) === null)\r\n        {\r\n          throw new Error('\"deploymentName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._\\(\\)]+$/');\r\n        }\r\n      }\r\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\r\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\r\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let baseUrl = this.client.baseUri;\r\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel';\r\n    requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));\r\n    requestUrl = requestUrl.replace('{deploymentName}', encodeURIComponent(deploymentName));\r\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\r\n    let queryParamsArray: Array<any> = [];\r\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\r\n    if (queryParamsArray.length > 0) {\r\n      requestUrl += '?' + queryParamsArray.join('&');\r\n    }\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'POST';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 204) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * Validates whether the specified template is syntactically correct and will\r\n   * be accepted by Azure Resource Manager..\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group the\r\n   * template will be deployed to. The name is case insensitive.\r\n   *\r\n   * @param {string} deploymentName The name of the deployment.\r\n   *\r\n   * @param {Deployment} parameters Parameters to validate.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async validateWithHttpOperationResponse(resourceGroupName: string, deploymentName: string, parameters: Models.Deployment, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Validate\r\n    try {\r\n      if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {\r\n        throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (resourceGroupName !== null && resourceGroupName !== undefined) {\r\n        if (resourceGroupName.length > 90)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"MaxLength\": 90');\r\n        }\r\n        if (resourceGroupName.length < 1)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"MinLength\": 1');\r\n        }\r\n        if (resourceGroupName.match(/^[-\\w\\._\\(\\)]+$/) === null)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._\\(\\)]+$/');\r\n        }\r\n      }\r\n      if (deploymentName === null || deploymentName === undefined || typeof deploymentName.valueOf() !== 'string') {\r\n        throw new Error('deploymentName cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (deploymentName !== null && deploymentName !== undefined) {\r\n        if (deploymentName.length > 64)\r\n        {\r\n          throw new Error('\"deploymentName\" should satisfy the constraint - \"MaxLength\": 64');\r\n        }\r\n        if (deploymentName.length < 1)\r\n        {\r\n          throw new Error('\"deploymentName\" should satisfy the constraint - \"MinLength\": 1');\r\n        }\r\n        if (deploymentName.match(/^[-\\w\\._\\(\\)]+$/) === null)\r\n        {\r\n          throw new Error('\"deploymentName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._\\(\\)]+$/');\r\n        }\r\n      }\r\n      if (parameters === null || parameters === undefined) {\r\n        throw new Error('parameters cannot be null or undefined.');\r\n      }\r\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\r\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\r\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let baseUrl = this.client.baseUri;\r\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/validate';\r\n    requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));\r\n    requestUrl = requestUrl.replace('{deploymentName}', encodeURIComponent(deploymentName));\r\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\r\n    let queryParamsArray: Array<any> = [];\r\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\r\n    if (queryParamsArray.length > 0) {\r\n      requestUrl += '?' + queryParamsArray.join('&');\r\n    }\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'POST';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Serialize Request\r\n    let requestContent = null;\r\n    let requestModel = null;\r\n    try {\r\n      if (parameters !== null && parameters !== undefined) {\r\n        let requestModelMapper = Mappers.Deployment;\r\n        requestModel = client.serializer.serialize(requestModelMapper, parameters, 'parameters');\r\n        requestContent = JSON.stringify(requestModel);\r\n      }\r\n    } catch (error) {\r\n      let serializationError = new Error(`Error \"${error.message}\" occurred in serializing the ` +\r\n          `payload - ${JSON.stringify(parameters, null, 2)}.`);\r\n      return Promise.reject(serializationError);\r\n    }\r\n    httpRequest.body = requestContent;\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 200 && statusCode !== 400) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n      // Deserialize Response\r\n      if (statusCode === 200) {\r\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedResponse !== null && parsedResponse !== undefined) {\r\n            let resultMapper = Mappers.DeploymentValidateResult;\r\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n          }\r\n        } catch (error) {\r\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n          deserializationError.request = msRest.stripRequest(httpRequest);\r\n          deserializationError.response = msRest.stripResponse(response);\r\n          return Promise.reject(deserializationError);\r\n        }\r\n      }\r\n      // Deserialize Response\r\n      if (statusCode === 400) {\r\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedResponse !== null && parsedResponse !== undefined) {\r\n            let resultMapper = Mappers.DeploymentValidateResult;\r\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n          }\r\n        } catch (error) {\r\n          let deserializationError1 = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n          deserializationError1.request = msRest.stripRequest(httpRequest);\r\n          deserializationError1.response = msRest.stripResponse(response);\r\n          return Promise.reject(deserializationError1);\r\n        }\r\n      }\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * Exports the template used for specified deployment.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group. The name\r\n   * is case insensitive.\r\n   *\r\n   * @param {string} deploymentName The name of the deployment from which to get\r\n   * the template.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async exportTemplateWithHttpOperationResponse(resourceGroupName: string, deploymentName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Validate\r\n    try {\r\n      if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {\r\n        throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (resourceGroupName !== null && resourceGroupName !== undefined) {\r\n        if (resourceGroupName.length > 90)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"MaxLength\": 90');\r\n        }\r\n        if (resourceGroupName.length < 1)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"MinLength\": 1');\r\n        }\r\n        if (resourceGroupName.match(/^[-\\w\\._\\(\\)]+$/) === null)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._\\(\\)]+$/');\r\n        }\r\n      }\r\n      if (deploymentName === null || deploymentName === undefined || typeof deploymentName.valueOf() !== 'string') {\r\n        throw new Error('deploymentName cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (deploymentName !== null && deploymentName !== undefined) {\r\n        if (deploymentName.length > 64)\r\n        {\r\n          throw new Error('\"deploymentName\" should satisfy the constraint - \"MaxLength\": 64');\r\n        }\r\n        if (deploymentName.length < 1)\r\n        {\r\n          throw new Error('\"deploymentName\" should satisfy the constraint - \"MinLength\": 1');\r\n        }\r\n        if (deploymentName.match(/^[-\\w\\._\\(\\)]+$/) === null)\r\n        {\r\n          throw new Error('\"deploymentName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._\\(\\)]+$/');\r\n        }\r\n      }\r\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\r\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\r\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let baseUrl = this.client.baseUri;\r\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate';\r\n    requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));\r\n    requestUrl = requestUrl.replace('{deploymentName}', encodeURIComponent(deploymentName));\r\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\r\n    let queryParamsArray: Array<any> = [];\r\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\r\n    if (queryParamsArray.length > 0) {\r\n      requestUrl += '?' + queryParamsArray.join('&');\r\n    }\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'POST';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 200) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n      // Deserialize Response\r\n      if (statusCode === 200) {\r\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedResponse !== null && parsedResponse !== undefined) {\r\n            let resultMapper = Mappers.DeploymentExportResult;\r\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n          }\r\n        } catch (error) {\r\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n          deserializationError.request = msRest.stripRequest(httpRequest);\r\n          deserializationError.response = msRest.stripResponse(response);\r\n          return Promise.reject(deserializationError);\r\n        }\r\n      }\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * Get all the deployments for a resource group.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group with the\r\n   * deployments to get. The name is case insensitive.\r\n   *\r\n   * @param {DeploymentsListByResourceGroupOptionalParams} [options] Optional\r\n   * Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: Models.DeploymentsListByResourceGroupOptionalParams): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    let filter = (options && options.filter !== undefined) ? options.filter : undefined;\r\n    let top = (options && options.top !== undefined) ? options.top : undefined;\r\n    // Validate\r\n    try {\r\n      if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {\r\n        throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (resourceGroupName !== null && resourceGroupName !== undefined) {\r\n        if (resourceGroupName.length > 90)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"MaxLength\": 90');\r\n        }\r\n        if (resourceGroupName.length < 1)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"MinLength\": 1');\r\n        }\r\n        if (resourceGroupName.match(/^[-\\w\\._\\(\\)]+$/) === null)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._\\(\\)]+$/');\r\n        }\r\n      }\r\n      if (filter !== null && filter !== undefined && typeof filter.valueOf() !== 'string') {\r\n        throw new Error('filter must be of type string.');\r\n      }\r\n      if (top !== null && top !== undefined && typeof top !== 'number') {\r\n        throw new Error('top must be of type number.');\r\n      }\r\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\r\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\r\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let baseUrl = this.client.baseUri;\r\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/';\r\n    requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));\r\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\r\n    let queryParamsArray: Array<any> = [];\r\n    if (filter !== null && filter !== undefined) {\r\n      queryParamsArray.push('$filter=' + encodeURIComponent(filter));\r\n    }\r\n    if (top !== null && top !== undefined) {\r\n      queryParamsArray.push('$top=' + encodeURIComponent(top.toString()));\r\n    }\r\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\r\n    if (queryParamsArray.length > 0) {\r\n      requestUrl += '?' + queryParamsArray.join('&');\r\n    }\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'GET';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 200) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n      // Deserialize Response\r\n      if (statusCode === 200) {\r\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedResponse !== null && parsedResponse !== undefined) {\r\n            let resultMapper = Mappers.DeploymentListResult;\r\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n          }\r\n        } catch (error) {\r\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n          deserializationError.request = msRest.stripRequest(httpRequest);\r\n          deserializationError.response = msRest.stripResponse(response);\r\n          return Promise.reject(deserializationError);\r\n        }\r\n      }\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * @summary Deletes a deployment from the deployment history.\r\n   *\r\n   * A template deployment that is currently running cannot be deleted. Deleting\r\n   * a template deployment removes the associated deployment operations. Deleting\r\n   * a template deployment does not affect the state of the resource group. This\r\n   * is an asynchronous operation that returns a status of 202 until the template\r\n   * deployment is successfully deleted. The Location response header contains\r\n   * the URI that is used to obtain the status of the process. While the process\r\n   * is running, a call to the URI in the Location header returns a status of\r\n   * 202. When the process finishes, the URI in the Location header returns a\r\n   * status of 204 on success. If the asynchronous request failed, the URI in the\r\n   * Location header returns an error-level status code.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group with the\r\n   * deployment to delete. The name is case insensitive.\r\n   *\r\n   * @param {string} deploymentName The name of the deployment to delete.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, deploymentName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Validate\r\n    try {\r\n      if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {\r\n        throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (resourceGroupName !== null && resourceGroupName !== undefined) {\r\n        if (resourceGroupName.length > 90)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"MaxLength\": 90');\r\n        }\r\n        if (resourceGroupName.length < 1)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"MinLength\": 1');\r\n        }\r\n        if (resourceGroupName.match(/^[-\\w\\._\\(\\)]+$/) === null)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._\\(\\)]+$/');\r\n        }\r\n      }\r\n      if (deploymentName === null || deploymentName === undefined || typeof deploymentName.valueOf() !== 'string') {\r\n        throw new Error('deploymentName cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (deploymentName !== null && deploymentName !== undefined) {\r\n        if (deploymentName.length > 64)\r\n        {\r\n          throw new Error('\"deploymentName\" should satisfy the constraint - \"MaxLength\": 64');\r\n        }\r\n        if (deploymentName.length < 1)\r\n        {\r\n          throw new Error('\"deploymentName\" should satisfy the constraint - \"MinLength\": 1');\r\n        }\r\n        if (deploymentName.match(/^[-\\w\\._\\(\\)]+$/) === null)\r\n        {\r\n          throw new Error('\"deploymentName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._\\(\\)]+$/');\r\n        }\r\n      }\r\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\r\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\r\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let baseUrl = this.client.baseUri;\r\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}';\r\n    requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));\r\n    requestUrl = requestUrl.replace('{deploymentName}', encodeURIComponent(deploymentName));\r\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\r\n    let queryParamsArray: Array<any> = [];\r\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\r\n    if (queryParamsArray.length > 0) {\r\n      requestUrl += '?' + queryParamsArray.join('&');\r\n    }\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'DELETE';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 202 && statusCode !== 204) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * @summary Deploys resources to a resource group.\r\n   *\r\n   * You can provide the template and parameters directly in the request or link\r\n   * to JSON files.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group to deploy\r\n   * the resources to. The name is case insensitive. The resource group must\r\n   * already exist.\r\n   *\r\n   * @param {string} deploymentName The name of the deployment.\r\n   *\r\n   * @param {Deployment} parameters Additional parameters supplied to the\r\n   * operation.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, deploymentName: string, parameters: Models.Deployment, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Validate\r\n    try {\r\n      if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {\r\n        throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (resourceGroupName !== null && resourceGroupName !== undefined) {\r\n        if (resourceGroupName.length > 90)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"MaxLength\": 90');\r\n        }\r\n        if (resourceGroupName.length < 1)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"MinLength\": 1');\r\n        }\r\n        if (resourceGroupName.match(/^[-\\w\\._\\(\\)]+$/) === null)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._\\(\\)]+$/');\r\n        }\r\n      }\r\n      if (deploymentName === null || deploymentName === undefined || typeof deploymentName.valueOf() !== 'string') {\r\n        throw new Error('deploymentName cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (deploymentName !== null && deploymentName !== undefined) {\r\n        if (deploymentName.length > 64)\r\n        {\r\n          throw new Error('\"deploymentName\" should satisfy the constraint - \"MaxLength\": 64');\r\n        }\r\n        if (deploymentName.length < 1)\r\n        {\r\n          throw new Error('\"deploymentName\" should satisfy the constraint - \"MinLength\": 1');\r\n        }\r\n        if (deploymentName.match(/^[-\\w\\._\\(\\)]+$/) === null)\r\n        {\r\n          throw new Error('\"deploymentName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._\\(\\)]+$/');\r\n        }\r\n      }\r\n      if (parameters === null || parameters === undefined) {\r\n        throw new Error('parameters cannot be null or undefined.');\r\n      }\r\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\r\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\r\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let baseUrl = this.client.baseUri;\r\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}';\r\n    requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));\r\n    requestUrl = requestUrl.replace('{deploymentName}', encodeURIComponent(deploymentName));\r\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\r\n    let queryParamsArray: Array<any> = [];\r\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\r\n    if (queryParamsArray.length > 0) {\r\n      requestUrl += '?' + queryParamsArray.join('&');\r\n    }\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'PUT';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Serialize Request\r\n    let requestContent = null;\r\n    let requestModel = null;\r\n    try {\r\n      if (parameters !== null && parameters !== undefined) {\r\n        let requestModelMapper = Mappers.Deployment;\r\n        requestModel = client.serializer.serialize(requestModelMapper, parameters, 'parameters');\r\n        requestContent = JSON.stringify(requestModel);\r\n      }\r\n    } catch (error) {\r\n      let serializationError = new Error(`Error \"${error.message}\" occurred in serializing the ` +\r\n          `payload - ${JSON.stringify(parameters, null, 2)}.`);\r\n      return Promise.reject(serializationError);\r\n    }\r\n    httpRequest.body = requestContent;\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 200 && statusCode !== 201) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n      // Deserialize Response\r\n      if (statusCode === 200) {\r\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedResponse !== null && parsedResponse !== undefined) {\r\n            let resultMapper = Mappers.DeploymentExtended;\r\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n          }\r\n        } catch (error) {\r\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n          deserializationError.request = msRest.stripRequest(httpRequest);\r\n          deserializationError.response = msRest.stripResponse(response);\r\n          return Promise.reject(deserializationError);\r\n        }\r\n      }\r\n      // Deserialize Response\r\n      if (statusCode === 201) {\r\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedResponse !== null && parsedResponse !== undefined) {\r\n            let resultMapper = Mappers.DeploymentExtended;\r\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n          }\r\n        } catch (error) {\r\n          let deserializationError1 = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n          deserializationError1.request = msRest.stripRequest(httpRequest);\r\n          deserializationError1.response = msRest.stripResponse(response);\r\n          return Promise.reject(deserializationError1);\r\n        }\r\n      }\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * Get all the deployments for a resource group.\r\n   *\r\n   * @param {string} nextPageLink The NextLink from the previous successful call\r\n   * to List operation.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Validate\r\n    try {\r\n      if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {\r\n        throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let requestUrl = '{nextLink}';\r\n    requestUrl = requestUrl.replace('{nextLink}', nextPageLink);\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'GET';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 200) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n      // Deserialize Response\r\n      if (statusCode === 200) {\r\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedResponse !== null && parsedResponse !== undefined) {\r\n            let resultMapper = Mappers.DeploymentListResult;\r\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n          }\r\n        } catch (error) {\r\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n          deserializationError.request = msRest.stripRequest(httpRequest);\r\n          deserializationError.response = msRest.stripResponse(response);\r\n          return Promise.reject(deserializationError);\r\n        }\r\n      }\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * @summary Deletes a deployment from the deployment history.\r\n   *\r\n   * A template deployment that is currently running cannot be deleted. Deleting\r\n   * a template deployment removes the associated deployment operations. Deleting\r\n   * a template deployment does not affect the state of the resource group. This\r\n   * is an asynchronous operation that returns a status of 202 until the template\r\n   * deployment is successfully deleted. The Location response header contains\r\n   * the URI that is used to obtain the status of the process. While the process\r\n   * is running, a call to the URI in the Location header returns a status of\r\n   * 202. When the process finishes, the URI in the Location header returns a\r\n   * status of 204 on success. If the asynchronous request failed, the URI in the\r\n   * Location header returns an error-level status code.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group with the\r\n   * deployment to delete. The name is case insensitive.\r\n   *\r\n   * @param {string} deploymentName The name of the deployment to delete.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  deleteMethod(resourceGroupName: string, deploymentName: string): Promise<void>;\r\n  deleteMethod(resourceGroupName: string, deploymentName: string, options: msRest.RequestOptionsBase): Promise<void>;\r\n  deleteMethod(resourceGroupName: string, deploymentName: string, callback: msRest.ServiceCallback<void>): void;\r\n  deleteMethod(resourceGroupName: string, deploymentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\r\n  deleteMethod(resourceGroupName: string, deploymentName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<void>;\r\n    if (!callback) {\r\n      return this.deleteMethodWithHttpOperationResponse(resourceGroupName, deploymentName, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as void);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.deleteMethodWithHttpOperationResponse(resourceGroupName, deploymentName, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as void;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks whether the deployment exists.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group with the\r\n   * deployment to check. The name is case insensitive.\r\n   *\r\n   * @param {string} deploymentName The name of the deployment to check.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {boolean} [result]   - The deserialized result object if an error did not occur.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  checkExistence(resourceGroupName: string, deploymentName: string): Promise<boolean>;\r\n  checkExistence(resourceGroupName: string, deploymentName: string, options: msRest.RequestOptionsBase): Promise<boolean>;\r\n  checkExistence(resourceGroupName: string, deploymentName: string, callback: msRest.ServiceCallback<boolean>): void;\r\n  checkExistence(resourceGroupName: string, deploymentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<boolean>): void;\r\n  checkExistence(resourceGroupName: string, deploymentName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<boolean>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<boolean>;\r\n    if (!callback) {\r\n      return this.checkExistenceWithHttpOperationResponse(resourceGroupName, deploymentName, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as boolean);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.checkExistenceWithHttpOperationResponse(resourceGroupName, deploymentName, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as boolean;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @summary Deploys resources to a resource group.\r\n   *\r\n   * You can provide the template and parameters directly in the request or link\r\n   * to JSON files.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group to deploy\r\n   * the resources to. The name is case insensitive. The resource group must\r\n   * already exist.\r\n   *\r\n   * @param {string} deploymentName The name of the deployment.\r\n   *\r\n   * @param {Deployment} parameters Additional parameters supplied to the\r\n   * operation.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {Models.DeploymentExtended} [result]   - The deserialized result object if an error did not occur.\r\n   *                      See {@link Models.DeploymentExtended} for more\r\n   *                      information.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  createOrUpdate(resourceGroupName: string, deploymentName: string, parameters: Models.Deployment): Promise<Models.DeploymentExtended>;\r\n  createOrUpdate(resourceGroupName: string, deploymentName: string, parameters: Models.Deployment, options: msRest.RequestOptionsBase): Promise<Models.DeploymentExtended>;\r\n  createOrUpdate(resourceGroupName: string, deploymentName: string, parameters: Models.Deployment, callback: msRest.ServiceCallback<Models.DeploymentExtended>): void;\r\n  createOrUpdate(resourceGroupName: string, deploymentName: string, parameters: Models.Deployment, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentExtended>): void;\r\n  createOrUpdate(resourceGroupName: string, deploymentName: string, parameters: Models.Deployment, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.DeploymentExtended>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<Models.DeploymentExtended>;\r\n    if (!callback) {\r\n      return this.createOrUpdateWithHttpOperationResponse(resourceGroupName, deploymentName, parameters, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as Models.DeploymentExtended);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.createOrUpdateWithHttpOperationResponse(resourceGroupName, deploymentName, parameters, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as Models.DeploymentExtended;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets a deployment.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group. The name\r\n   * is case insensitive.\r\n   *\r\n   * @param {string} deploymentName The name of the deployment to get.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {Models.DeploymentExtended} [result]   - The deserialized result object if an error did not occur.\r\n   *                      See {@link Models.DeploymentExtended} for more\r\n   *                      information.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  get(resourceGroupName: string, deploymentName: string): Promise<Models.DeploymentExtended>;\r\n  get(resourceGroupName: string, deploymentName: string, options: msRest.RequestOptionsBase): Promise<Models.DeploymentExtended>;\r\n  get(resourceGroupName: string, deploymentName: string, callback: msRest.ServiceCallback<Models.DeploymentExtended>): void;\r\n  get(resourceGroupName: string, deploymentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentExtended>): void;\r\n  get(resourceGroupName: string, deploymentName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.DeploymentExtended>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<Models.DeploymentExtended>;\r\n    if (!callback) {\r\n      return this.getWithHttpOperationResponse(resourceGroupName, deploymentName, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as Models.DeploymentExtended);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.getWithHttpOperationResponse(resourceGroupName, deploymentName, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as Models.DeploymentExtended;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @summary Cancels a currently running template deployment.\r\n   *\r\n   * You can cancel a deployment only if the provisioningState is Accepted or\r\n   * Running. After the deployment is canceled, the provisioningState is set to\r\n   * Canceled. Canceling a template deployment stops the currently running\r\n   * template deployment and leaves the resource group partially deployed.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group. The name\r\n   * is case insensitive.\r\n   *\r\n   * @param {string} deploymentName The name of the deployment to cancel.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  cancel(resourceGroupName: string, deploymentName: string): Promise<void>;\r\n  cancel(resourceGroupName: string, deploymentName: string, options: msRest.RequestOptionsBase): Promise<void>;\r\n  cancel(resourceGroupName: string, deploymentName: string, callback: msRest.ServiceCallback<void>): void;\r\n  cancel(resourceGroupName: string, deploymentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\r\n  cancel(resourceGroupName: string, deploymentName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<void>;\r\n    if (!callback) {\r\n      return this.cancelWithHttpOperationResponse(resourceGroupName, deploymentName, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as void);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.cancelWithHttpOperationResponse(resourceGroupName, deploymentName, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as void;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validates whether the specified template is syntactically correct and will\r\n   * be accepted by Azure Resource Manager..\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group the\r\n   * template will be deployed to. The name is case insensitive.\r\n   *\r\n   * @param {string} deploymentName The name of the deployment.\r\n   *\r\n   * @param {Deployment} parameters Parameters to validate.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {Models.DeploymentValidateResult} [result]   - The deserialized result object if an error did not occur.\r\n   *                      See {@link Models.DeploymentValidateResult} for more\r\n   *                      information.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  validate(resourceGroupName: string, deploymentName: string, parameters: Models.Deployment): Promise<Models.DeploymentValidateResult>;\r\n  validate(resourceGroupName: string, deploymentName: string, parameters: Models.Deployment, options: msRest.RequestOptionsBase): Promise<Models.DeploymentValidateResult>;\r\n  validate(resourceGroupName: string, deploymentName: string, parameters: Models.Deployment, callback: msRest.ServiceCallback<Models.DeploymentValidateResult>): void;\r\n  validate(resourceGroupName: string, deploymentName: string, parameters: Models.Deployment, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentValidateResult>): void;\r\n  validate(resourceGroupName: string, deploymentName: string, parameters: Models.Deployment, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.DeploymentValidateResult>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<Models.DeploymentValidateResult>;\r\n    if (!callback) {\r\n      return this.validateWithHttpOperationResponse(resourceGroupName, deploymentName, parameters, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as Models.DeploymentValidateResult);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.validateWithHttpOperationResponse(resourceGroupName, deploymentName, parameters, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as Models.DeploymentValidateResult;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Exports the template used for specified deployment.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group. The name\r\n   * is case insensitive.\r\n   *\r\n   * @param {string} deploymentName The name of the deployment from which to get\r\n   * the template.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {Models.DeploymentExportResult} [result]   - The deserialized result object if an error did not occur.\r\n   *                      See {@link Models.DeploymentExportResult} for more\r\n   *                      information.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  exportTemplate(resourceGroupName: string, deploymentName: string): Promise<Models.DeploymentExportResult>;\r\n  exportTemplate(resourceGroupName: string, deploymentName: string, options: msRest.RequestOptionsBase): Promise<Models.DeploymentExportResult>;\r\n  exportTemplate(resourceGroupName: string, deploymentName: string, callback: msRest.ServiceCallback<Models.DeploymentExportResult>): void;\r\n  exportTemplate(resourceGroupName: string, deploymentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentExportResult>): void;\r\n  exportTemplate(resourceGroupName: string, deploymentName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.DeploymentExportResult>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<Models.DeploymentExportResult>;\r\n    if (!callback) {\r\n      return this.exportTemplateWithHttpOperationResponse(resourceGroupName, deploymentName, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as Models.DeploymentExportResult);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.exportTemplateWithHttpOperationResponse(resourceGroupName, deploymentName, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as Models.DeploymentExportResult;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all the deployments for a resource group.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group with the\r\n   * deployments to get. The name is case insensitive.\r\n   *\r\n   * @param {DeploymentsListByResourceGroupOptionalParams} [options] Optional\r\n   * Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {Models.DeploymentListResult} [result]   - The deserialized result object if an error did not occur.\r\n   *                      See {@link Models.DeploymentListResult} for more\r\n   *                      information.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  listByResourceGroup(resourceGroupName: string): Promise<Models.DeploymentListResult>;\r\n  listByResourceGroup(resourceGroupName: string, options: Models.DeploymentsListByResourceGroupOptionalParams): Promise<Models.DeploymentListResult>;\r\n  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.DeploymentListResult>): void;\r\n  listByResourceGroup(resourceGroupName: string, options: Models.DeploymentsListByResourceGroupOptionalParams, callback: msRest.ServiceCallback<Models.DeploymentListResult>): void;\r\n  listByResourceGroup(resourceGroupName: string, options?: Models.DeploymentsListByResourceGroupOptionalParams, callback?: msRest.ServiceCallback<Models.DeploymentListResult>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<Models.DeploymentListResult>;\r\n    if (!callback) {\r\n      return this.listByResourceGroupWithHttpOperationResponse(resourceGroupName, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as Models.DeploymentListResult);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.listByResourceGroupWithHttpOperationResponse(resourceGroupName, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as Models.DeploymentListResult;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @summary Deletes a deployment from the deployment history.\r\n   *\r\n   * A template deployment that is currently running cannot be deleted. Deleting\r\n   * a template deployment removes the associated deployment operations. Deleting\r\n   * a template deployment does not affect the state of the resource group. This\r\n   * is an asynchronous operation that returns a status of 202 until the template\r\n   * deployment is successfully deleted. The Location response header contains\r\n   * the URI that is used to obtain the status of the process. While the process\r\n   * is running, a call to the URI in the Location header returns a status of\r\n   * 202. When the process finishes, the URI in the Location header returns a\r\n   * status of 204 on success. If the asynchronous request failed, the URI in the\r\n   * Location header returns an error-level status code.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group with the\r\n   * deployment to delete. The name is case insensitive.\r\n   *\r\n   * @param {string} deploymentName The name of the deployment to delete.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  beginDeleteMethod(resourceGroupName: string, deploymentName: string): Promise<void>;\r\n  beginDeleteMethod(resourceGroupName: string, deploymentName: string, options: msRest.RequestOptionsBase): Promise<void>;\r\n  beginDeleteMethod(resourceGroupName: string, deploymentName: string, callback: msRest.ServiceCallback<void>): void;\r\n  beginDeleteMethod(resourceGroupName: string, deploymentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\r\n  beginDeleteMethod(resourceGroupName: string, deploymentName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<void>;\r\n    if (!callback) {\r\n      return this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, deploymentName, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as void);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, deploymentName, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as void;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @summary Deploys resources to a resource group.\r\n   *\r\n   * You can provide the template and parameters directly in the request or link\r\n   * to JSON files.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group to deploy\r\n   * the resources to. The name is case insensitive. The resource group must\r\n   * already exist.\r\n   *\r\n   * @param {string} deploymentName The name of the deployment.\r\n   *\r\n   * @param {Deployment} parameters Additional parameters supplied to the\r\n   * operation.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {Models.DeploymentExtended} [result]   - The deserialized result object if an error did not occur.\r\n   *                      See {@link Models.DeploymentExtended} for more\r\n   *                      information.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  beginCreateOrUpdate(resourceGroupName: string, deploymentName: string, parameters: Models.Deployment): Promise<Models.DeploymentExtended>;\r\n  beginCreateOrUpdate(resourceGroupName: string, deploymentName: string, parameters: Models.Deployment, options: msRest.RequestOptionsBase): Promise<Models.DeploymentExtended>;\r\n  beginCreateOrUpdate(resourceGroupName: string, deploymentName: string, parameters: Models.Deployment, callback: msRest.ServiceCallback<Models.DeploymentExtended>): void;\r\n  beginCreateOrUpdate(resourceGroupName: string, deploymentName: string, parameters: Models.Deployment, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentExtended>): void;\r\n  beginCreateOrUpdate(resourceGroupName: string, deploymentName: string, parameters: Models.Deployment, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.DeploymentExtended>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<Models.DeploymentExtended>;\r\n    if (!callback) {\r\n      return this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, deploymentName, parameters, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as Models.DeploymentExtended);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, deploymentName, parameters, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as Models.DeploymentExtended;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all the deployments for a resource group.\r\n   *\r\n   * @param {string} nextPageLink The NextLink from the previous successful call\r\n   * to List operation.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {Models.DeploymentListResult} [result]   - The deserialized result object if an error did not occur.\r\n   *                      See {@link Models.DeploymentListResult} for more\r\n   *                      information.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  listByResourceGroupNext(nextPageLink: string): Promise<Models.DeploymentListResult>;\r\n  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase): Promise<Models.DeploymentListResult>;\r\n  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DeploymentListResult>): void;\r\n  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentListResult>): void;\r\n  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.DeploymentListResult>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<Models.DeploymentListResult>;\r\n    if (!callback) {\r\n      return this.listByResourceGroupNextWithHttpOperationResponse(nextPageLink, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as Models.DeploymentListResult);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.listByResourceGroupNextWithHttpOperationResponse(nextPageLink, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as Models.DeploymentListResult;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./lib/resource/operations/deployments.ts","/*\r\n * Code generated by Microsoft (R) AutoRest Code Generator.\r\n * Changes may cause incorrect behavior and will be lost if the code is\r\n * regenerated.\r\n */\r\n\r\nimport * as msRest from \"ms-rest-js\";\r\nimport * as Models from \"../models\";\r\nimport * as Mappers from \"../models/mappers\";\r\nimport { ResourceManagementClient } from \"../resourceManagementClient\";\r\n\r\nconst WebResource = msRest.WebResource;\r\n\r\n/** Class representing a Providers. */\r\nexport class Providers {\r\n  private readonly client: ResourceManagementClient;\r\n  /**\r\n   * Create a Providers.\r\n   * @param {ResourceManagementClient} client Reference to the service client.\r\n   */\r\n  constructor(client: ResourceManagementClient) {\r\n    this.client = client;\r\n  }\r\n\r\n  /**\r\n   * Unregisters a subscription from a resource provider.\r\n   *\r\n   * @param {string} resourceProviderNamespace The namespace of the resource\r\n   * provider to unregister.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async unregisterWithHttpOperationResponse(resourceProviderNamespace: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Validate\r\n    try {\r\n      if (resourceProviderNamespace === null || resourceProviderNamespace === undefined || typeof resourceProviderNamespace.valueOf() !== 'string') {\r\n        throw new Error('resourceProviderNamespace cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\r\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\r\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let baseUrl = this.client.baseUri;\r\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/unregister';\r\n    requestUrl = requestUrl.replace('{resourceProviderNamespace}', encodeURIComponent(resourceProviderNamespace));\r\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\r\n    let queryParamsArray: Array<any> = [];\r\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\r\n    if (queryParamsArray.length > 0) {\r\n      requestUrl += '?' + queryParamsArray.join('&');\r\n    }\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'POST';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 200) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n      // Deserialize Response\r\n      if (statusCode === 200) {\r\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedResponse !== null && parsedResponse !== undefined) {\r\n            let resultMapper = Mappers.Provider;\r\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n          }\r\n        } catch (error) {\r\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n          deserializationError.request = msRest.stripRequest(httpRequest);\r\n          deserializationError.response = msRest.stripResponse(response);\r\n          return Promise.reject(deserializationError);\r\n        }\r\n      }\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * Registers a subscription with a resource provider.\r\n   *\r\n   * @param {string} resourceProviderNamespace The namespace of the resource\r\n   * provider to register.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async registerWithHttpOperationResponse(resourceProviderNamespace: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Validate\r\n    try {\r\n      if (resourceProviderNamespace === null || resourceProviderNamespace === undefined || typeof resourceProviderNamespace.valueOf() !== 'string') {\r\n        throw new Error('resourceProviderNamespace cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\r\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\r\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let baseUrl = this.client.baseUri;\r\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/register';\r\n    requestUrl = requestUrl.replace('{resourceProviderNamespace}', encodeURIComponent(resourceProviderNamespace));\r\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\r\n    let queryParamsArray: Array<any> = [];\r\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\r\n    if (queryParamsArray.length > 0) {\r\n      requestUrl += '?' + queryParamsArray.join('&');\r\n    }\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'POST';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 200) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n      // Deserialize Response\r\n      if (statusCode === 200) {\r\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedResponse !== null && parsedResponse !== undefined) {\r\n            let resultMapper = Mappers.Provider;\r\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n          }\r\n        } catch (error) {\r\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n          deserializationError.request = msRest.stripRequest(httpRequest);\r\n          deserializationError.response = msRest.stripResponse(response);\r\n          return Promise.reject(deserializationError);\r\n        }\r\n      }\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * Gets all resource providers for a subscription.\r\n   *\r\n   * @param {ProvidersListOptionalParams} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async listWithHttpOperationResponse(options?: Models.ProvidersListOptionalParams): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    let top = (options && options.top !== undefined) ? options.top : undefined;\r\n    let expand = (options && options.expand !== undefined) ? options.expand : undefined;\r\n    // Validate\r\n    try {\r\n      if (top !== null && top !== undefined && typeof top !== 'number') {\r\n        throw new Error('top must be of type number.');\r\n      }\r\n      if (expand !== null && expand !== undefined && typeof expand.valueOf() !== 'string') {\r\n        throw new Error('expand must be of type string.');\r\n      }\r\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\r\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\r\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let baseUrl = this.client.baseUri;\r\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/providers';\r\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\r\n    let queryParamsArray: Array<any> = [];\r\n    if (top !== null && top !== undefined) {\r\n      queryParamsArray.push('$top=' + encodeURIComponent(top.toString()));\r\n    }\r\n    if (expand !== null && expand !== undefined) {\r\n      queryParamsArray.push('$expand=' + encodeURIComponent(expand));\r\n    }\r\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\r\n    if (queryParamsArray.length > 0) {\r\n      requestUrl += '?' + queryParamsArray.join('&');\r\n    }\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'GET';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 200) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n      // Deserialize Response\r\n      if (statusCode === 200) {\r\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedResponse !== null && parsedResponse !== undefined) {\r\n            let resultMapper = Mappers.ProviderListResult;\r\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n          }\r\n        } catch (error) {\r\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n          deserializationError.request = msRest.stripRequest(httpRequest);\r\n          deserializationError.response = msRest.stripResponse(response);\r\n          return Promise.reject(deserializationError);\r\n        }\r\n      }\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * Gets the specified resource provider.\r\n   *\r\n   * @param {string} resourceProviderNamespace The namespace of the resource\r\n   * provider.\r\n   *\r\n   * @param {ProvidersGetOptionalParams} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async getWithHttpOperationResponse(resourceProviderNamespace: string, options?: Models.ProvidersGetOptionalParams): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    let expand = (options && options.expand !== undefined) ? options.expand : undefined;\r\n    // Validate\r\n    try {\r\n      if (expand !== null && expand !== undefined && typeof expand.valueOf() !== 'string') {\r\n        throw new Error('expand must be of type string.');\r\n      }\r\n      if (resourceProviderNamespace === null || resourceProviderNamespace === undefined || typeof resourceProviderNamespace.valueOf() !== 'string') {\r\n        throw new Error('resourceProviderNamespace cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\r\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\r\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let baseUrl = this.client.baseUri;\r\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}';\r\n    requestUrl = requestUrl.replace('{resourceProviderNamespace}', encodeURIComponent(resourceProviderNamespace));\r\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\r\n    let queryParamsArray: Array<any> = [];\r\n    if (expand !== null && expand !== undefined) {\r\n      queryParamsArray.push('$expand=' + encodeURIComponent(expand));\r\n    }\r\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\r\n    if (queryParamsArray.length > 0) {\r\n      requestUrl += '?' + queryParamsArray.join('&');\r\n    }\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'GET';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 200) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n      // Deserialize Response\r\n      if (statusCode === 200) {\r\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedResponse !== null && parsedResponse !== undefined) {\r\n            let resultMapper = Mappers.Provider;\r\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n          }\r\n        } catch (error) {\r\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n          deserializationError.request = msRest.stripRequest(httpRequest);\r\n          deserializationError.response = msRest.stripResponse(response);\r\n          return Promise.reject(deserializationError);\r\n        }\r\n      }\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * Gets all resource providers for a subscription.\r\n   *\r\n   * @param {string} nextPageLink The NextLink from the previous successful call\r\n   * to List operation.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async listNextWithHttpOperationResponse(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Validate\r\n    try {\r\n      if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {\r\n        throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let requestUrl = '{nextLink}';\r\n    requestUrl = requestUrl.replace('{nextLink}', nextPageLink);\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'GET';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 200) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n      // Deserialize Response\r\n      if (statusCode === 200) {\r\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedResponse !== null && parsedResponse !== undefined) {\r\n            let resultMapper = Mappers.ProviderListResult;\r\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n          }\r\n        } catch (error) {\r\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n          deserializationError.request = msRest.stripRequest(httpRequest);\r\n          deserializationError.response = msRest.stripResponse(response);\r\n          return Promise.reject(deserializationError);\r\n        }\r\n      }\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * Unregisters a subscription from a resource provider.\r\n   *\r\n   * @param {string} resourceProviderNamespace The namespace of the resource\r\n   * provider to unregister.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {Models.Provider} [result]   - The deserialized result object if an error did not occur.\r\n   *                      See {@link Models.Provider} for more information.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  unregister(resourceProviderNamespace: string): Promise<Models.Provider>;\r\n  unregister(resourceProviderNamespace: string, options: msRest.RequestOptionsBase): Promise<Models.Provider>;\r\n  unregister(resourceProviderNamespace: string, callback: msRest.ServiceCallback<Models.Provider>): void;\r\n  unregister(resourceProviderNamespace: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Provider>): void;\r\n  unregister(resourceProviderNamespace: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.Provider>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<Models.Provider>;\r\n    if (!callback) {\r\n      return this.unregisterWithHttpOperationResponse(resourceProviderNamespace, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as Models.Provider);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.unregisterWithHttpOperationResponse(resourceProviderNamespace, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as Models.Provider;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registers a subscription with a resource provider.\r\n   *\r\n   * @param {string} resourceProviderNamespace The namespace of the resource\r\n   * provider to register.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {Models.Provider} [result]   - The deserialized result object if an error did not occur.\r\n   *                      See {@link Models.Provider} for more information.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  register(resourceProviderNamespace: string): Promise<Models.Provider>;\r\n  register(resourceProviderNamespace: string, options: msRest.RequestOptionsBase): Promise<Models.Provider>;\r\n  register(resourceProviderNamespace: string, callback: msRest.ServiceCallback<Models.Provider>): void;\r\n  register(resourceProviderNamespace: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Provider>): void;\r\n  register(resourceProviderNamespace: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.Provider>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<Models.Provider>;\r\n    if (!callback) {\r\n      return this.registerWithHttpOperationResponse(resourceProviderNamespace, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as Models.Provider);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.registerWithHttpOperationResponse(resourceProviderNamespace, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as Models.Provider;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets all resource providers for a subscription.\r\n   *\r\n   * @param {ProvidersListOptionalParams} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {Models.ProviderListResult} [result]   - The deserialized result object if an error did not occur.\r\n   *                      See {@link Models.ProviderListResult} for more\r\n   *                      information.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  list(): Promise<Models.ProviderListResult>;\r\n  list(options: Models.ProvidersListOptionalParams): Promise<Models.ProviderListResult>;\r\n  list(callback: msRest.ServiceCallback<Models.ProviderListResult>): void;\r\n  list(options: Models.ProvidersListOptionalParams, callback: msRest.ServiceCallback<Models.ProviderListResult>): void;\r\n  list(options?: Models.ProvidersListOptionalParams, callback?: msRest.ServiceCallback<Models.ProviderListResult>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<Models.ProviderListResult>;\r\n    if (!callback) {\r\n      return this.listWithHttpOperationResponse(options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as Models.ProviderListResult);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.listWithHttpOperationResponse(options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as Models.ProviderListResult;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the specified resource provider.\r\n   *\r\n   * @param {string} resourceProviderNamespace The namespace of the resource\r\n   * provider.\r\n   *\r\n   * @param {ProvidersGetOptionalParams} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {Models.Provider} [result]   - The deserialized result object if an error did not occur.\r\n   *                      See {@link Models.Provider} for more information.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  get(resourceProviderNamespace: string): Promise<Models.Provider>;\r\n  get(resourceProviderNamespace: string, options: Models.ProvidersGetOptionalParams): Promise<Models.Provider>;\r\n  get(resourceProviderNamespace: string, callback: msRest.ServiceCallback<Models.Provider>): void;\r\n  get(resourceProviderNamespace: string, options: Models.ProvidersGetOptionalParams, callback: msRest.ServiceCallback<Models.Provider>): void;\r\n  get(resourceProviderNamespace: string, options?: Models.ProvidersGetOptionalParams, callback?: msRest.ServiceCallback<Models.Provider>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<Models.Provider>;\r\n    if (!callback) {\r\n      return this.getWithHttpOperationResponse(resourceProviderNamespace, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as Models.Provider);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.getWithHttpOperationResponse(resourceProviderNamespace, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as Models.Provider;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets all resource providers for a subscription.\r\n   *\r\n   * @param {string} nextPageLink The NextLink from the previous successful call\r\n   * to List operation.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {Models.ProviderListResult} [result]   - The deserialized result object if an error did not occur.\r\n   *                      See {@link Models.ProviderListResult} for more\r\n   *                      information.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  listNext(nextPageLink: string): Promise<Models.ProviderListResult>;\r\n  listNext(nextPageLink: string, options: msRest.RequestOptionsBase): Promise<Models.ProviderListResult>;\r\n  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProviderListResult>): void;\r\n  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProviderListResult>): void;\r\n  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ProviderListResult>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<Models.ProviderListResult>;\r\n    if (!callback) {\r\n      return this.listNextWithHttpOperationResponse(nextPageLink, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as Models.ProviderListResult);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.listNextWithHttpOperationResponse(nextPageLink, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as Models.ProviderListResult;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./lib/resource/operations/providers.ts","/*\r\n * Code generated by Microsoft (R) AutoRest Code Generator.\r\n * Changes may cause incorrect behavior and will be lost if the code is\r\n * regenerated.\r\n */\r\n\r\nimport * as msRest from \"ms-rest-js\";\r\nimport * as Models from \"../models\";\r\nimport * as Mappers from \"../models/mappers\";\r\nimport { ResourceManagementClient } from \"../resourceManagementClient\";\r\n\r\nconst WebResource = msRest.WebResource;\r\n\r\n/** Class representing a Resources. */\r\nexport class Resources {\r\n  private readonly client: ResourceManagementClient;\r\n  /**\r\n   * Create a Resources.\r\n   * @param {ResourceManagementClient} client Reference to the service client.\r\n   */\r\n  constructor(client: ResourceManagementClient) {\r\n    this.client = client;\r\n  }\r\n\r\n  /**\r\n   * Get all the resources for a resource group.\r\n   *\r\n   * @param {string} resourceGroupName The resource group with the resources to\r\n   * get.\r\n   *\r\n   * @param {ResourcesListByResourceGroupOptionalParams} [options] Optional\r\n   * Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: Models.ResourcesListByResourceGroupOptionalParams): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    let filter = (options && options.filter !== undefined) ? options.filter : undefined;\r\n    let expand = (options && options.expand !== undefined) ? options.expand : undefined;\r\n    let top = (options && options.top !== undefined) ? options.top : undefined;\r\n    // Validate\r\n    try {\r\n      if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {\r\n        throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (resourceGroupName !== null && resourceGroupName !== undefined) {\r\n        if (resourceGroupName.length > 90)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"MaxLength\": 90');\r\n        }\r\n        if (resourceGroupName.length < 1)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"MinLength\": 1');\r\n        }\r\n        if (resourceGroupName.match(/^[-\\w\\._\\(\\)]+$/) === null)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._\\(\\)]+$/');\r\n        }\r\n      }\r\n      if (filter !== null && filter !== undefined && typeof filter.valueOf() !== 'string') {\r\n        throw new Error('filter must be of type string.');\r\n      }\r\n      if (expand !== null && expand !== undefined && typeof expand.valueOf() !== 'string') {\r\n        throw new Error('expand must be of type string.');\r\n      }\r\n      if (top !== null && top !== undefined && typeof top !== 'number') {\r\n        throw new Error('top must be of type number.');\r\n      }\r\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\r\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\r\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let baseUrl = this.client.baseUri;\r\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/resources';\r\n    requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));\r\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\r\n    let queryParamsArray: Array<any> = [];\r\n    if (filter !== null && filter !== undefined) {\r\n      queryParamsArray.push('$filter=' + encodeURIComponent(filter));\r\n    }\r\n    if (expand !== null && expand !== undefined) {\r\n      queryParamsArray.push('$expand=' + encodeURIComponent(expand));\r\n    }\r\n    if (top !== null && top !== undefined) {\r\n      queryParamsArray.push('$top=' + encodeURIComponent(top.toString()));\r\n    }\r\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\r\n    if (queryParamsArray.length > 0) {\r\n      requestUrl += '?' + queryParamsArray.join('&');\r\n    }\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'GET';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 200) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n      // Deserialize Response\r\n      if (statusCode === 200) {\r\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedResponse !== null && parsedResponse !== undefined) {\r\n            let resultMapper = Mappers.ResourceListResult;\r\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n          }\r\n        } catch (error) {\r\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n          deserializationError.request = msRest.stripRequest(httpRequest);\r\n          deserializationError.response = msRest.stripResponse(response);\r\n          return Promise.reject(deserializationError);\r\n        }\r\n      }\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n\r\n  /**\r\n   * @summary Moves resources from one resource group to another resource group.\r\n   *\r\n   * The resources to move must be in the same source resource group. The target\r\n   * resource group may be in a different subscription. When moving resources,\r\n   * both the source group and the target group are locked for the duration of\r\n   * the operation. Write and delete operations are blocked on the groups until\r\n   * the move completes.\r\n   *\r\n   * @param {string} sourceResourceGroupName The name of the resource group\r\n   * containing the resources to move.\r\n   *\r\n   * @param {ResourcesMoveInfo} parameters Parameters for moving resources.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async moveResourcesWithHttpOperationResponse(sourceResourceGroupName: string, parameters: Models.ResourcesMoveInfo, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Send request\r\n    let initialResult: msRest.HttpOperationResponse;\r\n    try {\r\n      initialResult = await this.beginMoveResourcesWithHttpOperationResponse(sourceResourceGroupName, parameters, options);\r\n    } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.getLongRunningOperationResult(initialResult, options);\r\n\r\n      // Deserialize Response\r\n  } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n\r\n  /**\r\n   * @summary Validates whether resources can be moved from one resource group to\r\n   * another resource group.\r\n   *\r\n   * This operation checks whether the specified resources can be moved to the\r\n   * target. The resources to move must be in the same source resource group. The\r\n   * target resource group may be in a different subscription. If validation\r\n   * succeeds, it returns HTTP response code 204 (no content). If validation\r\n   * fails, it returns HTTP response code 409 (Conflict) with an error message.\r\n   * Retrieve the URL in the Location header value to check the result of the\r\n   * long-running operation.\r\n   *\r\n   * @param {string} sourceResourceGroupName The name of the resource group\r\n   * containing the resources to validate for move.\r\n   *\r\n   * @param {ResourcesMoveInfo} parameters Parameters for moving resources.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async validateMoveResourcesWithHttpOperationResponse(sourceResourceGroupName: string, parameters: Models.ResourcesMoveInfo, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Send request\r\n    let initialResult: msRest.HttpOperationResponse;\r\n    try {\r\n      initialResult = await this.beginValidateMoveResourcesWithHttpOperationResponse(sourceResourceGroupName, parameters, options);\r\n    } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.getLongRunningOperationResult(initialResult, options);\r\n\r\n      // Deserialize Response\r\n  } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * Get all the resources in a subscription.\r\n   *\r\n   * @param {ResourcesListOptionalParams} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async listWithHttpOperationResponse(options?: Models.ResourcesListOptionalParams): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    let filter = (options && options.filter !== undefined) ? options.filter : undefined;\r\n    let expand = (options && options.expand !== undefined) ? options.expand : undefined;\r\n    let top = (options && options.top !== undefined) ? options.top : undefined;\r\n    // Validate\r\n    try {\r\n      if (filter !== null && filter !== undefined && typeof filter.valueOf() !== 'string') {\r\n        throw new Error('filter must be of type string.');\r\n      }\r\n      if (expand !== null && expand !== undefined && typeof expand.valueOf() !== 'string') {\r\n        throw new Error('expand must be of type string.');\r\n      }\r\n      if (top !== null && top !== undefined && typeof top !== 'number') {\r\n        throw new Error('top must be of type number.');\r\n      }\r\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\r\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\r\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let baseUrl = this.client.baseUri;\r\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resources';\r\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\r\n    let queryParamsArray: Array<any> = [];\r\n    if (filter !== null && filter !== undefined) {\r\n      queryParamsArray.push('$filter=' + encodeURIComponent(filter));\r\n    }\r\n    if (expand !== null && expand !== undefined) {\r\n      queryParamsArray.push('$expand=' + encodeURIComponent(expand));\r\n    }\r\n    if (top !== null && top !== undefined) {\r\n      queryParamsArray.push('$top=' + encodeURIComponent(top.toString()));\r\n    }\r\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\r\n    if (queryParamsArray.length > 0) {\r\n      requestUrl += '?' + queryParamsArray.join('&');\r\n    }\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'GET';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 200) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n      // Deserialize Response\r\n      if (statusCode === 200) {\r\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedResponse !== null && parsedResponse !== undefined) {\r\n            let resultMapper = Mappers.ResourceListResult;\r\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n          }\r\n        } catch (error) {\r\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n          deserializationError.request = msRest.stripRequest(httpRequest);\r\n          deserializationError.response = msRest.stripResponse(response);\r\n          return Promise.reject(deserializationError);\r\n        }\r\n      }\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * Checks whether a resource exists.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group containing\r\n   * the resource to check. The name is case insensitive.\r\n   *\r\n   * @param {string} resourceProviderNamespace The resource provider of the\r\n   * resource to check.\r\n   *\r\n   * @param {string} parentResourcePath The parent resource identity.\r\n   *\r\n   * @param {string} resourceType The resource type.\r\n   *\r\n   * @param {string} resourceName The name of the resource to check whether it\r\n   * exists.\r\n   *\r\n   * @param {string} apiVersion The API version to use for the operation.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async checkExistenceWithHttpOperationResponse(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Validate\r\n    try {\r\n      if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {\r\n        throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (resourceGroupName !== null && resourceGroupName !== undefined) {\r\n        if (resourceGroupName.length > 90)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"MaxLength\": 90');\r\n        }\r\n        if (resourceGroupName.length < 1)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"MinLength\": 1');\r\n        }\r\n        if (resourceGroupName.match(/^[-\\w\\._\\(\\)]+$/) === null)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._\\(\\)]+$/');\r\n        }\r\n      }\r\n      if (resourceProviderNamespace === null || resourceProviderNamespace === undefined || typeof resourceProviderNamespace.valueOf() !== 'string') {\r\n        throw new Error('resourceProviderNamespace cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (parentResourcePath === null || parentResourcePath === undefined || typeof parentResourcePath.valueOf() !== 'string') {\r\n        throw new Error('parentResourcePath cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (resourceType === null || resourceType === undefined || typeof resourceType.valueOf() !== 'string') {\r\n        throw new Error('resourceType cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (resourceName === null || resourceName === undefined || typeof resourceName.valueOf() !== 'string') {\r\n        throw new Error('resourceName cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (apiVersion === null || apiVersion === undefined || typeof apiVersion.valueOf() !== 'string') {\r\n        throw new Error('apiVersion cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\r\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let baseUrl = this.client.baseUri;\r\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}';\r\n    requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));\r\n    requestUrl = requestUrl.replace('{resourceProviderNamespace}', encodeURIComponent(resourceProviderNamespace));\r\n    requestUrl = requestUrl.replace('{parentResourcePath}', parentResourcePath);\r\n    requestUrl = requestUrl.replace('{resourceType}', resourceType);\r\n    requestUrl = requestUrl.replace('{resourceName}', encodeURIComponent(resourceName));\r\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\r\n    let queryParamsArray: Array<any> = [];\r\n    queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));\r\n    if (queryParamsArray.length > 0) {\r\n      requestUrl += '?' + queryParamsArray.join('&');\r\n    }\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'HEAD';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 204 && statusCode !== 404) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n      operationRes.bodyAsJson = (statusCode === 204);\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n\r\n  /**\r\n   * Deletes a resource.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group that\r\n   * contains the resource to delete. The name is case insensitive.\r\n   *\r\n   * @param {string} resourceProviderNamespace The namespace of the resource\r\n   * provider.\r\n   *\r\n   * @param {string} parentResourcePath The parent resource identity.\r\n   *\r\n   * @param {string} resourceType The resource type.\r\n   *\r\n   * @param {string} resourceName The name of the resource to delete.\r\n   *\r\n   * @param {string} apiVersion The API version to use for the operation.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async deleteMethodWithHttpOperationResponse(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Send request\r\n    let initialResult: msRest.HttpOperationResponse;\r\n    try {\r\n      initialResult = await this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, options);\r\n    } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.getLongRunningOperationResult(initialResult, options);\r\n\r\n      // Deserialize Response\r\n  } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n\r\n  /**\r\n   * Creates a resource.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group for the\r\n   * resource. The name is case insensitive.\r\n   *\r\n   * @param {string} resourceProviderNamespace The namespace of the resource\r\n   * provider.\r\n   *\r\n   * @param {string} parentResourcePath The parent resource identity.\r\n   *\r\n   * @param {string} resourceType The resource type of the resource to create.\r\n   *\r\n   * @param {string} resourceName The name of the resource to create.\r\n   *\r\n   * @param {string} apiVersion The API version to use for the operation.\r\n   *\r\n   * @param {GenericResource} parameters Parameters for creating or updating the\r\n   * resource.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async createOrUpdateWithHttpOperationResponse(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, parameters: Models.GenericResource, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Send request\r\n    let initialResult: msRest.HttpOperationResponse;\r\n    try {\r\n      initialResult = await this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, parameters, options);\r\n    } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.getLongRunningOperationResult(initialResult, options);\r\n      let httpRequest = operationRes.request;\r\n      let response = operationRes.response;\r\n\r\n      // Deserialize Response\r\n      let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n      try {\r\n        if (parsedResponse !== null && parsedResponse !== undefined) {\r\n          let resultMapper = Mappers.GenericResource;\r\n          operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n        }\r\n      } catch (error) {\r\n        let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n        deserializationError.request = msRest.stripRequest(httpRequest);\r\n        deserializationError.response = msRest.stripResponse(response);\r\n        return Promise.reject(deserializationError);\r\n      }\r\n  } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n\r\n  /**\r\n   * Updates a resource.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group for the\r\n   * resource. The name is case insensitive.\r\n   *\r\n   * @param {string} resourceProviderNamespace The namespace of the resource\r\n   * provider.\r\n   *\r\n   * @param {string} parentResourcePath The parent resource identity.\r\n   *\r\n   * @param {string} resourceType The resource type of the resource to update.\r\n   *\r\n   * @param {string} resourceName The name of the resource to update.\r\n   *\r\n   * @param {string} apiVersion The API version to use for the operation.\r\n   *\r\n   * @param {GenericResource} parameters Parameters for updating the resource.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async updateWithHttpOperationResponse(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, parameters: Models.GenericResource, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Send request\r\n    let initialResult: msRest.HttpOperationResponse;\r\n    try {\r\n      initialResult = await this.beginUpdateWithHttpOperationResponse(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, parameters, options);\r\n    } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.getLongRunningOperationResult(initialResult, options);\r\n      let httpRequest = operationRes.request;\r\n      let response = operationRes.response;\r\n\r\n      // Deserialize Response\r\n      let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n      try {\r\n        if (parsedResponse !== null && parsedResponse !== undefined) {\r\n          let resultMapper = Mappers.GenericResource;\r\n          operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n        }\r\n      } catch (error) {\r\n        let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n        deserializationError.request = msRest.stripRequest(httpRequest);\r\n        deserializationError.response = msRest.stripResponse(response);\r\n        return Promise.reject(deserializationError);\r\n      }\r\n  } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * Gets a resource.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group containing\r\n   * the resource to get. The name is case insensitive.\r\n   *\r\n   * @param {string} resourceProviderNamespace The namespace of the resource\r\n   * provider.\r\n   *\r\n   * @param {string} parentResourcePath The parent resource identity.\r\n   *\r\n   * @param {string} resourceType The resource type of the resource.\r\n   *\r\n   * @param {string} resourceName The name of the resource to get.\r\n   *\r\n   * @param {string} apiVersion The API version to use for the operation.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async getWithHttpOperationResponse(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Validate\r\n    try {\r\n      if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {\r\n        throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (resourceGroupName !== null && resourceGroupName !== undefined) {\r\n        if (resourceGroupName.length > 90)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"MaxLength\": 90');\r\n        }\r\n        if (resourceGroupName.length < 1)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"MinLength\": 1');\r\n        }\r\n        if (resourceGroupName.match(/^[-\\w\\._\\(\\)]+$/) === null)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._\\(\\)]+$/');\r\n        }\r\n      }\r\n      if (resourceProviderNamespace === null || resourceProviderNamespace === undefined || typeof resourceProviderNamespace.valueOf() !== 'string') {\r\n        throw new Error('resourceProviderNamespace cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (parentResourcePath === null || parentResourcePath === undefined || typeof parentResourcePath.valueOf() !== 'string') {\r\n        throw new Error('parentResourcePath cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (resourceType === null || resourceType === undefined || typeof resourceType.valueOf() !== 'string') {\r\n        throw new Error('resourceType cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (resourceName === null || resourceName === undefined || typeof resourceName.valueOf() !== 'string') {\r\n        throw new Error('resourceName cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (apiVersion === null || apiVersion === undefined || typeof apiVersion.valueOf() !== 'string') {\r\n        throw new Error('apiVersion cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\r\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let baseUrl = this.client.baseUri;\r\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}';\r\n    requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));\r\n    requestUrl = requestUrl.replace('{resourceProviderNamespace}', encodeURIComponent(resourceProviderNamespace));\r\n    requestUrl = requestUrl.replace('{parentResourcePath}', parentResourcePath);\r\n    requestUrl = requestUrl.replace('{resourceType}', resourceType);\r\n    requestUrl = requestUrl.replace('{resourceName}', encodeURIComponent(resourceName));\r\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\r\n    let queryParamsArray: Array<any> = [];\r\n    queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));\r\n    if (queryParamsArray.length > 0) {\r\n      requestUrl += '?' + queryParamsArray.join('&');\r\n    }\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'GET';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 200) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n      // Deserialize Response\r\n      if (statusCode === 200) {\r\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedResponse !== null && parsedResponse !== undefined) {\r\n            let resultMapper = Mappers.GenericResource;\r\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n          }\r\n        } catch (error) {\r\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n          deserializationError.request = msRest.stripRequest(httpRequest);\r\n          deserializationError.response = msRest.stripResponse(response);\r\n          return Promise.reject(deserializationError);\r\n        }\r\n      }\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * Checks by ID whether a resource exists.\r\n   *\r\n   * @param {string} resourceId The fully qualified ID of the resource, including\r\n   * the resource name and resource type. Use the format,\r\n   * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}\r\n   *\r\n   * @param {string} apiVersion The API version to use for the operation.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async checkExistenceByIdWithHttpOperationResponse(resourceId: string, apiVersion: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Validate\r\n    try {\r\n      if (resourceId === null || resourceId === undefined || typeof resourceId.valueOf() !== 'string') {\r\n        throw new Error('resourceId cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (apiVersion === null || apiVersion === undefined || typeof apiVersion.valueOf() !== 'string') {\r\n        throw new Error('apiVersion cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let baseUrl = this.client.baseUri;\r\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + '{resourceId}';\r\n    requestUrl = requestUrl.replace('{resourceId}', resourceId);\r\n    let queryParamsArray: Array<any> = [];\r\n    queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));\r\n    if (queryParamsArray.length > 0) {\r\n      requestUrl += '?' + queryParamsArray.join('&');\r\n    }\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'HEAD';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 204 && statusCode !== 404) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n      operationRes.bodyAsJson = (statusCode === 204);\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n\r\n  /**\r\n   * Deletes a resource by ID.\r\n   *\r\n   * @param {string} resourceId The fully qualified ID of the resource, including\r\n   * the resource name and resource type. Use the format,\r\n   * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}\r\n   *\r\n   * @param {string} apiVersion The API version to use for the operation.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async deleteByIdWithHttpOperationResponse(resourceId: string, apiVersion: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Send request\r\n    let initialResult: msRest.HttpOperationResponse;\r\n    try {\r\n      initialResult = await this.beginDeleteByIdWithHttpOperationResponse(resourceId, apiVersion, options);\r\n    } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.getLongRunningOperationResult(initialResult, options);\r\n\r\n      // Deserialize Response\r\n  } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n\r\n  /**\r\n   * Create a resource by ID.\r\n   *\r\n   * @param {string} resourceId The fully qualified ID of the resource, including\r\n   * the resource name and resource type. Use the format,\r\n   * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}\r\n   *\r\n   * @param {string} apiVersion The API version to use for the operation.\r\n   *\r\n   * @param {GenericResource} parameters Create or update resource parameters.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async createOrUpdateByIdWithHttpOperationResponse(resourceId: string, apiVersion: string, parameters: Models.GenericResource, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Send request\r\n    let initialResult: msRest.HttpOperationResponse;\r\n    try {\r\n      initialResult = await this.beginCreateOrUpdateByIdWithHttpOperationResponse(resourceId, apiVersion, parameters, options);\r\n    } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.getLongRunningOperationResult(initialResult, options);\r\n      let httpRequest = operationRes.request;\r\n      let response = operationRes.response;\r\n\r\n      // Deserialize Response\r\n      let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n      try {\r\n        if (parsedResponse !== null && parsedResponse !== undefined) {\r\n          let resultMapper = Mappers.GenericResource;\r\n          operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n        }\r\n      } catch (error) {\r\n        let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n        deserializationError.request = msRest.stripRequest(httpRequest);\r\n        deserializationError.response = msRest.stripResponse(response);\r\n        return Promise.reject(deserializationError);\r\n      }\r\n  } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n\r\n  /**\r\n   * Updates a resource by ID.\r\n   *\r\n   * @param {string} resourceId The fully qualified ID of the resource, including\r\n   * the resource name and resource type. Use the format,\r\n   * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}\r\n   *\r\n   * @param {string} apiVersion The API version to use for the operation.\r\n   *\r\n   * @param {GenericResource} parameters Update resource parameters.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async updateByIdWithHttpOperationResponse(resourceId: string, apiVersion: string, parameters: Models.GenericResource, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Send request\r\n    let initialResult: msRest.HttpOperationResponse;\r\n    try {\r\n      initialResult = await this.beginUpdateByIdWithHttpOperationResponse(resourceId, apiVersion, parameters, options);\r\n    } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.getLongRunningOperationResult(initialResult, options);\r\n      let httpRequest = operationRes.request;\r\n      let response = operationRes.response;\r\n\r\n      // Deserialize Response\r\n      let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n      try {\r\n        if (parsedResponse !== null && parsedResponse !== undefined) {\r\n          let resultMapper = Mappers.GenericResource;\r\n          operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n        }\r\n      } catch (error) {\r\n        let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n        deserializationError.request = msRest.stripRequest(httpRequest);\r\n        deserializationError.response = msRest.stripResponse(response);\r\n        return Promise.reject(deserializationError);\r\n      }\r\n  } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * Gets a resource by ID.\r\n   *\r\n   * @param {string} resourceId The fully qualified ID of the resource, including\r\n   * the resource name and resource type. Use the format,\r\n   * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}\r\n   *\r\n   * @param {string} apiVersion The API version to use for the operation.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async getByIdWithHttpOperationResponse(resourceId: string, apiVersion: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Validate\r\n    try {\r\n      if (resourceId === null || resourceId === undefined || typeof resourceId.valueOf() !== 'string') {\r\n        throw new Error('resourceId cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (apiVersion === null || apiVersion === undefined || typeof apiVersion.valueOf() !== 'string') {\r\n        throw new Error('apiVersion cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let baseUrl = this.client.baseUri;\r\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + '{resourceId}';\r\n    requestUrl = requestUrl.replace('{resourceId}', resourceId);\r\n    let queryParamsArray: Array<any> = [];\r\n    queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));\r\n    if (queryParamsArray.length > 0) {\r\n      requestUrl += '?' + queryParamsArray.join('&');\r\n    }\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'GET';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 200) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n      // Deserialize Response\r\n      if (statusCode === 200) {\r\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedResponse !== null && parsedResponse !== undefined) {\r\n            let resultMapper = Mappers.GenericResource;\r\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n          }\r\n        } catch (error) {\r\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n          deserializationError.request = msRest.stripRequest(httpRequest);\r\n          deserializationError.response = msRest.stripResponse(response);\r\n          return Promise.reject(deserializationError);\r\n        }\r\n      }\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * @summary Moves resources from one resource group to another resource group.\r\n   *\r\n   * The resources to move must be in the same source resource group. The target\r\n   * resource group may be in a different subscription. When moving resources,\r\n   * both the source group and the target group are locked for the duration of\r\n   * the operation. Write and delete operations are blocked on the groups until\r\n   * the move completes.\r\n   *\r\n   * @param {string} sourceResourceGroupName The name of the resource group\r\n   * containing the resources to move.\r\n   *\r\n   * @param {ResourcesMoveInfo} parameters Parameters for moving resources.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async beginMoveResourcesWithHttpOperationResponse(sourceResourceGroupName: string, parameters: Models.ResourcesMoveInfo, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Validate\r\n    try {\r\n      if (sourceResourceGroupName === null || sourceResourceGroupName === undefined || typeof sourceResourceGroupName.valueOf() !== 'string') {\r\n        throw new Error('sourceResourceGroupName cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (sourceResourceGroupName !== null && sourceResourceGroupName !== undefined) {\r\n        if (sourceResourceGroupName.length > 90)\r\n        {\r\n          throw new Error('\"sourceResourceGroupName\" should satisfy the constraint - \"MaxLength\": 90');\r\n        }\r\n        if (sourceResourceGroupName.length < 1)\r\n        {\r\n          throw new Error('\"sourceResourceGroupName\" should satisfy the constraint - \"MinLength\": 1');\r\n        }\r\n        if (sourceResourceGroupName.match(/^[-\\w\\._\\(\\)]+$/) === null)\r\n        {\r\n          throw new Error('\"sourceResourceGroupName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._\\(\\)]+$/');\r\n        }\r\n      }\r\n      if (parameters === null || parameters === undefined) {\r\n        throw new Error('parameters cannot be null or undefined.');\r\n      }\r\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\r\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\r\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let baseUrl = this.client.baseUri;\r\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{sourceResourceGroupName}/moveResources';\r\n    requestUrl = requestUrl.replace('{sourceResourceGroupName}', encodeURIComponent(sourceResourceGroupName));\r\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\r\n    let queryParamsArray: Array<any> = [];\r\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\r\n    if (queryParamsArray.length > 0) {\r\n      requestUrl += '?' + queryParamsArray.join('&');\r\n    }\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'POST';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Serialize Request\r\n    let requestContent = null;\r\n    let requestModel = null;\r\n    try {\r\n      if (parameters !== null && parameters !== undefined) {\r\n        let requestModelMapper = Mappers.ResourcesMoveInfo;\r\n        requestModel = client.serializer.serialize(requestModelMapper, parameters, 'parameters');\r\n        requestContent = JSON.stringify(requestModel);\r\n      }\r\n    } catch (error) {\r\n      let serializationError = new Error(`Error \"${error.message}\" occurred in serializing the ` +\r\n          `payload - ${JSON.stringify(parameters, null, 2)}.`);\r\n      return Promise.reject(serializationError);\r\n    }\r\n    httpRequest.body = requestContent;\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 202 && statusCode !== 204) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * @summary Validates whether resources can be moved from one resource group to\r\n   * another resource group.\r\n   *\r\n   * This operation checks whether the specified resources can be moved to the\r\n   * target. The resources to move must be in the same source resource group. The\r\n   * target resource group may be in a different subscription. If validation\r\n   * succeeds, it returns HTTP response code 204 (no content). If validation\r\n   * fails, it returns HTTP response code 409 (Conflict) with an error message.\r\n   * Retrieve the URL in the Location header value to check the result of the\r\n   * long-running operation.\r\n   *\r\n   * @param {string} sourceResourceGroupName The name of the resource group\r\n   * containing the resources to validate for move.\r\n   *\r\n   * @param {ResourcesMoveInfo} parameters Parameters for moving resources.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async beginValidateMoveResourcesWithHttpOperationResponse(sourceResourceGroupName: string, parameters: Models.ResourcesMoveInfo, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Validate\r\n    try {\r\n      if (sourceResourceGroupName === null || sourceResourceGroupName === undefined || typeof sourceResourceGroupName.valueOf() !== 'string') {\r\n        throw new Error('sourceResourceGroupName cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (sourceResourceGroupName !== null && sourceResourceGroupName !== undefined) {\r\n        if (sourceResourceGroupName.length > 90)\r\n        {\r\n          throw new Error('\"sourceResourceGroupName\" should satisfy the constraint - \"MaxLength\": 90');\r\n        }\r\n        if (sourceResourceGroupName.length < 1)\r\n        {\r\n          throw new Error('\"sourceResourceGroupName\" should satisfy the constraint - \"MinLength\": 1');\r\n        }\r\n        if (sourceResourceGroupName.match(/^[-\\w\\._\\(\\)]+$/) === null)\r\n        {\r\n          throw new Error('\"sourceResourceGroupName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._\\(\\)]+$/');\r\n        }\r\n      }\r\n      if (parameters === null || parameters === undefined) {\r\n        throw new Error('parameters cannot be null or undefined.');\r\n      }\r\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\r\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\r\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let baseUrl = this.client.baseUri;\r\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{sourceResourceGroupName}/validateMoveResources';\r\n    requestUrl = requestUrl.replace('{sourceResourceGroupName}', encodeURIComponent(sourceResourceGroupName));\r\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\r\n    let queryParamsArray: Array<any> = [];\r\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\r\n    if (queryParamsArray.length > 0) {\r\n      requestUrl += '?' + queryParamsArray.join('&');\r\n    }\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'POST';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Serialize Request\r\n    let requestContent = null;\r\n    let requestModel = null;\r\n    try {\r\n      if (parameters !== null && parameters !== undefined) {\r\n        let requestModelMapper = Mappers.ResourcesMoveInfo;\r\n        requestModel = client.serializer.serialize(requestModelMapper, parameters, 'parameters');\r\n        requestContent = JSON.stringify(requestModel);\r\n      }\r\n    } catch (error) {\r\n      let serializationError = new Error(`Error \"${error.message}\" occurred in serializing the ` +\r\n          `payload - ${JSON.stringify(parameters, null, 2)}.`);\r\n      return Promise.reject(serializationError);\r\n    }\r\n    httpRequest.body = requestContent;\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 202 && statusCode !== 204 && statusCode !== 409) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * Deletes a resource.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group that\r\n   * contains the resource to delete. The name is case insensitive.\r\n   *\r\n   * @param {string} resourceProviderNamespace The namespace of the resource\r\n   * provider.\r\n   *\r\n   * @param {string} parentResourcePath The parent resource identity.\r\n   *\r\n   * @param {string} resourceType The resource type.\r\n   *\r\n   * @param {string} resourceName The name of the resource to delete.\r\n   *\r\n   * @param {string} apiVersion The API version to use for the operation.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Validate\r\n    try {\r\n      if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {\r\n        throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (resourceGroupName !== null && resourceGroupName !== undefined) {\r\n        if (resourceGroupName.length > 90)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"MaxLength\": 90');\r\n        }\r\n        if (resourceGroupName.length < 1)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"MinLength\": 1');\r\n        }\r\n        if (resourceGroupName.match(/^[-\\w\\._\\(\\)]+$/) === null)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._\\(\\)]+$/');\r\n        }\r\n      }\r\n      if (resourceProviderNamespace === null || resourceProviderNamespace === undefined || typeof resourceProviderNamespace.valueOf() !== 'string') {\r\n        throw new Error('resourceProviderNamespace cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (parentResourcePath === null || parentResourcePath === undefined || typeof parentResourcePath.valueOf() !== 'string') {\r\n        throw new Error('parentResourcePath cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (resourceType === null || resourceType === undefined || typeof resourceType.valueOf() !== 'string') {\r\n        throw new Error('resourceType cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (resourceName === null || resourceName === undefined || typeof resourceName.valueOf() !== 'string') {\r\n        throw new Error('resourceName cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (apiVersion === null || apiVersion === undefined || typeof apiVersion.valueOf() !== 'string') {\r\n        throw new Error('apiVersion cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\r\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let baseUrl = this.client.baseUri;\r\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}';\r\n    requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));\r\n    requestUrl = requestUrl.replace('{resourceProviderNamespace}', encodeURIComponent(resourceProviderNamespace));\r\n    requestUrl = requestUrl.replace('{parentResourcePath}', parentResourcePath);\r\n    requestUrl = requestUrl.replace('{resourceType}', resourceType);\r\n    requestUrl = requestUrl.replace('{resourceName}', encodeURIComponent(resourceName));\r\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\r\n    let queryParamsArray: Array<any> = [];\r\n    queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));\r\n    if (queryParamsArray.length > 0) {\r\n      requestUrl += '?' + queryParamsArray.join('&');\r\n    }\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'DELETE';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 200 && statusCode !== 204 && statusCode !== 202) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * Creates a resource.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group for the\r\n   * resource. The name is case insensitive.\r\n   *\r\n   * @param {string} resourceProviderNamespace The namespace of the resource\r\n   * provider.\r\n   *\r\n   * @param {string} parentResourcePath The parent resource identity.\r\n   *\r\n   * @param {string} resourceType The resource type of the resource to create.\r\n   *\r\n   * @param {string} resourceName The name of the resource to create.\r\n   *\r\n   * @param {string} apiVersion The API version to use for the operation.\r\n   *\r\n   * @param {GenericResource} parameters Parameters for creating or updating the\r\n   * resource.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, parameters: Models.GenericResource, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Validate\r\n    try {\r\n      if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {\r\n        throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (resourceGroupName !== null && resourceGroupName !== undefined) {\r\n        if (resourceGroupName.length > 90)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"MaxLength\": 90');\r\n        }\r\n        if (resourceGroupName.length < 1)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"MinLength\": 1');\r\n        }\r\n        if (resourceGroupName.match(/^[-\\w\\._\\(\\)]+$/) === null)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._\\(\\)]+$/');\r\n        }\r\n      }\r\n      if (resourceProviderNamespace === null || resourceProviderNamespace === undefined || typeof resourceProviderNamespace.valueOf() !== 'string') {\r\n        throw new Error('resourceProviderNamespace cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (parentResourcePath === null || parentResourcePath === undefined || typeof parentResourcePath.valueOf() !== 'string') {\r\n        throw new Error('parentResourcePath cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (resourceType === null || resourceType === undefined || typeof resourceType.valueOf() !== 'string') {\r\n        throw new Error('resourceType cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (resourceName === null || resourceName === undefined || typeof resourceName.valueOf() !== 'string') {\r\n        throw new Error('resourceName cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (apiVersion === null || apiVersion === undefined || typeof apiVersion.valueOf() !== 'string') {\r\n        throw new Error('apiVersion cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (parameters === null || parameters === undefined) {\r\n        throw new Error('parameters cannot be null or undefined.');\r\n      }\r\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\r\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let baseUrl = this.client.baseUri;\r\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}';\r\n    requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));\r\n    requestUrl = requestUrl.replace('{resourceProviderNamespace}', encodeURIComponent(resourceProviderNamespace));\r\n    requestUrl = requestUrl.replace('{parentResourcePath}', parentResourcePath);\r\n    requestUrl = requestUrl.replace('{resourceType}', resourceType);\r\n    requestUrl = requestUrl.replace('{resourceName}', encodeURIComponent(resourceName));\r\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\r\n    let queryParamsArray: Array<any> = [];\r\n    queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));\r\n    if (queryParamsArray.length > 0) {\r\n      requestUrl += '?' + queryParamsArray.join('&');\r\n    }\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'PUT';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Serialize Request\r\n    let requestContent = null;\r\n    let requestModel = null;\r\n    try {\r\n      if (parameters !== null && parameters !== undefined) {\r\n        let requestModelMapper = Mappers.GenericResource;\r\n        requestModel = client.serializer.serialize(requestModelMapper, parameters, 'parameters');\r\n        requestContent = JSON.stringify(requestModel);\r\n      }\r\n    } catch (error) {\r\n      let serializationError = new Error(`Error \"${error.message}\" occurred in serializing the ` +\r\n          `payload - ${JSON.stringify(parameters, null, 2)}.`);\r\n      return Promise.reject(serializationError);\r\n    }\r\n    httpRequest.body = requestContent;\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 201 && statusCode !== 200 && statusCode !== 202) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n      // Deserialize Response\r\n      if (statusCode === 201) {\r\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedResponse !== null && parsedResponse !== undefined) {\r\n            let resultMapper = Mappers.GenericResource;\r\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n          }\r\n        } catch (error) {\r\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n          deserializationError.request = msRest.stripRequest(httpRequest);\r\n          deserializationError.response = msRest.stripResponse(response);\r\n          return Promise.reject(deserializationError);\r\n        }\r\n      }\r\n      // Deserialize Response\r\n      if (statusCode === 200) {\r\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedResponse !== null && parsedResponse !== undefined) {\r\n            let resultMapper = Mappers.GenericResource;\r\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n          }\r\n        } catch (error) {\r\n          let deserializationError1 = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n          deserializationError1.request = msRest.stripRequest(httpRequest);\r\n          deserializationError1.response = msRest.stripResponse(response);\r\n          return Promise.reject(deserializationError1);\r\n        }\r\n      }\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * Updates a resource.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group for the\r\n   * resource. The name is case insensitive.\r\n   *\r\n   * @param {string} resourceProviderNamespace The namespace of the resource\r\n   * provider.\r\n   *\r\n   * @param {string} parentResourcePath The parent resource identity.\r\n   *\r\n   * @param {string} resourceType The resource type of the resource to update.\r\n   *\r\n   * @param {string} resourceName The name of the resource to update.\r\n   *\r\n   * @param {string} apiVersion The API version to use for the operation.\r\n   *\r\n   * @param {GenericResource} parameters Parameters for updating the resource.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async beginUpdateWithHttpOperationResponse(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, parameters: Models.GenericResource, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Validate\r\n    try {\r\n      if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {\r\n        throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (resourceGroupName !== null && resourceGroupName !== undefined) {\r\n        if (resourceGroupName.length > 90)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"MaxLength\": 90');\r\n        }\r\n        if (resourceGroupName.length < 1)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"MinLength\": 1');\r\n        }\r\n        if (resourceGroupName.match(/^[-\\w\\._\\(\\)]+$/) === null)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._\\(\\)]+$/');\r\n        }\r\n      }\r\n      if (resourceProviderNamespace === null || resourceProviderNamespace === undefined || typeof resourceProviderNamespace.valueOf() !== 'string') {\r\n        throw new Error('resourceProviderNamespace cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (parentResourcePath === null || parentResourcePath === undefined || typeof parentResourcePath.valueOf() !== 'string') {\r\n        throw new Error('parentResourcePath cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (resourceType === null || resourceType === undefined || typeof resourceType.valueOf() !== 'string') {\r\n        throw new Error('resourceType cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (resourceName === null || resourceName === undefined || typeof resourceName.valueOf() !== 'string') {\r\n        throw new Error('resourceName cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (apiVersion === null || apiVersion === undefined || typeof apiVersion.valueOf() !== 'string') {\r\n        throw new Error('apiVersion cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (parameters === null || parameters === undefined) {\r\n        throw new Error('parameters cannot be null or undefined.');\r\n      }\r\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\r\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let baseUrl = this.client.baseUri;\r\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}';\r\n    requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));\r\n    requestUrl = requestUrl.replace('{resourceProviderNamespace}', encodeURIComponent(resourceProviderNamespace));\r\n    requestUrl = requestUrl.replace('{parentResourcePath}', parentResourcePath);\r\n    requestUrl = requestUrl.replace('{resourceType}', resourceType);\r\n    requestUrl = requestUrl.replace('{resourceName}', encodeURIComponent(resourceName));\r\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\r\n    let queryParamsArray: Array<any> = [];\r\n    queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));\r\n    if (queryParamsArray.length > 0) {\r\n      requestUrl += '?' + queryParamsArray.join('&');\r\n    }\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'PATCH';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Serialize Request\r\n    let requestContent = null;\r\n    let requestModel = null;\r\n    try {\r\n      if (parameters !== null && parameters !== undefined) {\r\n        let requestModelMapper = Mappers.GenericResource;\r\n        requestModel = client.serializer.serialize(requestModelMapper, parameters, 'parameters');\r\n        requestContent = JSON.stringify(requestModel);\r\n      }\r\n    } catch (error) {\r\n      let serializationError = new Error(`Error \"${error.message}\" occurred in serializing the ` +\r\n          `payload - ${JSON.stringify(parameters, null, 2)}.`);\r\n      return Promise.reject(serializationError);\r\n    }\r\n    httpRequest.body = requestContent;\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 200 && statusCode !== 202) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n      // Deserialize Response\r\n      if (statusCode === 200) {\r\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedResponse !== null && parsedResponse !== undefined) {\r\n            let resultMapper = Mappers.GenericResource;\r\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n          }\r\n        } catch (error) {\r\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n          deserializationError.request = msRest.stripRequest(httpRequest);\r\n          deserializationError.response = msRest.stripResponse(response);\r\n          return Promise.reject(deserializationError);\r\n        }\r\n      }\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * Deletes a resource by ID.\r\n   *\r\n   * @param {string} resourceId The fully qualified ID of the resource, including\r\n   * the resource name and resource type. Use the format,\r\n   * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}\r\n   *\r\n   * @param {string} apiVersion The API version to use for the operation.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async beginDeleteByIdWithHttpOperationResponse(resourceId: string, apiVersion: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Validate\r\n    try {\r\n      if (resourceId === null || resourceId === undefined || typeof resourceId.valueOf() !== 'string') {\r\n        throw new Error('resourceId cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (apiVersion === null || apiVersion === undefined || typeof apiVersion.valueOf() !== 'string') {\r\n        throw new Error('apiVersion cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let baseUrl = this.client.baseUri;\r\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + '{resourceId}';\r\n    requestUrl = requestUrl.replace('{resourceId}', resourceId);\r\n    let queryParamsArray: Array<any> = [];\r\n    queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));\r\n    if (queryParamsArray.length > 0) {\r\n      requestUrl += '?' + queryParamsArray.join('&');\r\n    }\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'DELETE';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 200 && statusCode !== 204 && statusCode !== 202) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * Create a resource by ID.\r\n   *\r\n   * @param {string} resourceId The fully qualified ID of the resource, including\r\n   * the resource name and resource type. Use the format,\r\n   * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}\r\n   *\r\n   * @param {string} apiVersion The API version to use for the operation.\r\n   *\r\n   * @param {GenericResource} parameters Create or update resource parameters.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async beginCreateOrUpdateByIdWithHttpOperationResponse(resourceId: string, apiVersion: string, parameters: Models.GenericResource, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Validate\r\n    try {\r\n      if (resourceId === null || resourceId === undefined || typeof resourceId.valueOf() !== 'string') {\r\n        throw new Error('resourceId cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (apiVersion === null || apiVersion === undefined || typeof apiVersion.valueOf() !== 'string') {\r\n        throw new Error('apiVersion cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (parameters === null || parameters === undefined) {\r\n        throw new Error('parameters cannot be null or undefined.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let baseUrl = this.client.baseUri;\r\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + '{resourceId}';\r\n    requestUrl = requestUrl.replace('{resourceId}', resourceId);\r\n    let queryParamsArray: Array<any> = [];\r\n    queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));\r\n    if (queryParamsArray.length > 0) {\r\n      requestUrl += '?' + queryParamsArray.join('&');\r\n    }\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'PUT';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Serialize Request\r\n    let requestContent = null;\r\n    let requestModel = null;\r\n    try {\r\n      if (parameters !== null && parameters !== undefined) {\r\n        let requestModelMapper = Mappers.GenericResource;\r\n        requestModel = client.serializer.serialize(requestModelMapper, parameters, 'parameters');\r\n        requestContent = JSON.stringify(requestModel);\r\n      }\r\n    } catch (error) {\r\n      let serializationError = new Error(`Error \"${error.message}\" occurred in serializing the ` +\r\n          `payload - ${JSON.stringify(parameters, null, 2)}.`);\r\n      return Promise.reject(serializationError);\r\n    }\r\n    httpRequest.body = requestContent;\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 201 && statusCode !== 200 && statusCode !== 202) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n      // Deserialize Response\r\n      if (statusCode === 201) {\r\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedResponse !== null && parsedResponse !== undefined) {\r\n            let resultMapper = Mappers.GenericResource;\r\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n          }\r\n        } catch (error) {\r\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n          deserializationError.request = msRest.stripRequest(httpRequest);\r\n          deserializationError.response = msRest.stripResponse(response);\r\n          return Promise.reject(deserializationError);\r\n        }\r\n      }\r\n      // Deserialize Response\r\n      if (statusCode === 200) {\r\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedResponse !== null && parsedResponse !== undefined) {\r\n            let resultMapper = Mappers.GenericResource;\r\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n          }\r\n        } catch (error) {\r\n          let deserializationError1 = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n          deserializationError1.request = msRest.stripRequest(httpRequest);\r\n          deserializationError1.response = msRest.stripResponse(response);\r\n          return Promise.reject(deserializationError1);\r\n        }\r\n      }\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * Updates a resource by ID.\r\n   *\r\n   * @param {string} resourceId The fully qualified ID of the resource, including\r\n   * the resource name and resource type. Use the format,\r\n   * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}\r\n   *\r\n   * @param {string} apiVersion The API version to use for the operation.\r\n   *\r\n   * @param {GenericResource} parameters Update resource parameters.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async beginUpdateByIdWithHttpOperationResponse(resourceId: string, apiVersion: string, parameters: Models.GenericResource, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Validate\r\n    try {\r\n      if (resourceId === null || resourceId === undefined || typeof resourceId.valueOf() !== 'string') {\r\n        throw new Error('resourceId cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (apiVersion === null || apiVersion === undefined || typeof apiVersion.valueOf() !== 'string') {\r\n        throw new Error('apiVersion cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (parameters === null || parameters === undefined) {\r\n        throw new Error('parameters cannot be null or undefined.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let baseUrl = this.client.baseUri;\r\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + '{resourceId}';\r\n    requestUrl = requestUrl.replace('{resourceId}', resourceId);\r\n    let queryParamsArray: Array<any> = [];\r\n    queryParamsArray.push('api-version=' + encodeURIComponent(apiVersion));\r\n    if (queryParamsArray.length > 0) {\r\n      requestUrl += '?' + queryParamsArray.join('&');\r\n    }\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'PATCH';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Serialize Request\r\n    let requestContent = null;\r\n    let requestModel = null;\r\n    try {\r\n      if (parameters !== null && parameters !== undefined) {\r\n        let requestModelMapper = Mappers.GenericResource;\r\n        requestModel = client.serializer.serialize(requestModelMapper, parameters, 'parameters');\r\n        requestContent = JSON.stringify(requestModel);\r\n      }\r\n    } catch (error) {\r\n      let serializationError = new Error(`Error \"${error.message}\" occurred in serializing the ` +\r\n          `payload - ${JSON.stringify(parameters, null, 2)}.`);\r\n      return Promise.reject(serializationError);\r\n    }\r\n    httpRequest.body = requestContent;\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 200 && statusCode !== 202) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n      // Deserialize Response\r\n      if (statusCode === 200) {\r\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedResponse !== null && parsedResponse !== undefined) {\r\n            let resultMapper = Mappers.GenericResource;\r\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n          }\r\n        } catch (error) {\r\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n          deserializationError.request = msRest.stripRequest(httpRequest);\r\n          deserializationError.response = msRest.stripResponse(response);\r\n          return Promise.reject(deserializationError);\r\n        }\r\n      }\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * Get all the resources for a resource group.\r\n   *\r\n   * @param {string} nextPageLink The NextLink from the previous successful call\r\n   * to List operation.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Validate\r\n    try {\r\n      if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {\r\n        throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let requestUrl = '{nextLink}';\r\n    requestUrl = requestUrl.replace('{nextLink}', nextPageLink);\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'GET';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 200) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n      // Deserialize Response\r\n      if (statusCode === 200) {\r\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedResponse !== null && parsedResponse !== undefined) {\r\n            let resultMapper = Mappers.ResourceListResult;\r\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n          }\r\n        } catch (error) {\r\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n          deserializationError.request = msRest.stripRequest(httpRequest);\r\n          deserializationError.response = msRest.stripResponse(response);\r\n          return Promise.reject(deserializationError);\r\n        }\r\n      }\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * Get all the resources in a subscription.\r\n   *\r\n   * @param {string} nextPageLink The NextLink from the previous successful call\r\n   * to List operation.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async listNextWithHttpOperationResponse(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Validate\r\n    try {\r\n      if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {\r\n        throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let requestUrl = '{nextLink}';\r\n    requestUrl = requestUrl.replace('{nextLink}', nextPageLink);\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'GET';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 200) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n      // Deserialize Response\r\n      if (statusCode === 200) {\r\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedResponse !== null && parsedResponse !== undefined) {\r\n            let resultMapper = Mappers.ResourceListResult;\r\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n          }\r\n        } catch (error) {\r\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n          deserializationError.request = msRest.stripRequest(httpRequest);\r\n          deserializationError.response = msRest.stripResponse(response);\r\n          return Promise.reject(deserializationError);\r\n        }\r\n      }\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * Get all the resources for a resource group.\r\n   *\r\n   * @param {string} resourceGroupName The resource group with the resources to\r\n   * get.\r\n   *\r\n   * @param {ResourcesListByResourceGroupOptionalParams} [options] Optional\r\n   * Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {Models.ResourceListResult} [result]   - The deserialized result object if an error did not occur.\r\n   *                      See {@link Models.ResourceListResult} for more\r\n   *                      information.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  listByResourceGroup(resourceGroupName: string): Promise<Models.ResourceListResult>;\r\n  listByResourceGroup(resourceGroupName: string, options: Models.ResourcesListByResourceGroupOptionalParams): Promise<Models.ResourceListResult>;\r\n  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.ResourceListResult>): void;\r\n  listByResourceGroup(resourceGroupName: string, options: Models.ResourcesListByResourceGroupOptionalParams, callback: msRest.ServiceCallback<Models.ResourceListResult>): void;\r\n  listByResourceGroup(resourceGroupName: string, options?: Models.ResourcesListByResourceGroupOptionalParams, callback?: msRest.ServiceCallback<Models.ResourceListResult>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<Models.ResourceListResult>;\r\n    if (!callback) {\r\n      return this.listByResourceGroupWithHttpOperationResponse(resourceGroupName, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as Models.ResourceListResult);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.listByResourceGroupWithHttpOperationResponse(resourceGroupName, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as Models.ResourceListResult;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @summary Moves resources from one resource group to another resource group.\r\n   *\r\n   * The resources to move must be in the same source resource group. The target\r\n   * resource group may be in a different subscription. When moving resources,\r\n   * both the source group and the target group are locked for the duration of\r\n   * the operation. Write and delete operations are blocked on the groups until\r\n   * the move completes.\r\n   *\r\n   * @param {string} sourceResourceGroupName The name of the resource group\r\n   * containing the resources to move.\r\n   *\r\n   * @param {ResourcesMoveInfo} parameters Parameters for moving resources.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  moveResources(sourceResourceGroupName: string, parameters: Models.ResourcesMoveInfo): Promise<void>;\r\n  moveResources(sourceResourceGroupName: string, parameters: Models.ResourcesMoveInfo, options: msRest.RequestOptionsBase): Promise<void>;\r\n  moveResources(sourceResourceGroupName: string, parameters: Models.ResourcesMoveInfo, callback: msRest.ServiceCallback<void>): void;\r\n  moveResources(sourceResourceGroupName: string, parameters: Models.ResourcesMoveInfo, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\r\n  moveResources(sourceResourceGroupName: string, parameters: Models.ResourcesMoveInfo, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<void>;\r\n    if (!callback) {\r\n      return this.moveResourcesWithHttpOperationResponse(sourceResourceGroupName, parameters, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as void);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.moveResourcesWithHttpOperationResponse(sourceResourceGroupName, parameters, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as void;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @summary Validates whether resources can be moved from one resource group to\r\n   * another resource group.\r\n   *\r\n   * This operation checks whether the specified resources can be moved to the\r\n   * target. The resources to move must be in the same source resource group. The\r\n   * target resource group may be in a different subscription. If validation\r\n   * succeeds, it returns HTTP response code 204 (no content). If validation\r\n   * fails, it returns HTTP response code 409 (Conflict) with an error message.\r\n   * Retrieve the URL in the Location header value to check the result of the\r\n   * long-running operation.\r\n   *\r\n   * @param {string} sourceResourceGroupName The name of the resource group\r\n   * containing the resources to validate for move.\r\n   *\r\n   * @param {ResourcesMoveInfo} parameters Parameters for moving resources.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  validateMoveResources(sourceResourceGroupName: string, parameters: Models.ResourcesMoveInfo): Promise<void>;\r\n  validateMoveResources(sourceResourceGroupName: string, parameters: Models.ResourcesMoveInfo, options: msRest.RequestOptionsBase): Promise<void>;\r\n  validateMoveResources(sourceResourceGroupName: string, parameters: Models.ResourcesMoveInfo, callback: msRest.ServiceCallback<void>): void;\r\n  validateMoveResources(sourceResourceGroupName: string, parameters: Models.ResourcesMoveInfo, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\r\n  validateMoveResources(sourceResourceGroupName: string, parameters: Models.ResourcesMoveInfo, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<void>;\r\n    if (!callback) {\r\n      return this.validateMoveResourcesWithHttpOperationResponse(sourceResourceGroupName, parameters, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as void);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.validateMoveResourcesWithHttpOperationResponse(sourceResourceGroupName, parameters, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as void;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all the resources in a subscription.\r\n   *\r\n   * @param {ResourcesListOptionalParams} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {Models.ResourceListResult} [result]   - The deserialized result object if an error did not occur.\r\n   *                      See {@link Models.ResourceListResult} for more\r\n   *                      information.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  list(): Promise<Models.ResourceListResult>;\r\n  list(options: Models.ResourcesListOptionalParams): Promise<Models.ResourceListResult>;\r\n  list(callback: msRest.ServiceCallback<Models.ResourceListResult>): void;\r\n  list(options: Models.ResourcesListOptionalParams, callback: msRest.ServiceCallback<Models.ResourceListResult>): void;\r\n  list(options?: Models.ResourcesListOptionalParams, callback?: msRest.ServiceCallback<Models.ResourceListResult>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<Models.ResourceListResult>;\r\n    if (!callback) {\r\n      return this.listWithHttpOperationResponse(options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as Models.ResourceListResult);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.listWithHttpOperationResponse(options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as Models.ResourceListResult;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks whether a resource exists.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group containing\r\n   * the resource to check. The name is case insensitive.\r\n   *\r\n   * @param {string} resourceProviderNamespace The resource provider of the\r\n   * resource to check.\r\n   *\r\n   * @param {string} parentResourcePath The parent resource identity.\r\n   *\r\n   * @param {string} resourceType The resource type.\r\n   *\r\n   * @param {string} resourceName The name of the resource to check whether it\r\n   * exists.\r\n   *\r\n   * @param {string} apiVersion The API version to use for the operation.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {boolean} [result]   - The deserialized result object if an error did not occur.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  checkExistence(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string): Promise<boolean>;\r\n  checkExistence(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, options: msRest.RequestOptionsBase): Promise<boolean>;\r\n  checkExistence(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, callback: msRest.ServiceCallback<boolean>): void;\r\n  checkExistence(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<boolean>): void;\r\n  checkExistence(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<boolean>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<boolean>;\r\n    if (!callback) {\r\n      return this.checkExistenceWithHttpOperationResponse(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as boolean);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.checkExistenceWithHttpOperationResponse(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as boolean;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deletes a resource.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group that\r\n   * contains the resource to delete. The name is case insensitive.\r\n   *\r\n   * @param {string} resourceProviderNamespace The namespace of the resource\r\n   * provider.\r\n   *\r\n   * @param {string} parentResourcePath The parent resource identity.\r\n   *\r\n   * @param {string} resourceType The resource type.\r\n   *\r\n   * @param {string} resourceName The name of the resource to delete.\r\n   *\r\n   * @param {string} apiVersion The API version to use for the operation.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  deleteMethod(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string): Promise<void>;\r\n  deleteMethod(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, options: msRest.RequestOptionsBase): Promise<void>;\r\n  deleteMethod(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, callback: msRest.ServiceCallback<void>): void;\r\n  deleteMethod(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\r\n  deleteMethod(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<void>;\r\n    if (!callback) {\r\n      return this.deleteMethodWithHttpOperationResponse(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as void);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.deleteMethodWithHttpOperationResponse(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as void;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a resource.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group for the\r\n   * resource. The name is case insensitive.\r\n   *\r\n   * @param {string} resourceProviderNamespace The namespace of the resource\r\n   * provider.\r\n   *\r\n   * @param {string} parentResourcePath The parent resource identity.\r\n   *\r\n   * @param {string} resourceType The resource type of the resource to create.\r\n   *\r\n   * @param {string} resourceName The name of the resource to create.\r\n   *\r\n   * @param {string} apiVersion The API version to use for the operation.\r\n   *\r\n   * @param {GenericResource} parameters Parameters for creating or updating the\r\n   * resource.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {Models.GenericResource} [result]   - The deserialized result object if an error did not occur.\r\n   *                      See {@link Models.GenericResource} for more\r\n   *                      information.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  createOrUpdate(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, parameters: Models.GenericResource): Promise<Models.GenericResource>;\r\n  createOrUpdate(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, parameters: Models.GenericResource, options: msRest.RequestOptionsBase): Promise<Models.GenericResource>;\r\n  createOrUpdate(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, parameters: Models.GenericResource, callback: msRest.ServiceCallback<Models.GenericResource>): void;\r\n  createOrUpdate(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, parameters: Models.GenericResource, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GenericResource>): void;\r\n  createOrUpdate(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, parameters: Models.GenericResource, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.GenericResource>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<Models.GenericResource>;\r\n    if (!callback) {\r\n      return this.createOrUpdateWithHttpOperationResponse(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, parameters, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as Models.GenericResource);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.createOrUpdateWithHttpOperationResponse(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, parameters, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as Models.GenericResource;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates a resource.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group for the\r\n   * resource. The name is case insensitive.\r\n   *\r\n   * @param {string} resourceProviderNamespace The namespace of the resource\r\n   * provider.\r\n   *\r\n   * @param {string} parentResourcePath The parent resource identity.\r\n   *\r\n   * @param {string} resourceType The resource type of the resource to update.\r\n   *\r\n   * @param {string} resourceName The name of the resource to update.\r\n   *\r\n   * @param {string} apiVersion The API version to use for the operation.\r\n   *\r\n   * @param {GenericResource} parameters Parameters for updating the resource.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {Models.GenericResource} [result]   - The deserialized result object if an error did not occur.\r\n   *                      See {@link Models.GenericResource} for more\r\n   *                      information.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  update(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, parameters: Models.GenericResource): Promise<Models.GenericResource>;\r\n  update(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, parameters: Models.GenericResource, options: msRest.RequestOptionsBase): Promise<Models.GenericResource>;\r\n  update(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, parameters: Models.GenericResource, callback: msRest.ServiceCallback<Models.GenericResource>): void;\r\n  update(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, parameters: Models.GenericResource, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GenericResource>): void;\r\n  update(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, parameters: Models.GenericResource, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.GenericResource>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<Models.GenericResource>;\r\n    if (!callback) {\r\n      return this.updateWithHttpOperationResponse(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, parameters, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as Models.GenericResource);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.updateWithHttpOperationResponse(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, parameters, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as Models.GenericResource;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets a resource.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group containing\r\n   * the resource to get. The name is case insensitive.\r\n   *\r\n   * @param {string} resourceProviderNamespace The namespace of the resource\r\n   * provider.\r\n   *\r\n   * @param {string} parentResourcePath The parent resource identity.\r\n   *\r\n   * @param {string} resourceType The resource type of the resource.\r\n   *\r\n   * @param {string} resourceName The name of the resource to get.\r\n   *\r\n   * @param {string} apiVersion The API version to use for the operation.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {Models.GenericResource} [result]   - The deserialized result object if an error did not occur.\r\n   *                      See {@link Models.GenericResource} for more\r\n   *                      information.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  get(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string): Promise<Models.GenericResource>;\r\n  get(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, options: msRest.RequestOptionsBase): Promise<Models.GenericResource>;\r\n  get(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, callback: msRest.ServiceCallback<Models.GenericResource>): void;\r\n  get(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GenericResource>): void;\r\n  get(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.GenericResource>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<Models.GenericResource>;\r\n    if (!callback) {\r\n      return this.getWithHttpOperationResponse(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as Models.GenericResource);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.getWithHttpOperationResponse(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as Models.GenericResource;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks by ID whether a resource exists.\r\n   *\r\n   * @param {string} resourceId The fully qualified ID of the resource, including\r\n   * the resource name and resource type. Use the format,\r\n   * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}\r\n   *\r\n   * @param {string} apiVersion The API version to use for the operation.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {boolean} [result]   - The deserialized result object if an error did not occur.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  checkExistenceById(resourceId: string, apiVersion: string): Promise<boolean>;\r\n  checkExistenceById(resourceId: string, apiVersion: string, options: msRest.RequestOptionsBase): Promise<boolean>;\r\n  checkExistenceById(resourceId: string, apiVersion: string, callback: msRest.ServiceCallback<boolean>): void;\r\n  checkExistenceById(resourceId: string, apiVersion: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<boolean>): void;\r\n  checkExistenceById(resourceId: string, apiVersion: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<boolean>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<boolean>;\r\n    if (!callback) {\r\n      return this.checkExistenceByIdWithHttpOperationResponse(resourceId, apiVersion, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as boolean);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.checkExistenceByIdWithHttpOperationResponse(resourceId, apiVersion, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as boolean;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deletes a resource by ID.\r\n   *\r\n   * @param {string} resourceId The fully qualified ID of the resource, including\r\n   * the resource name and resource type. Use the format,\r\n   * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}\r\n   *\r\n   * @param {string} apiVersion The API version to use for the operation.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  deleteById(resourceId: string, apiVersion: string): Promise<void>;\r\n  deleteById(resourceId: string, apiVersion: string, options: msRest.RequestOptionsBase): Promise<void>;\r\n  deleteById(resourceId: string, apiVersion: string, callback: msRest.ServiceCallback<void>): void;\r\n  deleteById(resourceId: string, apiVersion: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\r\n  deleteById(resourceId: string, apiVersion: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<void>;\r\n    if (!callback) {\r\n      return this.deleteByIdWithHttpOperationResponse(resourceId, apiVersion, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as void);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.deleteByIdWithHttpOperationResponse(resourceId, apiVersion, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as void;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a resource by ID.\r\n   *\r\n   * @param {string} resourceId The fully qualified ID of the resource, including\r\n   * the resource name and resource type. Use the format,\r\n   * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}\r\n   *\r\n   * @param {string} apiVersion The API version to use for the operation.\r\n   *\r\n   * @param {GenericResource} parameters Create or update resource parameters.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {Models.GenericResource} [result]   - The deserialized result object if an error did not occur.\r\n   *                      See {@link Models.GenericResource} for more\r\n   *                      information.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  createOrUpdateById(resourceId: string, apiVersion: string, parameters: Models.GenericResource): Promise<Models.GenericResource>;\r\n  createOrUpdateById(resourceId: string, apiVersion: string, parameters: Models.GenericResource, options: msRest.RequestOptionsBase): Promise<Models.GenericResource>;\r\n  createOrUpdateById(resourceId: string, apiVersion: string, parameters: Models.GenericResource, callback: msRest.ServiceCallback<Models.GenericResource>): void;\r\n  createOrUpdateById(resourceId: string, apiVersion: string, parameters: Models.GenericResource, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GenericResource>): void;\r\n  createOrUpdateById(resourceId: string, apiVersion: string, parameters: Models.GenericResource, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.GenericResource>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<Models.GenericResource>;\r\n    if (!callback) {\r\n      return this.createOrUpdateByIdWithHttpOperationResponse(resourceId, apiVersion, parameters, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as Models.GenericResource);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.createOrUpdateByIdWithHttpOperationResponse(resourceId, apiVersion, parameters, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as Models.GenericResource;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates a resource by ID.\r\n   *\r\n   * @param {string} resourceId The fully qualified ID of the resource, including\r\n   * the resource name and resource type. Use the format,\r\n   * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}\r\n   *\r\n   * @param {string} apiVersion The API version to use for the operation.\r\n   *\r\n   * @param {GenericResource} parameters Update resource parameters.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {Models.GenericResource} [result]   - The deserialized result object if an error did not occur.\r\n   *                      See {@link Models.GenericResource} for more\r\n   *                      information.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  updateById(resourceId: string, apiVersion: string, parameters: Models.GenericResource): Promise<Models.GenericResource>;\r\n  updateById(resourceId: string, apiVersion: string, parameters: Models.GenericResource, options: msRest.RequestOptionsBase): Promise<Models.GenericResource>;\r\n  updateById(resourceId: string, apiVersion: string, parameters: Models.GenericResource, callback: msRest.ServiceCallback<Models.GenericResource>): void;\r\n  updateById(resourceId: string, apiVersion: string, parameters: Models.GenericResource, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GenericResource>): void;\r\n  updateById(resourceId: string, apiVersion: string, parameters: Models.GenericResource, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.GenericResource>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<Models.GenericResource>;\r\n    if (!callback) {\r\n      return this.updateByIdWithHttpOperationResponse(resourceId, apiVersion, parameters, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as Models.GenericResource);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.updateByIdWithHttpOperationResponse(resourceId, apiVersion, parameters, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as Models.GenericResource;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets a resource by ID.\r\n   *\r\n   * @param {string} resourceId The fully qualified ID of the resource, including\r\n   * the resource name and resource type. Use the format,\r\n   * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}\r\n   *\r\n   * @param {string} apiVersion The API version to use for the operation.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {Models.GenericResource} [result]   - The deserialized result object if an error did not occur.\r\n   *                      See {@link Models.GenericResource} for more\r\n   *                      information.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  getById(resourceId: string, apiVersion: string): Promise<Models.GenericResource>;\r\n  getById(resourceId: string, apiVersion: string, options: msRest.RequestOptionsBase): Promise<Models.GenericResource>;\r\n  getById(resourceId: string, apiVersion: string, callback: msRest.ServiceCallback<Models.GenericResource>): void;\r\n  getById(resourceId: string, apiVersion: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GenericResource>): void;\r\n  getById(resourceId: string, apiVersion: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.GenericResource>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<Models.GenericResource>;\r\n    if (!callback) {\r\n      return this.getByIdWithHttpOperationResponse(resourceId, apiVersion, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as Models.GenericResource);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.getByIdWithHttpOperationResponse(resourceId, apiVersion, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as Models.GenericResource;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @summary Moves resources from one resource group to another resource group.\r\n   *\r\n   * The resources to move must be in the same source resource group. The target\r\n   * resource group may be in a different subscription. When moving resources,\r\n   * both the source group and the target group are locked for the duration of\r\n   * the operation. Write and delete operations are blocked on the groups until\r\n   * the move completes.\r\n   *\r\n   * @param {string} sourceResourceGroupName The name of the resource group\r\n   * containing the resources to move.\r\n   *\r\n   * @param {ResourcesMoveInfo} parameters Parameters for moving resources.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  beginMoveResources(sourceResourceGroupName: string, parameters: Models.ResourcesMoveInfo): Promise<void>;\r\n  beginMoveResources(sourceResourceGroupName: string, parameters: Models.ResourcesMoveInfo, options: msRest.RequestOptionsBase): Promise<void>;\r\n  beginMoveResources(sourceResourceGroupName: string, parameters: Models.ResourcesMoveInfo, callback: msRest.ServiceCallback<void>): void;\r\n  beginMoveResources(sourceResourceGroupName: string, parameters: Models.ResourcesMoveInfo, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\r\n  beginMoveResources(sourceResourceGroupName: string, parameters: Models.ResourcesMoveInfo, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<void>;\r\n    if (!callback) {\r\n      return this.beginMoveResourcesWithHttpOperationResponse(sourceResourceGroupName, parameters, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as void);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.beginMoveResourcesWithHttpOperationResponse(sourceResourceGroupName, parameters, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as void;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @summary Validates whether resources can be moved from one resource group to\r\n   * another resource group.\r\n   *\r\n   * This operation checks whether the specified resources can be moved to the\r\n   * target. The resources to move must be in the same source resource group. The\r\n   * target resource group may be in a different subscription. If validation\r\n   * succeeds, it returns HTTP response code 204 (no content). If validation\r\n   * fails, it returns HTTP response code 409 (Conflict) with an error message.\r\n   * Retrieve the URL in the Location header value to check the result of the\r\n   * long-running operation.\r\n   *\r\n   * @param {string} sourceResourceGroupName The name of the resource group\r\n   * containing the resources to validate for move.\r\n   *\r\n   * @param {ResourcesMoveInfo} parameters Parameters for moving resources.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  beginValidateMoveResources(sourceResourceGroupName: string, parameters: Models.ResourcesMoveInfo): Promise<void>;\r\n  beginValidateMoveResources(sourceResourceGroupName: string, parameters: Models.ResourcesMoveInfo, options: msRest.RequestOptionsBase): Promise<void>;\r\n  beginValidateMoveResources(sourceResourceGroupName: string, parameters: Models.ResourcesMoveInfo, callback: msRest.ServiceCallback<void>): void;\r\n  beginValidateMoveResources(sourceResourceGroupName: string, parameters: Models.ResourcesMoveInfo, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\r\n  beginValidateMoveResources(sourceResourceGroupName: string, parameters: Models.ResourcesMoveInfo, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<void>;\r\n    if (!callback) {\r\n      return this.beginValidateMoveResourcesWithHttpOperationResponse(sourceResourceGroupName, parameters, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as void);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.beginValidateMoveResourcesWithHttpOperationResponse(sourceResourceGroupName, parameters, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as void;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deletes a resource.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group that\r\n   * contains the resource to delete. The name is case insensitive.\r\n   *\r\n   * @param {string} resourceProviderNamespace The namespace of the resource\r\n   * provider.\r\n   *\r\n   * @param {string} parentResourcePath The parent resource identity.\r\n   *\r\n   * @param {string} resourceType The resource type.\r\n   *\r\n   * @param {string} resourceName The name of the resource to delete.\r\n   *\r\n   * @param {string} apiVersion The API version to use for the operation.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  beginDeleteMethod(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string): Promise<void>;\r\n  beginDeleteMethod(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, options: msRest.RequestOptionsBase): Promise<void>;\r\n  beginDeleteMethod(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, callback: msRest.ServiceCallback<void>): void;\r\n  beginDeleteMethod(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\r\n  beginDeleteMethod(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<void>;\r\n    if (!callback) {\r\n      return this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as void);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as void;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a resource.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group for the\r\n   * resource. The name is case insensitive.\r\n   *\r\n   * @param {string} resourceProviderNamespace The namespace of the resource\r\n   * provider.\r\n   *\r\n   * @param {string} parentResourcePath The parent resource identity.\r\n   *\r\n   * @param {string} resourceType The resource type of the resource to create.\r\n   *\r\n   * @param {string} resourceName The name of the resource to create.\r\n   *\r\n   * @param {string} apiVersion The API version to use for the operation.\r\n   *\r\n   * @param {GenericResource} parameters Parameters for creating or updating the\r\n   * resource.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {Models.GenericResource} [result]   - The deserialized result object if an error did not occur.\r\n   *                      See {@link Models.GenericResource} for more\r\n   *                      information.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  beginCreateOrUpdate(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, parameters: Models.GenericResource): Promise<Models.GenericResource>;\r\n  beginCreateOrUpdate(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, parameters: Models.GenericResource, options: msRest.RequestOptionsBase): Promise<Models.GenericResource>;\r\n  beginCreateOrUpdate(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, parameters: Models.GenericResource, callback: msRest.ServiceCallback<Models.GenericResource>): void;\r\n  beginCreateOrUpdate(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, parameters: Models.GenericResource, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GenericResource>): void;\r\n  beginCreateOrUpdate(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, parameters: Models.GenericResource, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.GenericResource>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<Models.GenericResource>;\r\n    if (!callback) {\r\n      return this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, parameters, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as Models.GenericResource);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, parameters, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as Models.GenericResource;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates a resource.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group for the\r\n   * resource. The name is case insensitive.\r\n   *\r\n   * @param {string} resourceProviderNamespace The namespace of the resource\r\n   * provider.\r\n   *\r\n   * @param {string} parentResourcePath The parent resource identity.\r\n   *\r\n   * @param {string} resourceType The resource type of the resource to update.\r\n   *\r\n   * @param {string} resourceName The name of the resource to update.\r\n   *\r\n   * @param {string} apiVersion The API version to use for the operation.\r\n   *\r\n   * @param {GenericResource} parameters Parameters for updating the resource.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {Models.GenericResource} [result]   - The deserialized result object if an error did not occur.\r\n   *                      See {@link Models.GenericResource} for more\r\n   *                      information.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  beginUpdate(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, parameters: Models.GenericResource): Promise<Models.GenericResource>;\r\n  beginUpdate(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, parameters: Models.GenericResource, options: msRest.RequestOptionsBase): Promise<Models.GenericResource>;\r\n  beginUpdate(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, parameters: Models.GenericResource, callback: msRest.ServiceCallback<Models.GenericResource>): void;\r\n  beginUpdate(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, parameters: Models.GenericResource, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GenericResource>): void;\r\n  beginUpdate(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, apiVersion: string, parameters: Models.GenericResource, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.GenericResource>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<Models.GenericResource>;\r\n    if (!callback) {\r\n      return this.beginUpdateWithHttpOperationResponse(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, parameters, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as Models.GenericResource);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.beginUpdateWithHttpOperationResponse(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, parameters, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as Models.GenericResource;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deletes a resource by ID.\r\n   *\r\n   * @param {string} resourceId The fully qualified ID of the resource, including\r\n   * the resource name and resource type. Use the format,\r\n   * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}\r\n   *\r\n   * @param {string} apiVersion The API version to use for the operation.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  beginDeleteById(resourceId: string, apiVersion: string): Promise<void>;\r\n  beginDeleteById(resourceId: string, apiVersion: string, options: msRest.RequestOptionsBase): Promise<void>;\r\n  beginDeleteById(resourceId: string, apiVersion: string, callback: msRest.ServiceCallback<void>): void;\r\n  beginDeleteById(resourceId: string, apiVersion: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\r\n  beginDeleteById(resourceId: string, apiVersion: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<void>;\r\n    if (!callback) {\r\n      return this.beginDeleteByIdWithHttpOperationResponse(resourceId, apiVersion, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as void);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.beginDeleteByIdWithHttpOperationResponse(resourceId, apiVersion, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as void;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a resource by ID.\r\n   *\r\n   * @param {string} resourceId The fully qualified ID of the resource, including\r\n   * the resource name and resource type. Use the format,\r\n   * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}\r\n   *\r\n   * @param {string} apiVersion The API version to use for the operation.\r\n   *\r\n   * @param {GenericResource} parameters Create or update resource parameters.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {Models.GenericResource} [result]   - The deserialized result object if an error did not occur.\r\n   *                      See {@link Models.GenericResource} for more\r\n   *                      information.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  beginCreateOrUpdateById(resourceId: string, apiVersion: string, parameters: Models.GenericResource): Promise<Models.GenericResource>;\r\n  beginCreateOrUpdateById(resourceId: string, apiVersion: string, parameters: Models.GenericResource, options: msRest.RequestOptionsBase): Promise<Models.GenericResource>;\r\n  beginCreateOrUpdateById(resourceId: string, apiVersion: string, parameters: Models.GenericResource, callback: msRest.ServiceCallback<Models.GenericResource>): void;\r\n  beginCreateOrUpdateById(resourceId: string, apiVersion: string, parameters: Models.GenericResource, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GenericResource>): void;\r\n  beginCreateOrUpdateById(resourceId: string, apiVersion: string, parameters: Models.GenericResource, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.GenericResource>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<Models.GenericResource>;\r\n    if (!callback) {\r\n      return this.beginCreateOrUpdateByIdWithHttpOperationResponse(resourceId, apiVersion, parameters, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as Models.GenericResource);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.beginCreateOrUpdateByIdWithHttpOperationResponse(resourceId, apiVersion, parameters, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as Models.GenericResource;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates a resource by ID.\r\n   *\r\n   * @param {string} resourceId The fully qualified ID of the resource, including\r\n   * the resource name and resource type. Use the format,\r\n   * /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}\r\n   *\r\n   * @param {string} apiVersion The API version to use for the operation.\r\n   *\r\n   * @param {GenericResource} parameters Update resource parameters.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {Models.GenericResource} [result]   - The deserialized result object if an error did not occur.\r\n   *                      See {@link Models.GenericResource} for more\r\n   *                      information.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  beginUpdateById(resourceId: string, apiVersion: string, parameters: Models.GenericResource): Promise<Models.GenericResource>;\r\n  beginUpdateById(resourceId: string, apiVersion: string, parameters: Models.GenericResource, options: msRest.RequestOptionsBase): Promise<Models.GenericResource>;\r\n  beginUpdateById(resourceId: string, apiVersion: string, parameters: Models.GenericResource, callback: msRest.ServiceCallback<Models.GenericResource>): void;\r\n  beginUpdateById(resourceId: string, apiVersion: string, parameters: Models.GenericResource, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GenericResource>): void;\r\n  beginUpdateById(resourceId: string, apiVersion: string, parameters: Models.GenericResource, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.GenericResource>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<Models.GenericResource>;\r\n    if (!callback) {\r\n      return this.beginUpdateByIdWithHttpOperationResponse(resourceId, apiVersion, parameters, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as Models.GenericResource);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.beginUpdateByIdWithHttpOperationResponse(resourceId, apiVersion, parameters, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as Models.GenericResource;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all the resources for a resource group.\r\n   *\r\n   * @param {string} nextPageLink The NextLink from the previous successful call\r\n   * to List operation.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {Models.ResourceListResult} [result]   - The deserialized result object if an error did not occur.\r\n   *                      See {@link Models.ResourceListResult} for more\r\n   *                      information.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  listByResourceGroupNext(nextPageLink: string): Promise<Models.ResourceListResult>;\r\n  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase): Promise<Models.ResourceListResult>;\r\n  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ResourceListResult>): void;\r\n  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ResourceListResult>): void;\r\n  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ResourceListResult>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<Models.ResourceListResult>;\r\n    if (!callback) {\r\n      return this.listByResourceGroupNextWithHttpOperationResponse(nextPageLink, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as Models.ResourceListResult);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.listByResourceGroupNextWithHttpOperationResponse(nextPageLink, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as Models.ResourceListResult;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all the resources in a subscription.\r\n   *\r\n   * @param {string} nextPageLink The NextLink from the previous successful call\r\n   * to List operation.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {Models.ResourceListResult} [result]   - The deserialized result object if an error did not occur.\r\n   *                      See {@link Models.ResourceListResult} for more\r\n   *                      information.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  listNext(nextPageLink: string): Promise<Models.ResourceListResult>;\r\n  listNext(nextPageLink: string, options: msRest.RequestOptionsBase): Promise<Models.ResourceListResult>;\r\n  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ResourceListResult>): void;\r\n  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ResourceListResult>): void;\r\n  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ResourceListResult>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<Models.ResourceListResult>;\r\n    if (!callback) {\r\n      return this.listNextWithHttpOperationResponse(nextPageLink, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as Models.ResourceListResult);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.listNextWithHttpOperationResponse(nextPageLink, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as Models.ResourceListResult;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./lib/resource/operations/resources.ts","/*\r\n * Code generated by Microsoft (R) AutoRest Code Generator.\r\n * Changes may cause incorrect behavior and will be lost if the code is\r\n * regenerated.\r\n */\r\n\r\nimport * as msRest from \"ms-rest-js\";\r\nimport * as Models from \"../models\";\r\nimport * as Mappers from \"../models/mappers\";\r\nimport { ResourceManagementClient } from \"../resourceManagementClient\";\r\n\r\nconst WebResource = msRest.WebResource;\r\n\r\n/** Class representing a ResourceGroups. */\r\nexport class ResourceGroups {\r\n  private readonly client: ResourceManagementClient;\r\n  /**\r\n   * Create a ResourceGroups.\r\n   * @param {ResourceManagementClient} client Reference to the service client.\r\n   */\r\n  constructor(client: ResourceManagementClient) {\r\n    this.client = client;\r\n  }\r\n\r\n  /**\r\n   * Checks whether a resource group exists.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group to check.\r\n   * The name is case insensitive.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async checkExistenceWithHttpOperationResponse(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Validate\r\n    try {\r\n      if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {\r\n        throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (resourceGroupName !== null && resourceGroupName !== undefined) {\r\n        if (resourceGroupName.length > 90)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"MaxLength\": 90');\r\n        }\r\n        if (resourceGroupName.length < 1)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"MinLength\": 1');\r\n        }\r\n        if (resourceGroupName.match(/^[-\\w\\._\\(\\)]+$/) === null)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._\\(\\)]+$/');\r\n        }\r\n      }\r\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\r\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\r\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let baseUrl = this.client.baseUri;\r\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}';\r\n    requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));\r\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\r\n    let queryParamsArray: Array<any> = [];\r\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\r\n    if (queryParamsArray.length > 0) {\r\n      requestUrl += '?' + queryParamsArray.join('&');\r\n    }\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'HEAD';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 204 && statusCode !== 404) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n      operationRes.bodyAsJson = (statusCode === 204);\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * Creates or updates a resource group.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group to create\r\n   * or update.\r\n   *\r\n   * @param {ResourceGroup} parameters Parameters supplied to the create or\r\n   * update a resource group.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async createOrUpdateWithHttpOperationResponse(resourceGroupName: string, parameters: Models.ResourceGroup, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Validate\r\n    try {\r\n      if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {\r\n        throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (resourceGroupName !== null && resourceGroupName !== undefined) {\r\n        if (resourceGroupName.length > 90)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"MaxLength\": 90');\r\n        }\r\n        if (resourceGroupName.length < 1)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"MinLength\": 1');\r\n        }\r\n        if (resourceGroupName.match(/^[-\\w\\._\\(\\)]+$/) === null)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._\\(\\)]+$/');\r\n        }\r\n      }\r\n      if (parameters === null || parameters === undefined) {\r\n        throw new Error('parameters cannot be null or undefined.');\r\n      }\r\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\r\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\r\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let baseUrl = this.client.baseUri;\r\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}';\r\n    requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));\r\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\r\n    let queryParamsArray: Array<any> = [];\r\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\r\n    if (queryParamsArray.length > 0) {\r\n      requestUrl += '?' + queryParamsArray.join('&');\r\n    }\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'PUT';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Serialize Request\r\n    let requestContent = null;\r\n    let requestModel = null;\r\n    try {\r\n      if (parameters !== null && parameters !== undefined) {\r\n        let requestModelMapper = Mappers.ResourceGroup;\r\n        requestModel = client.serializer.serialize(requestModelMapper, parameters, 'parameters');\r\n        requestContent = JSON.stringify(requestModel);\r\n      }\r\n    } catch (error) {\r\n      let serializationError = new Error(`Error \"${error.message}\" occurred in serializing the ` +\r\n          `payload - ${JSON.stringify(parameters, null, 2)}.`);\r\n      return Promise.reject(serializationError);\r\n    }\r\n    httpRequest.body = requestContent;\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 201 && statusCode !== 200) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n      // Deserialize Response\r\n      if (statusCode === 201) {\r\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedResponse !== null && parsedResponse !== undefined) {\r\n            let resultMapper = Mappers.ResourceGroup;\r\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n          }\r\n        } catch (error) {\r\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n          deserializationError.request = msRest.stripRequest(httpRequest);\r\n          deserializationError.response = msRest.stripResponse(response);\r\n          return Promise.reject(deserializationError);\r\n        }\r\n      }\r\n      // Deserialize Response\r\n      if (statusCode === 200) {\r\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedResponse !== null && parsedResponse !== undefined) {\r\n            let resultMapper = Mappers.ResourceGroup;\r\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n          }\r\n        } catch (error) {\r\n          let deserializationError1 = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n          deserializationError1.request = msRest.stripRequest(httpRequest);\r\n          deserializationError1.response = msRest.stripResponse(response);\r\n          return Promise.reject(deserializationError1);\r\n        }\r\n      }\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n\r\n  /**\r\n   * @summary Deletes a resource group.\r\n   *\r\n   * When you delete a resource group, all of its resources are also deleted.\r\n   * Deleting a resource group deletes all of its template deployments and\r\n   * currently stored operations.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group to delete.\r\n   * The name is case insensitive.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async deleteMethodWithHttpOperationResponse(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Send request\r\n    let initialResult: msRest.HttpOperationResponse;\r\n    try {\r\n      initialResult = await this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, options);\r\n    } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.getLongRunningOperationResult(initialResult, options);\r\n\r\n      // Deserialize Response\r\n  } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * Gets a resource group.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group to get. The\r\n   * name is case insensitive.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async getWithHttpOperationResponse(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Validate\r\n    try {\r\n      if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {\r\n        throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (resourceGroupName !== null && resourceGroupName !== undefined) {\r\n        if (resourceGroupName.length > 90)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"MaxLength\": 90');\r\n        }\r\n        if (resourceGroupName.length < 1)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"MinLength\": 1');\r\n        }\r\n        if (resourceGroupName.match(/^[-\\w\\._\\(\\)]+$/) === null)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._\\(\\)]+$/');\r\n        }\r\n      }\r\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\r\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\r\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let baseUrl = this.client.baseUri;\r\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}';\r\n    requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));\r\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\r\n    let queryParamsArray: Array<any> = [];\r\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\r\n    if (queryParamsArray.length > 0) {\r\n      requestUrl += '?' + queryParamsArray.join('&');\r\n    }\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'GET';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 200) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n      // Deserialize Response\r\n      if (statusCode === 200) {\r\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedResponse !== null && parsedResponse !== undefined) {\r\n            let resultMapper = Mappers.ResourceGroup;\r\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n          }\r\n        } catch (error) {\r\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n          deserializationError.request = msRest.stripRequest(httpRequest);\r\n          deserializationError.response = msRest.stripResponse(response);\r\n          return Promise.reject(deserializationError);\r\n        }\r\n      }\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * @summary Updates a resource group.\r\n   *\r\n   * Resource groups can be updated through a simple PATCH operation to a group\r\n   * address. The format of the request is the same as that for creating a\r\n   * resource group. If a field is unspecified, the current value is retained.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group to update.\r\n   * The name is case insensitive.\r\n   *\r\n   * @param {ResourceGroupPatchable} parameters Parameters supplied to update a\r\n   * resource group.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async updateWithHttpOperationResponse(resourceGroupName: string, parameters: Models.ResourceGroupPatchable, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Validate\r\n    try {\r\n      if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {\r\n        throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (resourceGroupName !== null && resourceGroupName !== undefined) {\r\n        if (resourceGroupName.length > 90)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"MaxLength\": 90');\r\n        }\r\n        if (resourceGroupName.length < 1)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"MinLength\": 1');\r\n        }\r\n        if (resourceGroupName.match(/^[-\\w\\._\\(\\)]+$/) === null)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._\\(\\)]+$/');\r\n        }\r\n      }\r\n      if (parameters === null || parameters === undefined) {\r\n        throw new Error('parameters cannot be null or undefined.');\r\n      }\r\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\r\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\r\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let baseUrl = this.client.baseUri;\r\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}';\r\n    requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));\r\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\r\n    let queryParamsArray: Array<any> = [];\r\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\r\n    if (queryParamsArray.length > 0) {\r\n      requestUrl += '?' + queryParamsArray.join('&');\r\n    }\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'PATCH';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Serialize Request\r\n    let requestContent = null;\r\n    let requestModel = null;\r\n    try {\r\n      if (parameters !== null && parameters !== undefined) {\r\n        let requestModelMapper = Mappers.ResourceGroupPatchable;\r\n        requestModel = client.serializer.serialize(requestModelMapper, parameters, 'parameters');\r\n        requestContent = JSON.stringify(requestModel);\r\n      }\r\n    } catch (error) {\r\n      let serializationError = new Error(`Error \"${error.message}\" occurred in serializing the ` +\r\n          `payload - ${JSON.stringify(parameters, null, 2)}.`);\r\n      return Promise.reject(serializationError);\r\n    }\r\n    httpRequest.body = requestContent;\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 200) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n      // Deserialize Response\r\n      if (statusCode === 200) {\r\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedResponse !== null && parsedResponse !== undefined) {\r\n            let resultMapper = Mappers.ResourceGroup;\r\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n          }\r\n        } catch (error) {\r\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n          deserializationError.request = msRest.stripRequest(httpRequest);\r\n          deserializationError.response = msRest.stripResponse(response);\r\n          return Promise.reject(deserializationError);\r\n        }\r\n      }\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * Captures the specified resource group as a template.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group to export\r\n   * as a template.\r\n   *\r\n   * @param {ExportTemplateRequest} parameters Parameters for exporting the\r\n   * template.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async exportTemplateWithHttpOperationResponse(resourceGroupName: string, parameters: Models.ExportTemplateRequest, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Validate\r\n    try {\r\n      if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {\r\n        throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (resourceGroupName !== null && resourceGroupName !== undefined) {\r\n        if (resourceGroupName.length > 90)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"MaxLength\": 90');\r\n        }\r\n        if (resourceGroupName.length < 1)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"MinLength\": 1');\r\n        }\r\n        if (resourceGroupName.match(/^[-\\w\\._\\(\\)]+$/) === null)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._\\(\\)]+$/');\r\n        }\r\n      }\r\n      if (parameters === null || parameters === undefined) {\r\n        throw new Error('parameters cannot be null or undefined.');\r\n      }\r\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\r\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\r\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let baseUrl = this.client.baseUri;\r\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/exportTemplate';\r\n    requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));\r\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\r\n    let queryParamsArray: Array<any> = [];\r\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\r\n    if (queryParamsArray.length > 0) {\r\n      requestUrl += '?' + queryParamsArray.join('&');\r\n    }\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'POST';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Serialize Request\r\n    let requestContent = null;\r\n    let requestModel = null;\r\n    try {\r\n      if (parameters !== null && parameters !== undefined) {\r\n        let requestModelMapper = Mappers.ExportTemplateRequest;\r\n        requestModel = client.serializer.serialize(requestModelMapper, parameters, 'parameters');\r\n        requestContent = JSON.stringify(requestModel);\r\n      }\r\n    } catch (error) {\r\n      let serializationError = new Error(`Error \"${error.message}\" occurred in serializing the ` +\r\n          `payload - ${JSON.stringify(parameters, null, 2)}.`);\r\n      return Promise.reject(serializationError);\r\n    }\r\n    httpRequest.body = requestContent;\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 200) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n      // Deserialize Response\r\n      if (statusCode === 200) {\r\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedResponse !== null && parsedResponse !== undefined) {\r\n            let resultMapper = Mappers.ResourceGroupExportResult;\r\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n          }\r\n        } catch (error) {\r\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n          deserializationError.request = msRest.stripRequest(httpRequest);\r\n          deserializationError.response = msRest.stripResponse(response);\r\n          return Promise.reject(deserializationError);\r\n        }\r\n      }\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * Gets all the resource groups for a subscription.\r\n   *\r\n   * @param {ResourceGroupsListOptionalParams} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async listWithHttpOperationResponse(options?: Models.ResourceGroupsListOptionalParams): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    let filter = (options && options.filter !== undefined) ? options.filter : undefined;\r\n    let top = (options && options.top !== undefined) ? options.top : undefined;\r\n    // Validate\r\n    try {\r\n      if (filter !== null && filter !== undefined && typeof filter.valueOf() !== 'string') {\r\n        throw new Error('filter must be of type string.');\r\n      }\r\n      if (top !== null && top !== undefined && typeof top !== 'number') {\r\n        throw new Error('top must be of type number.');\r\n      }\r\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\r\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\r\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let baseUrl = this.client.baseUri;\r\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourcegroups';\r\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\r\n    let queryParamsArray: Array<any> = [];\r\n    if (filter !== null && filter !== undefined) {\r\n      queryParamsArray.push('$filter=' + encodeURIComponent(filter));\r\n    }\r\n    if (top !== null && top !== undefined) {\r\n      queryParamsArray.push('$top=' + encodeURIComponent(top.toString()));\r\n    }\r\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\r\n    if (queryParamsArray.length > 0) {\r\n      requestUrl += '?' + queryParamsArray.join('&');\r\n    }\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'GET';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 200) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n      // Deserialize Response\r\n      if (statusCode === 200) {\r\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedResponse !== null && parsedResponse !== undefined) {\r\n            let resultMapper = Mappers.ResourceGroupListResult;\r\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n          }\r\n        } catch (error) {\r\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n          deserializationError.request = msRest.stripRequest(httpRequest);\r\n          deserializationError.response = msRest.stripResponse(response);\r\n          return Promise.reject(deserializationError);\r\n        }\r\n      }\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * @summary Deletes a resource group.\r\n   *\r\n   * When you delete a resource group, all of its resources are also deleted.\r\n   * Deleting a resource group deletes all of its template deployments and\r\n   * currently stored operations.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group to delete.\r\n   * The name is case insensitive.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Validate\r\n    try {\r\n      if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {\r\n        throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (resourceGroupName !== null && resourceGroupName !== undefined) {\r\n        if (resourceGroupName.length > 90)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"MaxLength\": 90');\r\n        }\r\n        if (resourceGroupName.length < 1)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"MinLength\": 1');\r\n        }\r\n        if (resourceGroupName.match(/^[-\\w\\._\\(\\)]+$/) === null)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._\\(\\)]+$/');\r\n        }\r\n      }\r\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\r\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\r\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let baseUrl = this.client.baseUri;\r\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}';\r\n    requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));\r\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\r\n    let queryParamsArray: Array<any> = [];\r\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\r\n    if (queryParamsArray.length > 0) {\r\n      requestUrl += '?' + queryParamsArray.join('&');\r\n    }\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'DELETE';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 202 && statusCode !== 200) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * Gets all the resource groups for a subscription.\r\n   *\r\n   * @param {string} nextPageLink The NextLink from the previous successful call\r\n   * to List operation.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async listNextWithHttpOperationResponse(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Validate\r\n    try {\r\n      if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {\r\n        throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let requestUrl = '{nextLink}';\r\n    requestUrl = requestUrl.replace('{nextLink}', nextPageLink);\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'GET';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 200) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n      // Deserialize Response\r\n      if (statusCode === 200) {\r\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedResponse !== null && parsedResponse !== undefined) {\r\n            let resultMapper = Mappers.ResourceGroupListResult;\r\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n          }\r\n        } catch (error) {\r\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n          deserializationError.request = msRest.stripRequest(httpRequest);\r\n          deserializationError.response = msRest.stripResponse(response);\r\n          return Promise.reject(deserializationError);\r\n        }\r\n      }\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * Checks whether a resource group exists.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group to check.\r\n   * The name is case insensitive.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {boolean} [result]   - The deserialized result object if an error did not occur.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  checkExistence(resourceGroupName: string): Promise<boolean>;\r\n  checkExistence(resourceGroupName: string, options: msRest.RequestOptionsBase): Promise<boolean>;\r\n  checkExistence(resourceGroupName: string, callback: msRest.ServiceCallback<boolean>): void;\r\n  checkExistence(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<boolean>): void;\r\n  checkExistence(resourceGroupName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<boolean>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<boolean>;\r\n    if (!callback) {\r\n      return this.checkExistenceWithHttpOperationResponse(resourceGroupName, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as boolean);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.checkExistenceWithHttpOperationResponse(resourceGroupName, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as boolean;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates or updates a resource group.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group to create\r\n   * or update.\r\n   *\r\n   * @param {ResourceGroup} parameters Parameters supplied to the create or\r\n   * update a resource group.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {Models.ResourceGroup} [result]   - The deserialized result object if an error did not occur.\r\n   *                      See {@link Models.ResourceGroup} for more information.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  createOrUpdate(resourceGroupName: string, parameters: Models.ResourceGroup): Promise<Models.ResourceGroup>;\r\n  createOrUpdate(resourceGroupName: string, parameters: Models.ResourceGroup, options: msRest.RequestOptionsBase): Promise<Models.ResourceGroup>;\r\n  createOrUpdate(resourceGroupName: string, parameters: Models.ResourceGroup, callback: msRest.ServiceCallback<Models.ResourceGroup>): void;\r\n  createOrUpdate(resourceGroupName: string, parameters: Models.ResourceGroup, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ResourceGroup>): void;\r\n  createOrUpdate(resourceGroupName: string, parameters: Models.ResourceGroup, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ResourceGroup>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<Models.ResourceGroup>;\r\n    if (!callback) {\r\n      return this.createOrUpdateWithHttpOperationResponse(resourceGroupName, parameters, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as Models.ResourceGroup);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.createOrUpdateWithHttpOperationResponse(resourceGroupName, parameters, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as Models.ResourceGroup;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @summary Deletes a resource group.\r\n   *\r\n   * When you delete a resource group, all of its resources are also deleted.\r\n   * Deleting a resource group deletes all of its template deployments and\r\n   * currently stored operations.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group to delete.\r\n   * The name is case insensitive.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  deleteMethod(resourceGroupName: string): Promise<void>;\r\n  deleteMethod(resourceGroupName: string, options: msRest.RequestOptionsBase): Promise<void>;\r\n  deleteMethod(resourceGroupName: string, callback: msRest.ServiceCallback<void>): void;\r\n  deleteMethod(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\r\n  deleteMethod(resourceGroupName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<void>;\r\n    if (!callback) {\r\n      return this.deleteMethodWithHttpOperationResponse(resourceGroupName, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as void);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.deleteMethodWithHttpOperationResponse(resourceGroupName, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as void;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets a resource group.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group to get. The\r\n   * name is case insensitive.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {Models.ResourceGroup} [result]   - The deserialized result object if an error did not occur.\r\n   *                      See {@link Models.ResourceGroup} for more information.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  get(resourceGroupName: string): Promise<Models.ResourceGroup>;\r\n  get(resourceGroupName: string, options: msRest.RequestOptionsBase): Promise<Models.ResourceGroup>;\r\n  get(resourceGroupName: string, callback: msRest.ServiceCallback<Models.ResourceGroup>): void;\r\n  get(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ResourceGroup>): void;\r\n  get(resourceGroupName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ResourceGroup>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<Models.ResourceGroup>;\r\n    if (!callback) {\r\n      return this.getWithHttpOperationResponse(resourceGroupName, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as Models.ResourceGroup);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.getWithHttpOperationResponse(resourceGroupName, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as Models.ResourceGroup;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @summary Updates a resource group.\r\n   *\r\n   * Resource groups can be updated through a simple PATCH operation to a group\r\n   * address. The format of the request is the same as that for creating a\r\n   * resource group. If a field is unspecified, the current value is retained.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group to update.\r\n   * The name is case insensitive.\r\n   *\r\n   * @param {ResourceGroupPatchable} parameters Parameters supplied to update a\r\n   * resource group.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {Models.ResourceGroup} [result]   - The deserialized result object if an error did not occur.\r\n   *                      See {@link Models.ResourceGroup} for more information.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  update(resourceGroupName: string, parameters: Models.ResourceGroupPatchable): Promise<Models.ResourceGroup>;\r\n  update(resourceGroupName: string, parameters: Models.ResourceGroupPatchable, options: msRest.RequestOptionsBase): Promise<Models.ResourceGroup>;\r\n  update(resourceGroupName: string, parameters: Models.ResourceGroupPatchable, callback: msRest.ServiceCallback<Models.ResourceGroup>): void;\r\n  update(resourceGroupName: string, parameters: Models.ResourceGroupPatchable, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ResourceGroup>): void;\r\n  update(resourceGroupName: string, parameters: Models.ResourceGroupPatchable, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ResourceGroup>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<Models.ResourceGroup>;\r\n    if (!callback) {\r\n      return this.updateWithHttpOperationResponse(resourceGroupName, parameters, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as Models.ResourceGroup);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.updateWithHttpOperationResponse(resourceGroupName, parameters, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as Models.ResourceGroup;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Captures the specified resource group as a template.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group to export\r\n   * as a template.\r\n   *\r\n   * @param {ExportTemplateRequest} parameters Parameters for exporting the\r\n   * template.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {Models.ResourceGroupExportResult} [result]   - The deserialized result object if an error did not occur.\r\n   *                      See {@link Models.ResourceGroupExportResult} for more\r\n   *                      information.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  exportTemplate(resourceGroupName: string, parameters: Models.ExportTemplateRequest): Promise<Models.ResourceGroupExportResult>;\r\n  exportTemplate(resourceGroupName: string, parameters: Models.ExportTemplateRequest, options: msRest.RequestOptionsBase): Promise<Models.ResourceGroupExportResult>;\r\n  exportTemplate(resourceGroupName: string, parameters: Models.ExportTemplateRequest, callback: msRest.ServiceCallback<Models.ResourceGroupExportResult>): void;\r\n  exportTemplate(resourceGroupName: string, parameters: Models.ExportTemplateRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ResourceGroupExportResult>): void;\r\n  exportTemplate(resourceGroupName: string, parameters: Models.ExportTemplateRequest, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ResourceGroupExportResult>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<Models.ResourceGroupExportResult>;\r\n    if (!callback) {\r\n      return this.exportTemplateWithHttpOperationResponse(resourceGroupName, parameters, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as Models.ResourceGroupExportResult);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.exportTemplateWithHttpOperationResponse(resourceGroupName, parameters, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as Models.ResourceGroupExportResult;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets all the resource groups for a subscription.\r\n   *\r\n   * @param {ResourceGroupsListOptionalParams} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {Models.ResourceGroupListResult} [result]   - The deserialized result object if an error did not occur.\r\n   *                      See {@link Models.ResourceGroupListResult} for more\r\n   *                      information.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  list(): Promise<Models.ResourceGroupListResult>;\r\n  list(options: Models.ResourceGroupsListOptionalParams): Promise<Models.ResourceGroupListResult>;\r\n  list(callback: msRest.ServiceCallback<Models.ResourceGroupListResult>): void;\r\n  list(options: Models.ResourceGroupsListOptionalParams, callback: msRest.ServiceCallback<Models.ResourceGroupListResult>): void;\r\n  list(options?: Models.ResourceGroupsListOptionalParams, callback?: msRest.ServiceCallback<Models.ResourceGroupListResult>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<Models.ResourceGroupListResult>;\r\n    if (!callback) {\r\n      return this.listWithHttpOperationResponse(options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as Models.ResourceGroupListResult);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.listWithHttpOperationResponse(options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as Models.ResourceGroupListResult;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @summary Deletes a resource group.\r\n   *\r\n   * When you delete a resource group, all of its resources are also deleted.\r\n   * Deleting a resource group deletes all of its template deployments and\r\n   * currently stored operations.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group to delete.\r\n   * The name is case insensitive.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  beginDeleteMethod(resourceGroupName: string): Promise<void>;\r\n  beginDeleteMethod(resourceGroupName: string, options: msRest.RequestOptionsBase): Promise<void>;\r\n  beginDeleteMethod(resourceGroupName: string, callback: msRest.ServiceCallback<void>): void;\r\n  beginDeleteMethod(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\r\n  beginDeleteMethod(resourceGroupName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<void>;\r\n    if (!callback) {\r\n      return this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as void);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as void;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets all the resource groups for a subscription.\r\n   *\r\n   * @param {string} nextPageLink The NextLink from the previous successful call\r\n   * to List operation.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {Models.ResourceGroupListResult} [result]   - The deserialized result object if an error did not occur.\r\n   *                      See {@link Models.ResourceGroupListResult} for more\r\n   *                      information.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  listNext(nextPageLink: string): Promise<Models.ResourceGroupListResult>;\r\n  listNext(nextPageLink: string, options: msRest.RequestOptionsBase): Promise<Models.ResourceGroupListResult>;\r\n  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ResourceGroupListResult>): void;\r\n  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ResourceGroupListResult>): void;\r\n  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ResourceGroupListResult>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<Models.ResourceGroupListResult>;\r\n    if (!callback) {\r\n      return this.listNextWithHttpOperationResponse(nextPageLink, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as Models.ResourceGroupListResult);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.listNextWithHttpOperationResponse(nextPageLink, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as Models.ResourceGroupListResult;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./lib/resource/operations/resourceGroups.ts","/*\r\n * Code generated by Microsoft (R) AutoRest Code Generator.\r\n * Changes may cause incorrect behavior and will be lost if the code is\r\n * regenerated.\r\n */\r\n\r\nimport * as msRest from \"ms-rest-js\";\r\nimport * as Models from \"../models\";\r\nimport * as Mappers from \"../models/mappers\";\r\nimport { ResourceManagementClient } from \"../resourceManagementClient\";\r\n\r\nconst WebResource = msRest.WebResource;\r\n\r\n/** Class representing a Tags. */\r\nexport class Tags {\r\n  private readonly client: ResourceManagementClient;\r\n  /**\r\n   * Create a Tags.\r\n   * @param {ResourceManagementClient} client Reference to the service client.\r\n   */\r\n  constructor(client: ResourceManagementClient) {\r\n    this.client = client;\r\n  }\r\n\r\n  /**\r\n   * Deletes a tag value.\r\n   *\r\n   * @param {string} tagName The name of the tag.\r\n   *\r\n   * @param {string} tagValue The value of the tag to delete.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async deleteValueWithHttpOperationResponse(tagName: string, tagValue: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Validate\r\n    try {\r\n      if (tagName === null || tagName === undefined || typeof tagName.valueOf() !== 'string') {\r\n        throw new Error('tagName cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (tagValue === null || tagValue === undefined || typeof tagValue.valueOf() !== 'string') {\r\n        throw new Error('tagValue cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\r\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\r\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let baseUrl = this.client.baseUri;\r\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/tagNames/{tagName}/tagValues/{tagValue}';\r\n    requestUrl = requestUrl.replace('{tagName}', encodeURIComponent(tagName));\r\n    requestUrl = requestUrl.replace('{tagValue}', encodeURIComponent(tagValue));\r\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\r\n    let queryParamsArray: Array<any> = [];\r\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\r\n    if (queryParamsArray.length > 0) {\r\n      requestUrl += '?' + queryParamsArray.join('&');\r\n    }\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'DELETE';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 200 && statusCode !== 204) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * Creates a tag value. The name of the tag must already exist.\r\n   *\r\n   * @param {string} tagName The name of the tag.\r\n   *\r\n   * @param {string} tagValue The value of the tag to create.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async createOrUpdateValueWithHttpOperationResponse(tagName: string, tagValue: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Validate\r\n    try {\r\n      if (tagName === null || tagName === undefined || typeof tagName.valueOf() !== 'string') {\r\n        throw new Error('tagName cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (tagValue === null || tagValue === undefined || typeof tagValue.valueOf() !== 'string') {\r\n        throw new Error('tagValue cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\r\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\r\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let baseUrl = this.client.baseUri;\r\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/tagNames/{tagName}/tagValues/{tagValue}';\r\n    requestUrl = requestUrl.replace('{tagName}', encodeURIComponent(tagName));\r\n    requestUrl = requestUrl.replace('{tagValue}', encodeURIComponent(tagValue));\r\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\r\n    let queryParamsArray: Array<any> = [];\r\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\r\n    if (queryParamsArray.length > 0) {\r\n      requestUrl += '?' + queryParamsArray.join('&');\r\n    }\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'PUT';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 200 && statusCode !== 201) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n      // Deserialize Response\r\n      if (statusCode === 200) {\r\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedResponse !== null && parsedResponse !== undefined) {\r\n            let resultMapper = Mappers.TagValue;\r\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n          }\r\n        } catch (error) {\r\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n          deserializationError.request = msRest.stripRequest(httpRequest);\r\n          deserializationError.response = msRest.stripResponse(response);\r\n          return Promise.reject(deserializationError);\r\n        }\r\n      }\r\n      // Deserialize Response\r\n      if (statusCode === 201) {\r\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedResponse !== null && parsedResponse !== undefined) {\r\n            let resultMapper = Mappers.TagValue;\r\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n          }\r\n        } catch (error) {\r\n          let deserializationError1 = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n          deserializationError1.request = msRest.stripRequest(httpRequest);\r\n          deserializationError1.response = msRest.stripResponse(response);\r\n          return Promise.reject(deserializationError1);\r\n        }\r\n      }\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * @summary Creates a tag in the subscription.\r\n   *\r\n   * The tag name can have a maximum of 512 characters and is case insensitive.\r\n   * Tag names created by Azure have prefixes of microsoft, azure, or windows.\r\n   * You cannot create tags with one of these prefixes.\r\n   *\r\n   * @param {string} tagName The name of the tag to create.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async createOrUpdateWithHttpOperationResponse(tagName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Validate\r\n    try {\r\n      if (tagName === null || tagName === undefined || typeof tagName.valueOf() !== 'string') {\r\n        throw new Error('tagName cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\r\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\r\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let baseUrl = this.client.baseUri;\r\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/tagNames/{tagName}';\r\n    requestUrl = requestUrl.replace('{tagName}', encodeURIComponent(tagName));\r\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\r\n    let queryParamsArray: Array<any> = [];\r\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\r\n    if (queryParamsArray.length > 0) {\r\n      requestUrl += '?' + queryParamsArray.join('&');\r\n    }\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'PUT';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 200 && statusCode !== 201) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n      // Deserialize Response\r\n      if (statusCode === 200) {\r\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedResponse !== null && parsedResponse !== undefined) {\r\n            let resultMapper = Mappers.TagDetails;\r\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n          }\r\n        } catch (error) {\r\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n          deserializationError.request = msRest.stripRequest(httpRequest);\r\n          deserializationError.response = msRest.stripResponse(response);\r\n          return Promise.reject(deserializationError);\r\n        }\r\n      }\r\n      // Deserialize Response\r\n      if (statusCode === 201) {\r\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedResponse !== null && parsedResponse !== undefined) {\r\n            let resultMapper = Mappers.TagDetails;\r\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n          }\r\n        } catch (error) {\r\n          let deserializationError1 = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n          deserializationError1.request = msRest.stripRequest(httpRequest);\r\n          deserializationError1.response = msRest.stripResponse(response);\r\n          return Promise.reject(deserializationError1);\r\n        }\r\n      }\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * @summary Deletes a tag from the subscription.\r\n   *\r\n   * You must remove all values from a resource tag before you can delete it.\r\n   *\r\n   * @param {string} tagName The name of the tag.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async deleteMethodWithHttpOperationResponse(tagName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Validate\r\n    try {\r\n      if (tagName === null || tagName === undefined || typeof tagName.valueOf() !== 'string') {\r\n        throw new Error('tagName cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\r\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\r\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let baseUrl = this.client.baseUri;\r\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/tagNames/{tagName}';\r\n    requestUrl = requestUrl.replace('{tagName}', encodeURIComponent(tagName));\r\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\r\n    let queryParamsArray: Array<any> = [];\r\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\r\n    if (queryParamsArray.length > 0) {\r\n      requestUrl += '?' + queryParamsArray.join('&');\r\n    }\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'DELETE';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 200 && statusCode !== 204) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * Gets the names and values of all resource tags that are defined in a\r\n   * subscription.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async listWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Validate\r\n    try {\r\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\r\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\r\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let baseUrl = this.client.baseUri;\r\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/tagNames';\r\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\r\n    let queryParamsArray: Array<any> = [];\r\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\r\n    if (queryParamsArray.length > 0) {\r\n      requestUrl += '?' + queryParamsArray.join('&');\r\n    }\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'GET';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 200) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n      // Deserialize Response\r\n      if (statusCode === 200) {\r\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedResponse !== null && parsedResponse !== undefined) {\r\n            let resultMapper = Mappers.TagsListResult;\r\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n          }\r\n        } catch (error) {\r\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n          deserializationError.request = msRest.stripRequest(httpRequest);\r\n          deserializationError.response = msRest.stripResponse(response);\r\n          return Promise.reject(deserializationError);\r\n        }\r\n      }\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * Gets the names and values of all resource tags that are defined in a\r\n   * subscription.\r\n   *\r\n   * @param {string} nextPageLink The NextLink from the previous successful call\r\n   * to List operation.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async listNextWithHttpOperationResponse(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Validate\r\n    try {\r\n      if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {\r\n        throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let requestUrl = '{nextLink}';\r\n    requestUrl = requestUrl.replace('{nextLink}', nextPageLink);\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'GET';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 200) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n      // Deserialize Response\r\n      if (statusCode === 200) {\r\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedResponse !== null && parsedResponse !== undefined) {\r\n            let resultMapper = Mappers.TagsListResult;\r\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n          }\r\n        } catch (error) {\r\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n          deserializationError.request = msRest.stripRequest(httpRequest);\r\n          deserializationError.response = msRest.stripResponse(response);\r\n          return Promise.reject(deserializationError);\r\n        }\r\n      }\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * Deletes a tag value.\r\n   *\r\n   * @param {string} tagName The name of the tag.\r\n   *\r\n   * @param {string} tagValue The value of the tag to delete.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  deleteValue(tagName: string, tagValue: string): Promise<void>;\r\n  deleteValue(tagName: string, tagValue: string, options: msRest.RequestOptionsBase): Promise<void>;\r\n  deleteValue(tagName: string, tagValue: string, callback: msRest.ServiceCallback<void>): void;\r\n  deleteValue(tagName: string, tagValue: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\r\n  deleteValue(tagName: string, tagValue: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<void>;\r\n    if (!callback) {\r\n      return this.deleteValueWithHttpOperationResponse(tagName, tagValue, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as void);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.deleteValueWithHttpOperationResponse(tagName, tagValue, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as void;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a tag value. The name of the tag must already exist.\r\n   *\r\n   * @param {string} tagName The name of the tag.\r\n   *\r\n   * @param {string} tagValue The value of the tag to create.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {Models.TagValue} [result]   - The deserialized result object if an error did not occur.\r\n   *                      See {@link Models.TagValue} for more information.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  createOrUpdateValue(tagName: string, tagValue: string): Promise<Models.TagValue>;\r\n  createOrUpdateValue(tagName: string, tagValue: string, options: msRest.RequestOptionsBase): Promise<Models.TagValue>;\r\n  createOrUpdateValue(tagName: string, tagValue: string, callback: msRest.ServiceCallback<Models.TagValue>): void;\r\n  createOrUpdateValue(tagName: string, tagValue: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TagValue>): void;\r\n  createOrUpdateValue(tagName: string, tagValue: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.TagValue>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<Models.TagValue>;\r\n    if (!callback) {\r\n      return this.createOrUpdateValueWithHttpOperationResponse(tagName, tagValue, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as Models.TagValue);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.createOrUpdateValueWithHttpOperationResponse(tagName, tagValue, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as Models.TagValue;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @summary Creates a tag in the subscription.\r\n   *\r\n   * The tag name can have a maximum of 512 characters and is case insensitive.\r\n   * Tag names created by Azure have prefixes of microsoft, azure, or windows.\r\n   * You cannot create tags with one of these prefixes.\r\n   *\r\n   * @param {string} tagName The name of the tag to create.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {Models.TagDetails} [result]   - The deserialized result object if an error did not occur.\r\n   *                      See {@link Models.TagDetails} for more information.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  createOrUpdate(tagName: string): Promise<Models.TagDetails>;\r\n  createOrUpdate(tagName: string, options: msRest.RequestOptionsBase): Promise<Models.TagDetails>;\r\n  createOrUpdate(tagName: string, callback: msRest.ServiceCallback<Models.TagDetails>): void;\r\n  createOrUpdate(tagName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TagDetails>): void;\r\n  createOrUpdate(tagName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.TagDetails>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<Models.TagDetails>;\r\n    if (!callback) {\r\n      return this.createOrUpdateWithHttpOperationResponse(tagName, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as Models.TagDetails);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.createOrUpdateWithHttpOperationResponse(tagName, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as Models.TagDetails;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @summary Deletes a tag from the subscription.\r\n   *\r\n   * You must remove all values from a resource tag before you can delete it.\r\n   *\r\n   * @param {string} tagName The name of the tag.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  deleteMethod(tagName: string): Promise<void>;\r\n  deleteMethod(tagName: string, options: msRest.RequestOptionsBase): Promise<void>;\r\n  deleteMethod(tagName: string, callback: msRest.ServiceCallback<void>): void;\r\n  deleteMethod(tagName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\r\n  deleteMethod(tagName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<void>;\r\n    if (!callback) {\r\n      return this.deleteMethodWithHttpOperationResponse(tagName, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as void);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.deleteMethodWithHttpOperationResponse(tagName, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as void;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the names and values of all resource tags that are defined in a\r\n   * subscription.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {Models.TagsListResult} [result]   - The deserialized result object if an error did not occur.\r\n   *                      See {@link Models.TagsListResult} for more information.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  list(): Promise<Models.TagsListResult>;\r\n  list(options: msRest.RequestOptionsBase): Promise<Models.TagsListResult>;\r\n  list(callback: msRest.ServiceCallback<Models.TagsListResult>): void;\r\n  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TagsListResult>): void;\r\n  list(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.TagsListResult>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<Models.TagsListResult>;\r\n    if (!callback) {\r\n      return this.listWithHttpOperationResponse(options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as Models.TagsListResult);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.listWithHttpOperationResponse(options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as Models.TagsListResult;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the names and values of all resource tags that are defined in a\r\n   * subscription.\r\n   *\r\n   * @param {string} nextPageLink The NextLink from the previous successful call\r\n   * to List operation.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {Models.TagsListResult} [result]   - The deserialized result object if an error did not occur.\r\n   *                      See {@link Models.TagsListResult} for more information.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  listNext(nextPageLink: string): Promise<Models.TagsListResult>;\r\n  listNext(nextPageLink: string, options: msRest.RequestOptionsBase): Promise<Models.TagsListResult>;\r\n  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.TagsListResult>): void;\r\n  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TagsListResult>): void;\r\n  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.TagsListResult>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<Models.TagsListResult>;\r\n    if (!callback) {\r\n      return this.listNextWithHttpOperationResponse(nextPageLink, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as Models.TagsListResult);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.listNextWithHttpOperationResponse(nextPageLink, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as Models.TagsListResult;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./lib/resource/operations/tags.ts","/*\r\n * Code generated by Microsoft (R) AutoRest Code Generator.\r\n * Changes may cause incorrect behavior and will be lost if the code is\r\n * regenerated.\r\n */\r\n\r\nimport * as msRest from \"ms-rest-js\";\r\nimport * as Models from \"../models\";\r\nimport * as Mappers from \"../models/mappers\";\r\nimport { ResourceManagementClient } from \"../resourceManagementClient\";\r\n\r\nconst WebResource = msRest.WebResource;\r\n\r\n/** Class representing a DeploymentOperations. */\r\nexport class DeploymentOperations {\r\n  private readonly client: ResourceManagementClient;\r\n  /**\r\n   * Create a DeploymentOperations.\r\n   * @param {ResourceManagementClient} client Reference to the service client.\r\n   */\r\n  constructor(client: ResourceManagementClient) {\r\n    this.client = client;\r\n  }\r\n\r\n  /**\r\n   * Gets a deployments operation.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group. The name\r\n   * is case insensitive.\r\n   *\r\n   * @param {string} deploymentName The name of the deployment.\r\n   *\r\n   * @param {string} operationId The ID of the operation to get.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async getWithHttpOperationResponse(resourceGroupName: string, deploymentName: string, operationId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Validate\r\n    try {\r\n      if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {\r\n        throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (resourceGroupName !== null && resourceGroupName !== undefined) {\r\n        if (resourceGroupName.length > 90)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"MaxLength\": 90');\r\n        }\r\n        if (resourceGroupName.length < 1)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"MinLength\": 1');\r\n        }\r\n        if (resourceGroupName.match(/^[-\\w\\._\\(\\)]+$/) === null)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._\\(\\)]+$/');\r\n        }\r\n      }\r\n      if (deploymentName === null || deploymentName === undefined || typeof deploymentName.valueOf() !== 'string') {\r\n        throw new Error('deploymentName cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (deploymentName !== null && deploymentName !== undefined) {\r\n        if (deploymentName.length > 64)\r\n        {\r\n          throw new Error('\"deploymentName\" should satisfy the constraint - \"MaxLength\": 64');\r\n        }\r\n        if (deploymentName.length < 1)\r\n        {\r\n          throw new Error('\"deploymentName\" should satisfy the constraint - \"MinLength\": 1');\r\n        }\r\n        if (deploymentName.match(/^[-\\w\\._\\(\\)]+$/) === null)\r\n        {\r\n          throw new Error('\"deploymentName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._\\(\\)]+$/');\r\n        }\r\n      }\r\n      if (operationId === null || operationId === undefined || typeof operationId.valueOf() !== 'string') {\r\n        throw new Error('operationId cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\r\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\r\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let baseUrl = this.client.baseUri;\r\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/deployments/{deploymentName}/operations/{operationId}';\r\n    requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));\r\n    requestUrl = requestUrl.replace('{deploymentName}', encodeURIComponent(deploymentName));\r\n    requestUrl = requestUrl.replace('{operationId}', encodeURIComponent(operationId));\r\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\r\n    let queryParamsArray: Array<any> = [];\r\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\r\n    if (queryParamsArray.length > 0) {\r\n      requestUrl += '?' + queryParamsArray.join('&');\r\n    }\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'GET';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 200) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n      // Deserialize Response\r\n      if (statusCode === 200) {\r\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedResponse !== null && parsedResponse !== undefined) {\r\n            let resultMapper = Mappers.DeploymentOperation;\r\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n          }\r\n        } catch (error) {\r\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n          deserializationError.request = msRest.stripRequest(httpRequest);\r\n          deserializationError.response = msRest.stripResponse(response);\r\n          return Promise.reject(deserializationError);\r\n        }\r\n      }\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * Gets all deployments operations for a deployment.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group. The name\r\n   * is case insensitive.\r\n   *\r\n   * @param {string} deploymentName The name of the deployment with the operation\r\n   * to get.\r\n   *\r\n   * @param {DeploymentOperationsListOptionalParams} [options] Optional\r\n   * Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async listWithHttpOperationResponse(resourceGroupName: string, deploymentName: string, options?: Models.DeploymentOperationsListOptionalParams): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    let top = (options && options.top !== undefined) ? options.top : undefined;\r\n    // Validate\r\n    try {\r\n      if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {\r\n        throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (resourceGroupName !== null && resourceGroupName !== undefined) {\r\n        if (resourceGroupName.length > 90)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"MaxLength\": 90');\r\n        }\r\n        if (resourceGroupName.length < 1)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"MinLength\": 1');\r\n        }\r\n        if (resourceGroupName.match(/^[-\\w\\._\\(\\)]+$/) === null)\r\n        {\r\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._\\(\\)]+$/');\r\n        }\r\n      }\r\n      if (deploymentName === null || deploymentName === undefined || typeof deploymentName.valueOf() !== 'string') {\r\n        throw new Error('deploymentName cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (deploymentName !== null && deploymentName !== undefined) {\r\n        if (deploymentName.length > 64)\r\n        {\r\n          throw new Error('\"deploymentName\" should satisfy the constraint - \"MaxLength\": 64');\r\n        }\r\n        if (deploymentName.length < 1)\r\n        {\r\n          throw new Error('\"deploymentName\" should satisfy the constraint - \"MinLength\": 1');\r\n        }\r\n        if (deploymentName.match(/^[-\\w\\._\\(\\)]+$/) === null)\r\n        {\r\n          throw new Error('\"deploymentName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._\\(\\)]+$/');\r\n        }\r\n      }\r\n      if (top !== null && top !== undefined && typeof top !== 'number') {\r\n        throw new Error('top must be of type number.');\r\n      }\r\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\r\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\r\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let baseUrl = this.client.baseUri;\r\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/deployments/{deploymentName}/operations';\r\n    requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));\r\n    requestUrl = requestUrl.replace('{deploymentName}', encodeURIComponent(deploymentName));\r\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\r\n    let queryParamsArray: Array<any> = [];\r\n    if (top !== null && top !== undefined) {\r\n      queryParamsArray.push('$top=' + encodeURIComponent(top.toString()));\r\n    }\r\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\r\n    if (queryParamsArray.length > 0) {\r\n      requestUrl += '?' + queryParamsArray.join('&');\r\n    }\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'GET';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 200) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n      // Deserialize Response\r\n      if (statusCode === 200) {\r\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedResponse !== null && parsedResponse !== undefined) {\r\n            let resultMapper = Mappers.DeploymentOperationsListResult;\r\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n          }\r\n        } catch (error) {\r\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n          deserializationError.request = msRest.stripRequest(httpRequest);\r\n          deserializationError.response = msRest.stripResponse(response);\r\n          return Promise.reject(deserializationError);\r\n        }\r\n      }\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * Gets all deployments operations for a deployment.\r\n   *\r\n   * @param {string} nextPageLink The NextLink from the previous successful call\r\n   * to List operation.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @returns {Promise} A promise is returned\r\n   *\r\n   * @resolve {HttpOperationResponse} - The deserialized result object.\r\n   *\r\n   * @reject {Error|ServiceError} - The error object.\r\n   */\r\n  async listNextWithHttpOperationResponse(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\r\n    let client = this.client;\r\n    // Validate\r\n    try {\r\n      if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {\r\n        throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');\r\n      }\r\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\r\n        throw new Error('this.client.acceptLanguage must be of type string.');\r\n      }\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    // Construct URL\r\n    let requestUrl = '{nextLink}';\r\n    requestUrl = requestUrl.replace('{nextLink}', nextPageLink);\r\n\r\n    // Create HTTP transport objects\r\n    let httpRequest = new WebResource();\r\n    httpRequest.method = 'GET';\r\n    httpRequest.url = requestUrl;\r\n    httpRequest.headers = {};\r\n    // Set Headers\r\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\r\n    if (this.client.generateClientRequestId) {\r\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\r\n    }\r\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\r\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\r\n    }\r\n    if(options && options.customHeaders) {\r\n      for(let headerName in options.customHeaders) {\r\n        if (options.customHeaders.hasOwnProperty(headerName)) {\r\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\r\n        }\r\n      }\r\n    }\r\n    // Send Request\r\n    let operationRes: msRest.HttpOperationResponse;\r\n    try {\r\n      operationRes = await client.pipeline(httpRequest);\r\n      let response = operationRes.response;\r\n      let statusCode = response.status;\r\n      if (statusCode !== 200) {\r\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\r\n        error.statusCode = response.status;\r\n        error.request = msRest.stripRequest(httpRequest);\r\n        error.response = msRest.stripResponse(response);\r\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedErrorResponse) {\r\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\r\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\r\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\r\n          }\r\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\r\n            let resultMapper = Mappers.CloudError;\r\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\r\n          }\r\n        } catch (defaultError) {\r\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\r\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\r\n          return Promise.reject(error);\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n      // Deserialize Response\r\n      if (statusCode === 200) {\r\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\r\n        try {\r\n          if (parsedResponse !== null && parsedResponse !== undefined) {\r\n            let resultMapper = Mappers.DeploymentOperationsListResult;\r\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\r\n          }\r\n        } catch (error) {\r\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\r\n          deserializationError.request = msRest.stripRequest(httpRequest);\r\n          deserializationError.response = msRest.stripResponse(response);\r\n          return Promise.reject(deserializationError);\r\n        }\r\n      }\r\n\r\n    } catch(err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(operationRes);\r\n  }\r\n\r\n  /**\r\n   * Gets a deployments operation.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group. The name\r\n   * is case insensitive.\r\n   *\r\n   * @param {string} deploymentName The name of the deployment.\r\n   *\r\n   * @param {string} operationId The ID of the operation to get.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {Models.DeploymentOperation} [result]   - The deserialized result object if an error did not occur.\r\n   *                      See {@link Models.DeploymentOperation} for more\r\n   *                      information.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  get(resourceGroupName: string, deploymentName: string, operationId: string): Promise<Models.DeploymentOperation>;\r\n  get(resourceGroupName: string, deploymentName: string, operationId: string, options: msRest.RequestOptionsBase): Promise<Models.DeploymentOperation>;\r\n  get(resourceGroupName: string, deploymentName: string, operationId: string, callback: msRest.ServiceCallback<Models.DeploymentOperation>): void;\r\n  get(resourceGroupName: string, deploymentName: string, operationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentOperation>): void;\r\n  get(resourceGroupName: string, deploymentName: string, operationId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.DeploymentOperation>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<Models.DeploymentOperation>;\r\n    if (!callback) {\r\n      return this.getWithHttpOperationResponse(resourceGroupName, deploymentName, operationId, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as Models.DeploymentOperation);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.getWithHttpOperationResponse(resourceGroupName, deploymentName, operationId, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as Models.DeploymentOperation;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets all deployments operations for a deployment.\r\n   *\r\n   * @param {string} resourceGroupName The name of the resource group. The name\r\n   * is case insensitive.\r\n   *\r\n   * @param {string} deploymentName The name of the deployment with the operation\r\n   * to get.\r\n   *\r\n   * @param {DeploymentOperationsListOptionalParams} [options] Optional\r\n   * Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {Models.DeploymentOperationsListResult} [result]   - The deserialized result object if an error did not occur.\r\n   *                      See {@link Models.DeploymentOperationsListResult} for\r\n   *                      more information.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  list(resourceGroupName: string, deploymentName: string): Promise<Models.DeploymentOperationsListResult>;\r\n  list(resourceGroupName: string, deploymentName: string, options: Models.DeploymentOperationsListOptionalParams): Promise<Models.DeploymentOperationsListResult>;\r\n  list(resourceGroupName: string, deploymentName: string, callback: msRest.ServiceCallback<Models.DeploymentOperationsListResult>): void;\r\n  list(resourceGroupName: string, deploymentName: string, options: Models.DeploymentOperationsListOptionalParams, callback: msRest.ServiceCallback<Models.DeploymentOperationsListResult>): void;\r\n  list(resourceGroupName: string, deploymentName: string, options?: Models.DeploymentOperationsListOptionalParams, callback?: msRest.ServiceCallback<Models.DeploymentOperationsListResult>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<Models.DeploymentOperationsListResult>;\r\n    if (!callback) {\r\n      return this.listWithHttpOperationResponse(resourceGroupName, deploymentName, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as Models.DeploymentOperationsListResult);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.listWithHttpOperationResponse(resourceGroupName, deploymentName, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as Models.DeploymentOperationsListResult;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets all deployments operations for a deployment.\r\n   *\r\n   * @param {string} nextPageLink The NextLink from the previous successful call\r\n   * to List operation.\r\n   *\r\n   * @param {RequestOptionsBase} [options] Optional Parameters.\r\n   *\r\n   * @param {ServiceCallback} callback - The callback.\r\n   *\r\n   * @returns {ServiceCallback} callback(err, result, request, response)\r\n   *\r\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\r\n   *\r\n   *                      {Models.DeploymentOperationsListResult} [result]   - The deserialized result object if an error did not occur.\r\n   *                      See {@link Models.DeploymentOperationsListResult} for\r\n   *                      more information.\r\n   *\r\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\r\n   *\r\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\r\n   */\r\n  listNext(nextPageLink: string): Promise<Models.DeploymentOperationsListResult>;\r\n  listNext(nextPageLink: string, options: msRest.RequestOptionsBase): Promise<Models.DeploymentOperationsListResult>;\r\n  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DeploymentOperationsListResult>): void;\r\n  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentOperationsListResult>): void;\r\n  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.DeploymentOperationsListResult>): any {\r\n    if (!callback && typeof options === 'function') {\r\n      callback = options;\r\n      options = undefined;\r\n    }\r\n    let cb = callback as msRest.ServiceCallback<Models.DeploymentOperationsListResult>;\r\n    if (!callback) {\r\n      return this.listNextWithHttpOperationResponse(nextPageLink, options).then((operationRes: msRest.HttpOperationResponse) => {\r\n        return Promise.resolve(operationRes.bodyAsJson as Models.DeploymentOperationsListResult);\r\n      }).catch((err: Error) => {\r\n        return Promise.reject(err);\r\n      });\r\n    } else {\r\n      msRest.promiseToCallback(this.listNextWithHttpOperationResponse(nextPageLink, options))((err: Error, data: msRest.HttpOperationResponse) => {\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        let result = data.bodyAsJson as Models.DeploymentOperationsListResult;\r\n        return cb(err, result, data.request, data.response);\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./lib/resource/operations/deploymentOperations.ts"],"sourceRoot":""}