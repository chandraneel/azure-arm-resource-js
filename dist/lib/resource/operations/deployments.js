/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import * as msRest from "ms-rest-js";
import * as Mappers from "../models/mappers";
var WebResource = msRest.WebResource;
/** Class representing a Deployments. */
var Deployments = /** @class */ (function () {
    /**
     * Create a Deployments.
     * @param {ResourceManagementClient} client Reference to the service client.
     */
    function Deployments(client) {
        this.client = client;
    }
    /**
     * @summary Deletes a deployment from the deployment history.
     *
     * A template deployment that is currently running cannot be deleted. Deleting
     * a template deployment removes the associated deployment operations. Deleting
     * a template deployment does not affect the state of the resource group. This
     * is an asynchronous operation that returns a status of 202 until the template
     * deployment is successfully deleted. The Location response header contains
     * the URI that is used to obtain the status of the process. While the process
     * is running, a call to the URI in the Location header returns a status of
     * 202. When the process finishes, the URI in the Location header returns a
     * status of 204 on success. If the asynchronous request failed, the URI in the
     * Location header returns an error-level status code.
     *
     * @param {string} resourceGroupName The name of the resource group with the
     * deployment to delete. The name is case insensitive.
     *
     * @param {string} deploymentName The name of the deployment to delete.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    Deployments.prototype.deleteMethodWithHttpOperationResponse = function (resourceGroupName, deploymentName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_1, operationRes, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, deploymentName, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_1)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        return [3 /*break*/, 7];
                    case 6:
                        err_2 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_2)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Checks whether the deployment exists.
     *
     * @param {string} resourceGroupName The name of the resource group with the
     * deployment to check. The name is case insensitive.
     *
     * @param {string} deploymentName The name of the deployment to check.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    Deployments.prototype.checkExistenceWithHttpOperationResponse = function (resourceGroupName, deploymentName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, err_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (resourceGroupName !== null && resourceGroupName !== undefined) {
                                if (resourceGroupName.length > 90) {
                                    throw new Error('"resourceGroupName" should satisfy the constraint - "MaxLength": 90');
                                }
                                if (resourceGroupName.length < 1) {
                                    throw new Error('"resourceGroupName" should satisfy the constraint - "MinLength": 1');
                                }
                                if (resourceGroupName.match(/^[-\w\._\(\)]+$/) === null) {
                                    throw new Error('"resourceGroupName" should satisfy the constraint - "Pattern": /^[-\w\._\(\)]+$/');
                                }
                            }
                            if (deploymentName === null || deploymentName === undefined || typeof deploymentName.valueOf() !== 'string') {
                                throw new Error('deploymentName cannot be null or undefined and it must be of type string.');
                            }
                            if (deploymentName !== null && deploymentName !== undefined) {
                                if (deploymentName.length > 64) {
                                    throw new Error('"deploymentName" should satisfy the constraint - "MaxLength": 64');
                                }
                                if (deploymentName.length < 1) {
                                    throw new Error('"deploymentName" should satisfy the constraint - "MinLength": 1');
                                }
                                if (deploymentName.match(/^[-\w\._\(\)]+$/) === null) {
                                    throw new Error('"deploymentName" should satisfy the constraint - "Pattern": /^[-\w\._\(\)]+$/');
                                }
                            }
                            if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
                                throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{deploymentName}', encodeURIComponent(deploymentName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'HEAD';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 204 && statusCode !== 404) {
                            error = new msRest.RestError(operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = msRest.stripRequest(httpRequest);
                            error.response = msRest.stripResponse(response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = Mappers.CloudError;
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        operationRes.bodyAsJson = (statusCode === 204);
                        return [3 /*break*/, 4];
                    case 3:
                        err_3 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_3)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * @summary Deploys resources to a resource group.
     *
     * You can provide the template and parameters directly in the request or link
     * to JSON files.
     *
     * @param {string} resourceGroupName The name of the resource group to deploy
     * the resources to. The name is case insensitive. The resource group must
     * already exist.
     *
     * @param {string} deploymentName The name of the deployment.
     *
     * @param {Deployment} parameters Additional parameters supplied to the
     * operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    Deployments.prototype.createOrUpdateWithHttpOperationResponse = function (resourceGroupName, deploymentName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, initialResult, err_4, operationRes, httpRequest, response, parsedResponse, resultMapper, deserializationError, err_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, deploymentName, parameters, options)];
                    case 2:
                        initialResult = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_4 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_4)];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, client.getLongRunningOperationResult(initialResult, options)];
                    case 5:
                        operationRes = _a.sent();
                        httpRequest = operationRes.request;
                        response = operationRes.response;
                        parsedResponse = operationRes.bodyAsJson;
                        try {
                            if (parsedResponse !== null && parsedResponse !== undefined) {
                                resultMapper = Mappers.DeploymentExtended;
                                operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                            }
                        }
                        catch (error) {
                            deserializationError = new msRest.RestError("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                            deserializationError.request = msRest.stripRequest(httpRequest);
                            deserializationError.response = msRest.stripResponse(response);
                            return [2 /*return*/, Promise.reject(deserializationError)];
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_5 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_5)];
                    case 7: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Gets a deployment.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} deploymentName The name of the deployment to get.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    Deployments.prototype.getWithHttpOperationResponse = function (resourceGroupName, deploymentName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_6;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (resourceGroupName !== null && resourceGroupName !== undefined) {
                                if (resourceGroupName.length > 90) {
                                    throw new Error('"resourceGroupName" should satisfy the constraint - "MaxLength": 90');
                                }
                                if (resourceGroupName.length < 1) {
                                    throw new Error('"resourceGroupName" should satisfy the constraint - "MinLength": 1');
                                }
                                if (resourceGroupName.match(/^[-\w\._\(\)]+$/) === null) {
                                    throw new Error('"resourceGroupName" should satisfy the constraint - "Pattern": /^[-\w\._\(\)]+$/');
                                }
                            }
                            if (deploymentName === null || deploymentName === undefined || typeof deploymentName.valueOf() !== 'string') {
                                throw new Error('deploymentName cannot be null or undefined and it must be of type string.');
                            }
                            if (deploymentName !== null && deploymentName !== undefined) {
                                if (deploymentName.length > 64) {
                                    throw new Error('"deploymentName" should satisfy the constraint - "MaxLength": 64');
                                }
                                if (deploymentName.length < 1) {
                                    throw new Error('"deploymentName" should satisfy the constraint - "MinLength": 1');
                                }
                                if (deploymentName.match(/^[-\w\._\(\)]+$/) === null) {
                                    throw new Error('"deploymentName" should satisfy the constraint - "Pattern": /^[-\w\._\(\)]+$/');
                                }
                            }
                            if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
                                throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{deploymentName}', encodeURIComponent(deploymentName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new msRest.RestError(operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = msRest.stripRequest(httpRequest);
                            error.response = msRest.stripResponse(response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = Mappers.CloudError;
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = Mappers.DeploymentExtended;
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new msRest.RestError("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = msRest.stripRequest(httpRequest);
                                deserializationError.response = msRest.stripResponse(response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_6 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_6)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * @summary Cancels a currently running template deployment.
     *
     * You can cancel a deployment only if the provisioningState is Accepted or
     * Running. After the deployment is canceled, the provisioningState is set to
     * Canceled. Canceling a template deployment stops the currently running
     * template deployment and leaves the resource group partially deployed.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} deploymentName The name of the deployment to cancel.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    Deployments.prototype.cancelWithHttpOperationResponse = function (resourceGroupName, deploymentName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, err_7;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (resourceGroupName !== null && resourceGroupName !== undefined) {
                                if (resourceGroupName.length > 90) {
                                    throw new Error('"resourceGroupName" should satisfy the constraint - "MaxLength": 90');
                                }
                                if (resourceGroupName.length < 1) {
                                    throw new Error('"resourceGroupName" should satisfy the constraint - "MinLength": 1');
                                }
                                if (resourceGroupName.match(/^[-\w\._\(\)]+$/) === null) {
                                    throw new Error('"resourceGroupName" should satisfy the constraint - "Pattern": /^[-\w\._\(\)]+$/');
                                }
                            }
                            if (deploymentName === null || deploymentName === undefined || typeof deploymentName.valueOf() !== 'string') {
                                throw new Error('deploymentName cannot be null or undefined and it must be of type string.');
                            }
                            if (deploymentName !== null && deploymentName !== undefined) {
                                if (deploymentName.length > 64) {
                                    throw new Error('"deploymentName" should satisfy the constraint - "MaxLength": 64');
                                }
                                if (deploymentName.length < 1) {
                                    throw new Error('"deploymentName" should satisfy the constraint - "MinLength": 1');
                                }
                                if (deploymentName.match(/^[-\w\._\(\)]+$/) === null) {
                                    throw new Error('"deploymentName" should satisfy the constraint - "Pattern": /^[-\w\._\(\)]+$/');
                                }
                            }
                            if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
                                throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{deploymentName}', encodeURIComponent(deploymentName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'POST';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 204) {
                            error = new msRest.RestError(operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = msRest.stripRequest(httpRequest);
                            error.response = msRest.stripResponse(response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = Mappers.CloudError;
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_7 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_7)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Validates whether the specified template is syntactically correct and will
     * be accepted by Azure Resource Manager..
     *
     * @param {string} resourceGroupName The name of the resource group the
     * template will be deployed to. The name is case insensitive.
     *
     * @param {string} deploymentName The name of the deployment.
     *
     * @param {Deployment} parameters Parameters to validate.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    Deployments.prototype.validateWithHttpOperationResponse = function (resourceGroupName, deploymentName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, requestContent, requestModel, requestModelMapper, serializationError, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, parsedResponse, resultMapper, deserializationError1, err_8;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (resourceGroupName !== null && resourceGroupName !== undefined) {
                                if (resourceGroupName.length > 90) {
                                    throw new Error('"resourceGroupName" should satisfy the constraint - "MaxLength": 90');
                                }
                                if (resourceGroupName.length < 1) {
                                    throw new Error('"resourceGroupName" should satisfy the constraint - "MinLength": 1');
                                }
                                if (resourceGroupName.match(/^[-\w\._\(\)]+$/) === null) {
                                    throw new Error('"resourceGroupName" should satisfy the constraint - "Pattern": /^[-\w\._\(\)]+$/');
                                }
                            }
                            if (deploymentName === null || deploymentName === undefined || typeof deploymentName.valueOf() !== 'string') {
                                throw new Error('deploymentName cannot be null or undefined and it must be of type string.');
                            }
                            if (deploymentName !== null && deploymentName !== undefined) {
                                if (deploymentName.length > 64) {
                                    throw new Error('"deploymentName" should satisfy the constraint - "MaxLength": 64');
                                }
                                if (deploymentName.length < 1) {
                                    throw new Error('"deploymentName" should satisfy the constraint - "MinLength": 1');
                                }
                                if (deploymentName.match(/^[-\w\._\(\)]+$/) === null) {
                                    throw new Error('"deploymentName" should satisfy the constraint - "Pattern": /^[-\w\._\(\)]+$/');
                                }
                            }
                            if (parameters === null || parameters === undefined) {
                                throw new Error('parameters cannot be null or undefined.');
                            }
                            if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
                                throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/validate';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{deploymentName}', encodeURIComponent(deploymentName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'POST';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        requestContent = null;
                        requestModel = null;
                        try {
                            if (parameters !== null && parameters !== undefined) {
                                requestModelMapper = Mappers.Deployment;
                                requestModel = client.serializer.serialize(requestModelMapper, parameters, 'parameters');
                                requestContent = JSON.stringify(requestModel);
                            }
                        }
                        catch (error) {
                            serializationError = new Error("Error \"" + error.message + "\" occurred in serializing the " +
                                ("payload - " + JSON.stringify(parameters, null, 2) + "."));
                            return [2 /*return*/, Promise.reject(serializationError)];
                        }
                        httpRequest.body = requestContent;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200 && statusCode !== 400) {
                            error = new msRest.RestError(operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = msRest.stripRequest(httpRequest);
                            error.response = msRest.stripResponse(response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = Mappers.CloudError;
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = Mappers.DeploymentValidateResult;
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new msRest.RestError("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = msRest.stripRequest(httpRequest);
                                deserializationError.response = msRest.stripResponse(response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        // Deserialize Response
                        if (statusCode === 400) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = Mappers.DeploymentValidateResult;
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError1 = new msRest.RestError("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError1.request = msRest.stripRequest(httpRequest);
                                deserializationError1.response = msRest.stripResponse(response);
                                return [2 /*return*/, Promise.reject(deserializationError1)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_8 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_8)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Exports the template used for specified deployment.
     *
     * @param {string} resourceGroupName The name of the resource group. The name
     * is case insensitive.
     *
     * @param {string} deploymentName The name of the deployment from which to get
     * the template.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    Deployments.prototype.exportTemplateWithHttpOperationResponse = function (resourceGroupName, deploymentName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_9;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (resourceGroupName !== null && resourceGroupName !== undefined) {
                                if (resourceGroupName.length > 90) {
                                    throw new Error('"resourceGroupName" should satisfy the constraint - "MaxLength": 90');
                                }
                                if (resourceGroupName.length < 1) {
                                    throw new Error('"resourceGroupName" should satisfy the constraint - "MinLength": 1');
                                }
                                if (resourceGroupName.match(/^[-\w\._\(\)]+$/) === null) {
                                    throw new Error('"resourceGroupName" should satisfy the constraint - "Pattern": /^[-\w\._\(\)]+$/');
                                }
                            }
                            if (deploymentName === null || deploymentName === undefined || typeof deploymentName.valueOf() !== 'string') {
                                throw new Error('deploymentName cannot be null or undefined and it must be of type string.');
                            }
                            if (deploymentName !== null && deploymentName !== undefined) {
                                if (deploymentName.length > 64) {
                                    throw new Error('"deploymentName" should satisfy the constraint - "MaxLength": 64');
                                }
                                if (deploymentName.length < 1) {
                                    throw new Error('"deploymentName" should satisfy the constraint - "MinLength": 1');
                                }
                                if (deploymentName.match(/^[-\w\._\(\)]+$/) === null) {
                                    throw new Error('"deploymentName" should satisfy the constraint - "Pattern": /^[-\w\._\(\)]+$/');
                                }
                            }
                            if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
                                throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{deploymentName}', encodeURIComponent(deploymentName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'POST';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new msRest.RestError(operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = msRest.stripRequest(httpRequest);
                            error.response = msRest.stripResponse(response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = Mappers.CloudError;
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = Mappers.DeploymentExportResult;
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new msRest.RestError("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = msRest.stripRequest(httpRequest);
                                deserializationError.response = msRest.stripResponse(response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_9 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_9)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Get all the deployments for a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group with the
     * deployments to get. The name is case insensitive.
     *
     * @param {DeploymentsListByResourceGroupOptionalParams} [options] Optional
     * Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    Deployments.prototype.listByResourceGroupWithHttpOperationResponse = function (resourceGroupName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, filter, top, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_10;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        filter = (options && options.filter !== undefined) ? options.filter : undefined;
                        top = (options && options.top !== undefined) ? options.top : undefined;
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (resourceGroupName !== null && resourceGroupName !== undefined) {
                                if (resourceGroupName.length > 90) {
                                    throw new Error('"resourceGroupName" should satisfy the constraint - "MaxLength": 90');
                                }
                                if (resourceGroupName.length < 1) {
                                    throw new Error('"resourceGroupName" should satisfy the constraint - "MinLength": 1');
                                }
                                if (resourceGroupName.match(/^[-\w\._\(\)]+$/) === null) {
                                    throw new Error('"resourceGroupName" should satisfy the constraint - "Pattern": /^[-\w\._\(\)]+$/');
                                }
                            }
                            if (filter !== null && filter !== undefined && typeof filter.valueOf() !== 'string') {
                                throw new Error('filter must be of type string.');
                            }
                            if (top !== null && top !== undefined && typeof top !== 'number') {
                                throw new Error('top must be of type number.');
                            }
                            if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
                                throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        if (filter !== null && filter !== undefined) {
                            queryParamsArray.push('$filter=' + encodeURIComponent(filter));
                        }
                        if (top !== null && top !== undefined) {
                            queryParamsArray.push('$top=' + encodeURIComponent(top.toString()));
                        }
                        queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new msRest.RestError(operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = msRest.stripRequest(httpRequest);
                            error.response = msRest.stripResponse(response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = Mappers.CloudError;
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = Mappers.DeploymentListResult;
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new msRest.RestError("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = msRest.stripRequest(httpRequest);
                                deserializationError.response = msRest.stripResponse(response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_10 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_10)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * @summary Deletes a deployment from the deployment history.
     *
     * A template deployment that is currently running cannot be deleted. Deleting
     * a template deployment removes the associated deployment operations. Deleting
     * a template deployment does not affect the state of the resource group. This
     * is an asynchronous operation that returns a status of 202 until the template
     * deployment is successfully deleted. The Location response header contains
     * the URI that is used to obtain the status of the process. While the process
     * is running, a call to the URI in the Location header returns a status of
     * 202. When the process finishes, the URI in the Location header returns a
     * status of 204 on success. If the asynchronous request failed, the URI in the
     * Location header returns an error-level status code.
     *
     * @param {string} resourceGroupName The name of the resource group with the
     * deployment to delete. The name is case insensitive.
     *
     * @param {string} deploymentName The name of the deployment to delete.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    Deployments.prototype.beginDeleteMethodWithHttpOperationResponse = function (resourceGroupName, deploymentName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, err_11;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (resourceGroupName !== null && resourceGroupName !== undefined) {
                                if (resourceGroupName.length > 90) {
                                    throw new Error('"resourceGroupName" should satisfy the constraint - "MaxLength": 90');
                                }
                                if (resourceGroupName.length < 1) {
                                    throw new Error('"resourceGroupName" should satisfy the constraint - "MinLength": 1');
                                }
                                if (resourceGroupName.match(/^[-\w\._\(\)]+$/) === null) {
                                    throw new Error('"resourceGroupName" should satisfy the constraint - "Pattern": /^[-\w\._\(\)]+$/');
                                }
                            }
                            if (deploymentName === null || deploymentName === undefined || typeof deploymentName.valueOf() !== 'string') {
                                throw new Error('deploymentName cannot be null or undefined and it must be of type string.');
                            }
                            if (deploymentName !== null && deploymentName !== undefined) {
                                if (deploymentName.length > 64) {
                                    throw new Error('"deploymentName" should satisfy the constraint - "MaxLength": 64');
                                }
                                if (deploymentName.length < 1) {
                                    throw new Error('"deploymentName" should satisfy the constraint - "MinLength": 1');
                                }
                                if (deploymentName.match(/^[-\w\._\(\)]+$/) === null) {
                                    throw new Error('"deploymentName" should satisfy the constraint - "Pattern": /^[-\w\._\(\)]+$/');
                                }
                            }
                            if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
                                throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{deploymentName}', encodeURIComponent(deploymentName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'DELETE';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 202 && statusCode !== 204) {
                            error = new msRest.RestError(operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = msRest.stripRequest(httpRequest);
                            error.response = msRest.stripResponse(response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = Mappers.CloudError;
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_11 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_11)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * @summary Deploys resources to a resource group.
     *
     * You can provide the template and parameters directly in the request or link
     * to JSON files.
     *
     * @param {string} resourceGroupName The name of the resource group to deploy
     * the resources to. The name is case insensitive. The resource group must
     * already exist.
     *
     * @param {string} deploymentName The name of the deployment.
     *
     * @param {Deployment} parameters Additional parameters supplied to the
     * operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    Deployments.prototype.beginCreateOrUpdateWithHttpOperationResponse = function (resourceGroupName, deploymentName, parameters, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, baseUrl, requestUrl, queryParamsArray, httpRequest, headerName, requestContent, requestModel, requestModelMapper, serializationError, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, parsedResponse, resultMapper, deserializationError1, err_12;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
                                throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
                            }
                            if (resourceGroupName !== null && resourceGroupName !== undefined) {
                                if (resourceGroupName.length > 90) {
                                    throw new Error('"resourceGroupName" should satisfy the constraint - "MaxLength": 90');
                                }
                                if (resourceGroupName.length < 1) {
                                    throw new Error('"resourceGroupName" should satisfy the constraint - "MinLength": 1');
                                }
                                if (resourceGroupName.match(/^[-\w\._\(\)]+$/) === null) {
                                    throw new Error('"resourceGroupName" should satisfy the constraint - "Pattern": /^[-\w\._\(\)]+$/');
                                }
                            }
                            if (deploymentName === null || deploymentName === undefined || typeof deploymentName.valueOf() !== 'string') {
                                throw new Error('deploymentName cannot be null or undefined and it must be of type string.');
                            }
                            if (deploymentName !== null && deploymentName !== undefined) {
                                if (deploymentName.length > 64) {
                                    throw new Error('"deploymentName" should satisfy the constraint - "MaxLength": 64');
                                }
                                if (deploymentName.length < 1) {
                                    throw new Error('"deploymentName" should satisfy the constraint - "MinLength": 1');
                                }
                                if (deploymentName.match(/^[-\w\._\(\)]+$/) === null) {
                                    throw new Error('"deploymentName" should satisfy the constraint - "Pattern": /^[-\w\._\(\)]+$/');
                                }
                            }
                            if (parameters === null || parameters === undefined) {
                                throw new Error('parameters cannot be null or undefined.');
                            }
                            if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
                                throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
                                throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        baseUrl = this.client.baseUri;
                        requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}';
                        requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
                        requestUrl = requestUrl.replace('{deploymentName}', encodeURIComponent(deploymentName));
                        requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
                        queryParamsArray = [];
                        queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));
                        if (queryParamsArray.length > 0) {
                            requestUrl += '?' + queryParamsArray.join('&');
                        }
                        httpRequest = new WebResource();
                        httpRequest.method = 'PUT';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        requestContent = null;
                        requestModel = null;
                        try {
                            if (parameters !== null && parameters !== undefined) {
                                requestModelMapper = Mappers.Deployment;
                                requestModel = client.serializer.serialize(requestModelMapper, parameters, 'parameters');
                                requestContent = JSON.stringify(requestModel);
                            }
                        }
                        catch (error) {
                            serializationError = new Error("Error \"" + error.message + "\" occurred in serializing the " +
                                ("payload - " + JSON.stringify(parameters, null, 2) + "."));
                            return [2 /*return*/, Promise.reject(serializationError)];
                        }
                        httpRequest.body = requestContent;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200 && statusCode !== 201) {
                            error = new msRest.RestError(operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = msRest.stripRequest(httpRequest);
                            error.response = msRest.stripResponse(response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = Mappers.CloudError;
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = Mappers.DeploymentExtended;
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new msRest.RestError("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = msRest.stripRequest(httpRequest);
                                deserializationError.response = msRest.stripResponse(response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        // Deserialize Response
                        if (statusCode === 201) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = Mappers.DeploymentExtended;
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError1 = new msRest.RestError("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError1.request = msRest.stripRequest(httpRequest);
                                deserializationError1.response = msRest.stripResponse(response);
                                return [2 /*return*/, Promise.reject(deserializationError1)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_12 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_12)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    /**
     * Get all the deployments for a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    Deployments.prototype.listByResourceGroupNextWithHttpOperationResponse = function (nextPageLink, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, requestUrl, httpRequest, headerName, operationRes, response, statusCode, error, parsedErrorResponse, resultMapper, parsedResponse, resultMapper, deserializationError, err_13;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = this.client;
                        // Validate
                        try {
                            if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                                throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                            }
                            if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                                throw new Error('this.client.acceptLanguage must be of type string.');
                            }
                        }
                        catch (error) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        requestUrl = '{nextLink}';
                        requestUrl = requestUrl.replace('{nextLink}', nextPageLink);
                        httpRequest = new WebResource();
                        httpRequest.method = 'GET';
                        httpRequest.url = requestUrl;
                        httpRequest.headers = {};
                        // Set Headers
                        httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
                        if (this.client.generateClientRequestId) {
                            httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();
                        }
                        if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
                            httpRequest.headers['accept-language'] = this.client.acceptLanguage;
                        }
                        if (options && options.customHeaders) {
                            for (headerName in options.customHeaders) {
                                if (options.customHeaders.hasOwnProperty(headerName)) {
                                    httpRequest.headers[headerName] = options.customHeaders[headerName];
                                }
                            }
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.pipeline(httpRequest)];
                    case 2:
                        operationRes = _a.sent();
                        response = operationRes.response;
                        statusCode = response.status;
                        if (statusCode !== 200) {
                            error = new msRest.RestError(operationRes.bodyAsText);
                            error.statusCode = response.status;
                            error.request = msRest.stripRequest(httpRequest);
                            error.response = msRest.stripResponse(response);
                            parsedErrorResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedErrorResponse) {
                                    if (parsedErrorResponse.error)
                                        parsedErrorResponse = parsedErrorResponse.error;
                                    if (parsedErrorResponse.code)
                                        error.code = parsedErrorResponse.code;
                                    if (parsedErrorResponse.message)
                                        error.message = parsedErrorResponse.message;
                                }
                                if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                                    resultMapper = Mappers.CloudError;
                                    error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                                }
                            }
                            catch (defaultError) {
                                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody " +
                                    ("- \"" + operationRes.bodyAsText + "\" for the default response.");
                                return [2 /*return*/, Promise.reject(error)];
                            }
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        // Deserialize Response
                        if (statusCode === 200) {
                            parsedResponse = operationRes.bodyAsJson;
                            try {
                                if (parsedResponse !== null && parsedResponse !== undefined) {
                                    resultMapper = Mappers.DeploymentListResult;
                                    operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                                }
                            }
                            catch (error) {
                                deserializationError = new msRest.RestError("Error " + error + " occurred in deserializing the responseBody - " + operationRes.bodyAsText);
                                deserializationError.request = msRest.stripRequest(httpRequest);
                                deserializationError.response = msRest.stripResponse(response);
                                return [2 /*return*/, Promise.reject(deserializationError)];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_13 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_13)];
                    case 4: return [2 /*return*/, Promise.resolve(operationRes)];
                }
            });
        });
    };
    Deployments.prototype.deleteMethod = function (resourceGroupName, deploymentName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.deleteMethodWithHttpOperationResponse(resourceGroupName, deploymentName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.deleteMethodWithHttpOperationResponse(resourceGroupName, deploymentName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    Deployments.prototype.checkExistence = function (resourceGroupName, deploymentName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.checkExistenceWithHttpOperationResponse(resourceGroupName, deploymentName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.checkExistenceWithHttpOperationResponse(resourceGroupName, deploymentName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    Deployments.prototype.createOrUpdate = function (resourceGroupName, deploymentName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.createOrUpdateWithHttpOperationResponse(resourceGroupName, deploymentName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.createOrUpdateWithHttpOperationResponse(resourceGroupName, deploymentName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    Deployments.prototype.get = function (resourceGroupName, deploymentName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.getWithHttpOperationResponse(resourceGroupName, deploymentName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.getWithHttpOperationResponse(resourceGroupName, deploymentName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    Deployments.prototype.cancel = function (resourceGroupName, deploymentName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.cancelWithHttpOperationResponse(resourceGroupName, deploymentName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.cancelWithHttpOperationResponse(resourceGroupName, deploymentName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    Deployments.prototype.validate = function (resourceGroupName, deploymentName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.validateWithHttpOperationResponse(resourceGroupName, deploymentName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.validateWithHttpOperationResponse(resourceGroupName, deploymentName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    Deployments.prototype.exportTemplate = function (resourceGroupName, deploymentName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.exportTemplateWithHttpOperationResponse(resourceGroupName, deploymentName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.exportTemplateWithHttpOperationResponse(resourceGroupName, deploymentName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    Deployments.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listByResourceGroupWithHttpOperationResponse(resourceGroupName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.listByResourceGroupWithHttpOperationResponse(resourceGroupName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    Deployments.prototype.beginDeleteMethod = function (resourceGroupName, deploymentName, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, deploymentName, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, deploymentName, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    Deployments.prototype.beginCreateOrUpdate = function (resourceGroupName, deploymentName, parameters, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, deploymentName, parameters, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, deploymentName, parameters, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    Deployments.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        var cb = callback;
        if (!callback) {
            return this.listByResourceGroupNextWithHttpOperationResponse(nextPageLink, options).then(function (operationRes) {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch(function (err) {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.listByResourceGroupNextWithHttpOperationResponse(nextPageLink, options))(function (err, data) {
                if (err) {
                    return cb(err);
                }
                var result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    };
    return Deployments;
}());
export { Deployments };
//# sourceMappingURL=deployments.js.map